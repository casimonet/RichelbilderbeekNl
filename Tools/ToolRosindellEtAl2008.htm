<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>RosindellEtAl2008</title>
  <meta name="description" content="C++ RosindellEtAl2008"/>
  <meta name="keywords" content="C++ RosindellEtAl2008 "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolRosindellEtAl2008.htm">RosindellEtAl2008</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ToolRosindellEtAl2008-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolRosindellEtAl2008/ToolRosindellEtAl2008Console.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/ToolRosindellEtAl2008Console.pro" border = "1"><tr><td><code>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>All.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>NoWeffcpp.pri)<br/>
<br/>
include(ToolRosindellEtAl2008Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolRosindellEtAl2008/ToolRosindellEtAl2008Desktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/ToolRosindellEtAl2008Desktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>All.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>NoWeffcpp.pri)<br/>
<br/>
include(ToolRosindellEtAl2008Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qttree.cpp<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qttree.ui<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qttree.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolRosindellEtAl2008/ToolRosindellEtAl2008Desktop3d.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/ToolRosindellEtAl2008Desktop3d.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>NoWeffcpp.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(ToolRosindellEtAl2008Console.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Urho3d.pri)<br/>
<br/>
<a href="CppQmakeLibs.htm">LIBS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lpthread \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lSDL2 \ #Otherwise use -lSDL<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-ldl \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;-lGL<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mastercontrol.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputmaster.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cameramaster.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mastercontrol.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;inputmaster.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;cameramaster.h<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ToolRosindellEtAl2008.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/ToolRosindellEtAl2008Console.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/ToolRosindellEtAl2008Console.pri" border = "1"><tr><td><code>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tree.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nrrand.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;simulation.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;task.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;simulation_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rng.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;treedatapoint.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;treenode.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;task_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersalkernel.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rng_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tree_test.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tree.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;nrrand.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;simulation.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;task.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rng.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;treedatapoint.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;treenode.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersalkernel.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/cameramaster.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/cameramaster.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><a href="CppMusic.htm">Music</a> used: Macroform, song 'Dreaming',<br/>
<a href="CppComment.htm">//</a>from https:<a href="CppComment.htm">//</a>www.jamendo.com/en/list/a142918/meditations<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> once<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mastercontrol.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Urho3D {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Drawable;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Node;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Scene;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Sprite;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Viewport;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> RenderPath;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> RigidBody;<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> Camera;<br/>
}<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Urho3D;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> CameraMaster : <b><a href="CppPublic.htm">public</a></b> Object<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OBJECT(CameraMaster);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> MasterControl;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> InputMaster;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CameraMaster(Context *context, MasterControl* masterControl);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Start();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Stop();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Camera&gt; camera_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Viewport&gt; viewport_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;RenderPath&gt; effectRenderPath;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Vector3 GetWorldPosition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Quaternion GetRotation();<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MasterControl * <b><a href="CppConst.htm">const</a></b> masterControl_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleSceneUpdate(StringHash eventType, VariantMap &amp;eventData);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; translationNode_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; rotationNode_;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;RigidBody&gt; rigidBody_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> yaw_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> pitch_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppDouble.htm">double</a></b> roll_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> yawDelta_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> pitchDelta_ <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> forceMultiplier <a href="CppOperatorAssign.htm">=</a> 1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetupViewport();<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/cameramaster.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/cameramaster.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><a href="CppMusic.htm">Music</a> used: Macroform, song 'Dreaming',<br/>
<a href="CppComment.htm">//</a>from https:<a href="CppComment.htm">//</a>www.jamendo.com/en/list/a142918/meditations<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-variable"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wstrict-aliasing"<br/>
<a href="CppDefine.htm">#define</a> BT_INFINITY<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Urho3D.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Core/CoreEvents.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/SceneEvents.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Camera.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Viewport.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/RenderPath.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Light.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/Collision<a href="CppShape.htm">Shape</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/RigidBody.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/Scene.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/ResourceCache.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/<a href="CppXml.htm">XML</a>File.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Math/MathDefs.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Input/Input.h&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "cameramaster.h"<br/>
<br/>
<br/>
Vector3 Scale(<b><a href="CppConst.htm">const</a></b> Vector3&amp; lhs, <b><a href="CppConst.htm">const</a></b> Vector3&amp; rhs)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Vector3(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lhs.x_ * rhs.x_,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lhs.y_ * rhs.y_,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lhs.z_ * rhs.z_<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
CameraMaster::CameraMaster(<br/>
&nbsp;&nbsp;Context *context,<br/>
&nbsp;&nbsp;MasterControl *masterControl<br/>
) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Object(context),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;masterControl_{masterControl}<br/>
{<br/>
&nbsp;&nbsp;SubscribeToEvent(E_SCENEUPDATE, HANDLER(CameraMaster, HandleSceneUpdate));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the camera. Limit far clip distance to match the fog<br/>
&nbsp;&nbsp;translationNode_ <a href="CppOperatorAssign.htm">=</a> masterControl_-&gt;world_.scene-&gt;CreateChild("CamTrans");<br/>
&nbsp;&nbsp;rotationNode_ <a href="CppOperatorAssign.htm">=</a> translationNode_-&gt;CreateChild("CamRot");<br/>
&nbsp;&nbsp;camera_ <a href="CppOperatorAssign.htm">=</a> rotationNode_-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Camera&gt;();<br/>
&nbsp;&nbsp;camera_-&gt;SetFarClip(1024.0f);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set an initial position <b><a href="CppFor.htm">for</a></b> the camera scene node above the origin<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>translationNode_-&gt;SetPosition(Vector3(0.0f, 3.0f, 0.0f));<br/>
&nbsp;&nbsp;translationNode_-&gt;SetPosition(Vector3(0.0, 3.0,-20.0));<br/>
<br/>
&nbsp;&nbsp;rotationNode_-&gt;SetRotation(Quaternion(0.0f, 90.0f, 0.0f));<br/>
&nbsp;&nbsp;rigidBody_ <a href="CppOperatorAssign.htm">=</a> translationNode_-&gt;Create<a href="CppComponent.htm">Component</a>&lt;RigidBody&gt;();<br/>
&nbsp;&nbsp;rigidBody_-&gt;SetAngularDamping(10.0f);<br/>
&nbsp;&nbsp;Collision<a href="CppShape.htm">Shape</a>* collision<a href="CppShape.htm">Shape</a> <a href="CppOperatorAssign.htm">=</a> translationNode_-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Collision<a href="CppShape.htm">Shape</a>&gt;();<br/>
&nbsp;&nbsp;collision<a href="CppShape.htm">Shape</a>-&gt;SetSphere(0.1f);<br/>
&nbsp;&nbsp;rigidBody_-&gt;SetMass(1.0f);<br/>
<br/>
&nbsp;&nbsp;Node* lightNode <a href="CppOperatorAssign.htm">=</a> translationNode_-&gt;CreateChild("DirectionalLight");<br/>
&nbsp;&nbsp;lightNode-&gt;SetDirection(Vector3(0.0f, <a href="CppOperatorMinus.htm">-</a>1.0f, 0.0f));<br/>
&nbsp;&nbsp;Light* light <a href="CppOperatorAssign.htm">=</a> lightNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Light&gt;();<br/>
&nbsp;&nbsp;light-&gt;SetLightType(LIGHT_POINT);<br/>
&nbsp;&nbsp;light-&gt;SetBrightness(0.5f);<br/>
&nbsp;&nbsp;light-&gt;SetColor(Color(0.7f, 0.9f, 0.6f));<br/>
&nbsp;&nbsp;light-&gt;SetCastShadows(<b><a href="CppFalse.htm">false</a></b>);<br/>
<br/>
&nbsp;&nbsp;SetupViewport();<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> CameraMaster::Start()<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> CameraMaster::Stop()<br/>
{<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> CameraMaster::SetupViewport()<br/>
{<br/>
&nbsp;&nbsp;Renderer * <b><a href="CppConst.htm">const</a></b> renderer <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Renderer&gt;();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set up a viewport to the Renderer subsystem so that the 3D scene can be seen<br/>
&nbsp;&nbsp;SharedPtr&lt;Viewport&gt; viewport(<b><a href="CppNew.htm">new</a></b> Viewport(context_, masterControl_-&gt;world_.scene, camera_));<br/>
&nbsp;&nbsp;viewport_ <a href="CppOperatorAssign.htm">=</a> viewport;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> anti-aliasing<br/>
&nbsp;&nbsp;viewport_-&gt;SetRenderPath(effectRenderPath);<br/>
&nbsp;&nbsp;renderer-&gt;SetViewport(0, viewport);<br/>
}<br/>
<br/>
Vector3 CameraMaster::GetWorldPosition()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> translationNode_-&gt;GetWorldPosition();<br/>
}<br/>
<br/>
Quaternion CameraMaster::GetRotation()<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> rotationNode_-&gt;GetRotation();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> CameraMaster::HandleSceneUpdate(StringHash <a href="CppComment.htm">/*</a> eventType <a href="CppComment.htm">*/</a>, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Update;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Take the frame <a href="CppTime.htm">time</a> step, which is stored as a <b><a href="CppDouble.htm">double</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> <a href="CppTime.htm">time</a>Step <a href="CppOperatorAssign.htm">=</a> eventData[P_TIMESTEP].GetFloat();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Movement speed as world units per second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> MOVE_SPEED <a href="CppOperatorAssign.htm">=</a> 2000.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mouse sensitivity as degrees per pixel<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> MOUSE_SENSITIVITY <a href="CppOperatorAssign.htm">=</a> 0.1;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Use <b><a href="CppThis.htm">this</a></b> frame's mouse motion to adjust camera node yaw and pitch. Clamp the pitch between <a href="CppOperatorMinus.htm">-</a>90 and 90 degrees. Only move the camera when the cursor is hidden.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Input* input <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Input&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;IntVector2 mouseMove <a href="CppOperatorAssign.htm">=</a> input-&gt;GetMouseMove();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yawDelta_ <a href="CppOperatorAssign.htm">=</a> 0.5*(yawDelta_ <a href="CppOperatorPlus.htm">+</a> MOUSE_SENSITIVITY * mouseMove.x_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pitchDelta_ <a href="CppOperatorAssign.htm">=</a> 0.5*(pitchDelta_ <a href="CppOperatorPlus.htm">+</a> MOUSE_SENSITIVITY * mouseMove.y_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;yaw_ <a href="CppOperatorPlusAssign.htm">+=</a> yawDelta_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pitch_ <a href="CppOperatorPlusAssign.htm">+=</a> pitchDelta_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pitch_ <a href="CppOperatorAssign.htm">=</a> Clamp(pitch_, <a href="CppOperatorMinus.htm">-</a>89.0, 89.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppConstructor.htm">Construct</a> <b><a href="CppNew.htm">new</a></b> orientation <b><a href="CppFor.htm">for</a></b> the camera scene node from yaw and pitch. Roll is fixed to zero<br/>
&nbsp;&nbsp;&nbsp;&nbsp;translationNode_-&gt;SetRotation(Quaternion(0.0f, 0.0f, 0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rotationNode_-&gt;SetRotation(Quaternion(pitch_, yaw_, 0.0f));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Read WASD keys and move the camera scene node to the corresponding direction <b><a href="CppIf.htm">if</a></b> they are pressed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Vector3 camForce <a href="CppOperatorAssign.htm">=</a> Vector3::ZERO;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('W')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Scale(rotationNode_-&gt;GetDirection(), Vector3(1.0f,0.0f,1.0f) ).Normalized();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('S')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Scale(rotationNode_-&gt;GetDirection(), Vector3(-1.0f,0.0f,-1.0f) ).Normalized();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('D')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Scale(rotationNode_-&gt;GetRight(), Vector3(1.0f,0.0f,1.0f) ).Normalized();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('A')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Scale(rotationNode_-&gt;GetRight(), Vector3(-1.0f,0.0f,-1.0f) ).Normalized();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('E')) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Vector3::UP;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (input-&gt;GetKeyDown('Q') <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> translationNode_-&gt;GetPosition().y_ &gt; 1.0f) camForce <a href="CppOperatorPlusAssign.htm">+=</a> Vector3::DOWN;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;camForce <a href="CppOperatorAssign.htm">=</a> camForce.Normalized() * MOVE_SPEED * <a href="CppTime.htm">time</a>Step;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> ( forceMultiplier &lt; 8.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> (input-&gt;GetKeyDown(KEY_LSHIFT)<a href="CppOperatorLogicalOr.htm">||</a>input-&gt;GetKeyDown(KEY_RSHIFT)) ){<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forceMultiplier <a href="CppOperatorPlusAssign.htm">+=</a> 0.23;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} <b><a href="CppElse.htm">else</a></b> forceMultiplier <a href="CppOperatorAssign.htm">=</a> pow(forceMultiplier, 0.75);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rigidBody_-&gt;ApplyForce( (forceMultiplier * camForce) <a href="CppOperatorMinus.htm">-</a> (2.3f * rigidBody_-&gt;GetLinearVelocity()) );<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (translationNode_-&gt;GetPosition().y_ &lt; 1.0f)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translationNode_-&gt;SetPosition(Vector3(translationNode_-&gt;GetPosition().x_, 1.0f, translationNode_-&gt;GetPosition().z_));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rigidBody_-&gt;SetLinearVelocity(Vector3(rigidBody_-&gt;GetLinearVelocity().x_, 0.0f, rigidBody_-&gt;GetLinearVelocity().z_));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/dispersalkernel.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/dispersalkernel.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> DISPERSALKERNEL_H<br/>
<a href="CppDefine.htm">#define</a> DISPERSALKERNEL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> DispersalKernel { square, normal };<br/>
<br/>
<a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> DispersalKernel kernel) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> DispersalKernel kernel) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, DispersalKernel&amp; kernel) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> DISPERSALKERNEL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/dispersalkernel.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/dispersalkernel.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "dispersalkernel.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppStdString.htm">std::string</a> ToStr(<b><a href="CppConst.htm">const</a></b> DispersalKernel kernel) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (kernel)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> DispersalKernel::normal: <b><a href="CppReturn.htm">return</a></b> "normal";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> DispersalKernel::square: <b><a href="CppReturn.htm">return</a></b> "square";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("ToStr(<b><a href="CppConst.htm">const</a></b> DispersalKernel kernel)");<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> DispersalKernel kernel) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(kernel);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, DispersalKernel&amp; kernel) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> i;<br/>
&nbsp;&nbsp;kernel <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;DispersalKernel&gt;(i);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/grid.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/grid.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> GRID_H<br/>
<a href="CppDefine.htm">#define</a> GRID_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "treedata<a href="CppPointer.htm">point</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> TreeData<a href="CppPoint.htm">Point</a>;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "treedata<a href="CppPointer.htm">point</a>.h"<br/>
<br/>
<a href="CppComment.htm">///</a>Grid supplies TreeData<a href="CppPoint.htm">Point</a>s a spatial context<br/>
<a href="CppComment.htm">///</a>and the ability to index them<br/>
<b><a href="CppStruct.htm">struct</a></b> Grid<br/>
{<br/>
&nbsp;&nbsp;Grid() {}<br/>
&nbsp;&nbsp;Grid(<b><a href="CppConst.htm">const</a></b> Grid&amp; other);<br/>
&nbsp;&nbsp;Grid&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Grid&amp; other);<br/>
<br/>
&nbsp;&nbsp;Grid(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;&amp; v<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;TreeData<a href="CppPoint.htm">Point</a> * Get(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TreeData<a href="CppPoint.htm">Point</a> * <b><a href="CppConst.htm">const</a></b> p<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>*<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m_v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>*<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateGrid(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;&amp; v<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_gridsize{4000};<br/>
<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GRID_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/grid.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/grid.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "grid.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "treedata<a href="CppPointer.htm">point</a>.h"<br/>
Grid::Grid(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;&amp; v<br/>
) : m_v{CreateGrid(width,height,v)}<br/>
{<br/>
}<br/>
<br/>
Grid::Grid(<b><a href="CppConst.htm">const</a></b> Grid&amp; other)<br/>
&nbsp;&nbsp;: m_v{other.m_v}<br/>
{<br/>
<br/>
}<br/>
<br/>
Grid&amp; Grid::<b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> Grid&amp; other)<br/>
{<br/>
&nbsp;&nbsp;m_v <a href="CppOperatorAssign.htm">=</a> other.m_v;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>*<a href="CppOperatorStreamIn.htm">&gt;&gt;</a><br/>
&nbsp;&nbsp;Grid::CreateGrid(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;&amp; active<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(width &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(height &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> sm_gridsize &lt; width * 2 ? width * 2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: (sm_gridsize &lt; height*2 ? height*2 : sm_gridsize)<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>*<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> v(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sz,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>*&gt;(sz,<b><a href="CppNullptr.htm">nullptr</a></b>)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (TreeData<a href="CppPoint.htm">Point</a>&amp; p: active)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x{p.GetXpos()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y{p.GetYpos()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[x][y] <a href="CppOperatorAssign.htm">=</a> &amp;p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
TreeData<a href="CppPoint.htm">Point</a> * Grid::Get(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v[0].size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_v[x][y];<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Grid::Set(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;TreeData<a href="CppPoint.htm">Point</a> * <b><a href="CppConst.htm">const</a></b> p<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_v[0].size()));<br/>
&nbsp;&nbsp;m_v[x][y] <a href="CppOperatorAssign.htm">=</a> p;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/inputmaster.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/inputmaster.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><a href="CppMusic.htm">Music</a> used: Macroform, song 'Dreaming',<br/>
<a href="CppComment.htm">//</a>from https:<a href="CppComment.htm">//</a>www.jamendo.com/en/list/a142918/meditations<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> once<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-variable"<br/>
<a href="CppDefine.htm">#define</a> BT_INFINITY<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Input/Input.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mastercontrol.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Urho3D {<br/>
<b><a href="CppClass.htm">class</a></b> Drawable;<br/>
<b><a href="CppClass.htm">class</a></b> Node;<br/>
<b><a href="CppClass.htm">class</a></b> Scene;<br/>
<b><a href="CppClass.htm">class</a></b> Sprite;<br/>
}<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Urho3D;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> InputMaster : <b><a href="CppPublic.htm">public</a></b> Object<br/>
{<br/>
&nbsp;&nbsp;OBJECT(InputMaster);<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;InputMaster(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Context * <b><a href="CppConst.htm">const</a></b> context,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MasterControl * <b><a href="CppConst.htm">const</a></b> masterControl<br/>
&nbsp;&nbsp;);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;MasterControl * <b><a href="CppConst.htm">const</a></b> masterControl_;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleMouseDown(StringHash eventType, VariantMap &amp;eventData);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleKeyDown(StringHash eventType, VariantMap &amp;eventData);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> HandleMouseUp(StringHash eventType, VariantMap &amp;eventData);<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/inputmaster.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/inputmaster.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><a href="CppMusic.htm">Music</a> used: Macroform, song 'Dreaming',<br/>
<a href="CppComment.htm">//</a>from https:<a href="CppComment.htm">//</a>www.jamendo.com/en/list/a142918/meditations<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-variable"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wstrict-aliasing"<br/>
<a href="CppDefine.htm">#define</a> BT_INFINITY<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Urho3D.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/Node.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Graphics.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/OctreeQuery.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/IO/FileSystem.h&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "inputmaster.h"<br/>
<a href="CppInclude.htm">#include</a> "cameramaster.h"<br/>
<br/>
InputMaster::InputMaster(<br/>
&nbsp;&nbsp;Context * <b><a href="CppConst.htm">const</a></b> context,<br/>
&nbsp;&nbsp;MasterControl * <b><a href="CppConst.htm">const</a></b> masterControl<br/>
)<br/>
&nbsp;&nbsp;: Object(context),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;masterControl_{masterControl}<br/>
{<br/>
&nbsp;&nbsp;SubscribeToEvent(E_MOUSEBUTTONDOWN, HANDLER(InputMaster, HandleMouseDown));<br/>
&nbsp;&nbsp;SubscribeToEvent(E_KEYDOWN, HANDLER(InputMaster, HandleKeyDown));<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> InputMaster::HandleMouseDown(<br/>
&nbsp;&nbsp;StringHash <a href="CppComment.htm">/*</a> eventType <a href="CppComment.htm">*/</a>, VariantMap &amp; <a href="CppComment.htm">/*</a> eventData <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> MouseButtonDown;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppInt.htm">int</a></b> button <a href="CppOperatorAssign.htm">=</a> eventData[P_BUTTON].GetInt();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> InputMaster::HandleMouseUp(<br/>
&nbsp;&nbsp;StringHash <a href="CppComment.htm">/*</a> eventType <a href="CppComment.htm">*/</a>, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> MouseButtonUp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> button <a href="CppOperatorAssign.htm">=</a> eventData[P_BUTTON].GetInt();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (button <a href="CppOperatorEqual.htm">==</a> MOUSEB_LEFT) {}<a href="CppComment.htm">//</a>Deselect when mouse did not move during click on N_VOID<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> InputMaster::HandleKeyDown(<br/>
&nbsp;&nbsp;StringHash <a href="CppComment.htm">/*</a> eventType <a href="CppComment.htm">*/</a>, VariantMap &amp;eventData)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> KeyDown;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> key <a href="CppOperatorAssign.htm">=</a> eventData[P_KEY].GetInt();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Exit when ESC is pressed<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (key <a href="CppOperatorEqual.htm">==</a> KEY_ESC)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;masterControl_-&gt;Exit();<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Take screenshot<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (key <a href="CppOperatorEqual.htm">==</a> KEY_9)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Graphics * <b><a href="CppConst.htm">const</a></b> graphics{GetSubsystem&lt;Graphics&gt;()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Image screenshot(context_);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;graphics-&gt;TakeScreenShot(screenshot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Here we save in the Data folder with date and <a href="CppTime.htm">time</a> appended<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> String fileName{"screenshot.png"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Log::Write(1, fileName);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;screenshot.SavePNG(fileName);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/main.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a> RosindellEtAl2008, refactoring of code of Rosindell et al., 2008<br/>
<a href="CppComment.htm">//</a> (C) 2015 Richel Bilderbeek<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> The original source code is writtem by James Rosindell<br/>
<a href="CppComment.htm">//</a> and accompanies the following article:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> "A COALESCENCE APPROACH TO SPATIAL NEUTRAL ECOLOGY"<br/>
<a href="CppComment.htm">//</a> James Rosindell, Yan Wong, Rampal Etienne<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "nrrand.h"<br/>
<a href="CppInclude.htm">#include</a> "tree.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> **)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Rng::Test();<br/>
&nbsp;&nbsp;Simulation::Test();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Tree::Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1 ? Rng::Type::rosindell : Rng::Type::bilderbeek<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdRuntime_error.htm">std::runtime_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Done (<a href="CppDebug.htm">debug</a>)" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/mastercontrol.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/mastercontrol.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><a href="CppMusic.htm">Music</a> used: Macroform, song 'Dreaming',<br/>
<a href="CppComment.htm">//</a>from https:<a href="CppComment.htm">//</a>www.jamendo.com/en/list/a142918/meditations<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> once<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Urho3D.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/<a href="CppContainer.htm">Container</a>/HashMap.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Engine/<a href="CppApplication.htm">Application</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Viewport.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Renderer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/UI/UI.h&gt;<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/RigidBody.h&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Urho3D {<br/>
<b><a href="CppClass.htm">class</a></b> Drawable;<br/>
<b><a href="CppClass.htm">class</a></b> Node;<br/>
<b><a href="CppClass.htm">class</a></b> Scene;<br/>
<b><a href="CppClass.htm">class</a></b> Sprite;<br/>
}<br/>
<br/>
<b><a href="CppUsing.htm">using</a></b> <b><a href="CppNamespace.htm">namespace</a></b> Urho3D;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> CameraMaster;<br/>
<b><a href="CppClass.htm">class</a></b> InputMaster;<br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppStruct.htm">struct</a></b> GameWorld<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;CameraMaster&gt; camera;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Scene&gt; scene;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; backgroundNode;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; <b><a href="CppVoid.htm">void</a></b>Node;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStruct.htm">struct</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Node&gt; sceneCursor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Cursor&gt; uiCursor;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppPod.htm">POD</a>Vector&lt;RayQueryResult&gt; hitResults;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;} cursor;<br/>
} GameWorld;<br/>
<br/>
<b><a href="CppTypedef.htm">typedef</a></b> <b><a href="CppStruct.htm">struct</a></b> HitInfo<br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Vector3 position_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Vector3 hitNormal_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node* hitNode_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Drawable* drawable_;<br/>
} HitInfo;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> {<br/>
&nbsp;&nbsp;StringHash <b><a href="CppConst.htm">const</a></b> N_VOID <a href="CppOperatorAssign.htm">=</a> StringHash("Void");<br/>
&nbsp;&nbsp;StringHash <b><a href="CppConst.htm">const</a></b> N_CURSOR <a href="CppOperatorAssign.htm">=</a> StringHash("Cursor");<br/>
&nbsp;&nbsp;StringHash <b><a href="CppConst.htm">const</a></b> N_TILEPART <a href="CppOperatorAssign.htm">=</a> StringHash("TilePart");<br/>
&nbsp;&nbsp;StringHash <b><a href="CppConst.htm">const</a></b> N_<a href="CppSLOT.htm">SLOT</a> <a href="CppOperatorAssign.htm">=</a> StringHash("Slot");<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> MasterControl : <b><a href="CppPublic.htm">public</a></b> <a href="CppApplication.htm">Application</a><br/>
{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;OBJECT(MasterControl);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> InputMaster;<br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> MasterControl(Context* context);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GameWorld world_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;ResourceCache&gt; cache_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Graphics&gt; graphics_;<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Setup before engine <a href="CppInitialize.htm">initialization</a>. Modifies the engine paramaters.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Setup();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Setup after engine <a href="CppInitialize.htm">initialization</a>.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Start();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Cleanup after the <a href="CppMain.htm">main</a> loop. Called by <a href="CppApplication.htm">Application</a>.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppVoid.htm">void</a></b> Stop();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Exit();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateBackground();<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;UI&gt; ui_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;Renderer&gt; renderer_;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SharedPtr&lt;<a href="CppXml.htm">XML</a>File&gt; <b><a href="CppDefault.htm">default</a></b>Style_;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Set custom window title and icon<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetWindowTitleAndIcon();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Create console and <a href="CppDebug.htm">debug</a> HUD<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateConsoleAnd<a href="CppDebug.htm">Debug</a>Hud();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppConstructor.htm">Construct</a> the scene content.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateScene();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppConstructor.htm">Construct</a> user <a href="CppInterface.htm">interface</a> elements.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> CreateUI();<br/>
};<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/mastercontrol.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/mastercontrol.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a><a href="CppMusic.htm">Music</a> used: Macroform, song 'Dreaming',<br/>
<a href="CppComment.htm">//</a>from https:<a href="CppComment.htm">//</a>www.jamendo.com/en/list/a142918/meditations<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-parameter"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-variable"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wstrict-aliasing"<br/>
<a href="CppDefine.htm">#define</a> BT_INFINITY<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Urho3D.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Audio/Sound.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Audio/SoundSource.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Core/CoreEvents.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/<a href="CppDebug.htm">Debug</a>New.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Engine/Console.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Engine/<a href="CppDebug.htm">Debug</a>Hud.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Engine/Engine.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Camera.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/<a href="CppDebug.htm">Debug</a>Renderer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Geometry.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Graphics.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/IndexBuffer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Light.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Material.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Model.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Octree.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/OctreeQuery.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/RenderPath.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/Skybox.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/StaticModel.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Graphics/VertexBuffer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/IO/FileSystem.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/IO/Log.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/Collision<a href="CppShape.htm">Shape</a>.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Physics/PhysicsWorld.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/ResourceCache.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/Resource.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Resource/<a href="CppXml.htm">XML</a>File.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/SceneEvents.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/Scene/Scene.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/UI/Font.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;Urho3D/UI/Text.h&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mastercontrol.h"<br/>
<a href="CppInclude.htm">#include</a> "cameramaster.h"<br/>
<a href="CppInclude.htm">#include</a> "inputmaster.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "rng.h"<br/>
<a href="CppInclude.htm">#include</a> "tree.h"<br/>
<br/>
DEFINE_APPLICATION_MAIN(MasterControl);<br/>
<br/>
MasterControl::MasterControl(Context *context):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppApplication.htm">Application</a>(context)<br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>("ln <a href="CppOperatorMinus.htm">-</a>s ../../<a href="CppLibrary.htm">Libraries</a>/Urho3D/bin/Data")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error) {}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> error{<a href="CppStdSystem.htm">std::system</a>("ln <a href="CppOperatorMinus.htm">-</a>s ../../<a href="CppLibrary.htm">Libraries</a>/Urho3D/bin/CoreData")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (error) {}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::Setup()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Modify engine startup parameters.<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set custom window title and icon.<br/>
&nbsp;&nbsp;engineParameters_["WindowTitle"] <a href="CppOperatorAssign.htm">=</a> "RosindellEtAl2008";<br/>
&nbsp;&nbsp;engineParameters_["LogName"] <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;FileSystem&gt;()-&gt;GetAppPreferencesDir("urho3d", "logs")+"RosindellEtAl2008.log";<br/>
&nbsp;&nbsp;engineParameters_["FullScreen"] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;engineParameters_["Headless"] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;engineParameters_["WindowWidth"] <a href="CppOperatorAssign.htm">=</a> 1024;<br/>
&nbsp;&nbsp;engineParameters_["WindowHeight"] <a href="CppOperatorAssign.htm">=</a> 600;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::Start()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> InputMaster(context_, <b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;cache_ <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;ResourceCache&gt;();<br/>
&nbsp;&nbsp;graphics_ <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Graphics&gt;();<br/>
&nbsp;&nbsp;renderer_ <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;Renderer&gt;();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Get <b><a href="CppDefault.htm">default</a></b> style<br/>
&nbsp;&nbsp;<b><a href="CppDefault.htm">default</a></b>Style_ <a href="CppOperatorAssign.htm">=</a> cache_-&gt;GetResource&lt;<a href="CppXml.htm">XML</a>File&gt;("UI/DefaultStyle.xml");<br/>
&nbsp;&nbsp;SetWindowTitleAndIcon();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create console and <a href="CppDebug.htm">debug</a> HUD.<br/>
&nbsp;&nbsp;CreateConsoleAnd<a href="CppDebug.htm">Debug</a>Hud();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the scene content<br/>
&nbsp;&nbsp;CreateScene();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the UI content<br/>
&nbsp;&nbsp;CreateUI();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Hook up to the frame update and render post-update events<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; resource:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"MacroformDreaming.ogg"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppQFile.htm">QFile</a>::exists(resource.c_str()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a> f( (":/files/"+resource).c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.copy(resource.c_str());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppQFile.htm">QFile</a>::exists(resource.c_str()));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Sound * <b><a href="CppConst.htm">const</a></b> <a href="CppMusic.htm">music</a> <a href="CppOperatorAssign.htm">=</a> cache_-&gt;GetResource&lt;Sound&gt;("MacroformDreaming.ogg");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMusic.htm">music</a>-&gt;SetLooped(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> <a href="CppMusic.htm">music</a>Node <a href="CppOperatorAssign.htm">=</a> world_.scene-&gt;CreateChild("<a href="CppMusic.htm">Music</a>");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SoundSource * <b><a href="CppConst.htm">const</a></b> <a href="CppMusic.htm">music</a>Source <a href="CppOperatorAssign.htm">=</a> <a href="CppMusic.htm">music</a>Node-&gt;Create<a href="CppComponent.htm">Component</a>&lt;SoundSource&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMusic.htm">music</a>Source-&gt;SetSoundType(SOUND_MUSIC);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppMusic.htm">music</a>Source-&gt;Play(<a href="CppMusic.htm">music</a>);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::Stop()<br/>
{<br/>
&nbsp;&nbsp;engine_-&gt;DumpResources(<b><a href="CppTrue.htm">true</a></b>);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::SetWindowTitleAndIcon()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create console<br/>
&nbsp;&nbsp;Console* console <a href="CppOperatorAssign.htm">=</a> engine_-&gt;CreateConsole();<br/>
&nbsp;&nbsp;console-&gt;SetDefaultStyle(<b><a href="CppDefault.htm">default</a></b>Style_);<br/>
&nbsp;&nbsp;console-&gt;GetBackground()-&gt;SetOpacity(0.0f);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create <a href="CppDebug.htm">debug</a> HUD<br/>
&nbsp;&nbsp;<a href="CppDebug.htm">Debug</a>Hud* <a href="CppDebug.htm">debug</a>Hud <a href="CppOperatorAssign.htm">=</a> engine_-&gt;Create<a href="CppDebug.htm">Debug</a>Hud();<br/>
&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>Hud-&gt;SetDefaultStyle(<b><a href="CppDefault.htm">default</a></b>Style_);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::CreateConsoleAnd<a href="CppDebug.htm">Debug</a>Hud()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Create console<br/>
&nbsp;&nbsp;Console* console <a href="CppOperatorAssign.htm">=</a> engine_-&gt;CreateConsole();<br/>
&nbsp;&nbsp;console-&gt;SetDefaultStyle(<b><a href="CppDefault.htm">default</a></b>Style_);<br/>
&nbsp;&nbsp;console-&gt;GetBackground()-&gt;SetOpacity(0.8f);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Create <a href="CppDebug.htm">debug</a> HUD.<br/>
&nbsp;&nbsp;<a href="CppDebug.htm">Debug</a>Hud* <a href="CppDebug.htm">debug</a>Hud <a href="CppOperatorAssign.htm">=</a> engine_-&gt;Create<a href="CppDebug.htm">Debug</a>Hud();<br/>
&nbsp;&nbsp;<a href="CppDebug.htm">debug</a>Hud-&gt;SetDefaultStyle(<b><a href="CppDefault.htm">default</a></b>Style_);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::CreateUI()<br/>
{<br/>
&nbsp;&nbsp;UI* <b><a href="CppConst.htm">const</a></b> ui <a href="CppOperatorAssign.htm">=</a> GetSubsystem&lt;UI&gt;();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a Cursor UI element because we want to be able to hide and show it at will. When hidden, the mouse cursor will control the camera<br/>
&nbsp;&nbsp;world_.cursor.uiCursor <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Cursor(context_);<br/>
&nbsp;&nbsp;world_.cursor.uiCursor-&gt;SetVisible(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;SetCursor(world_.cursor.uiCursor);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set starting position of the cursor at the rendering window center<br/>
&nbsp;&nbsp;world_.cursor.uiCursor-&gt;SetPosition(graphics_-&gt;GetWidth()/2, graphics_-&gt;GetHeight()/2);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::CreateBackground()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; i <a href="CppOperatorLessEqual.htm">&lt;=</a> 2; i<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> j <a href="CppOperatorAssign.htm">=</a> <a href="CppOperatorMinus.htm">-</a>2; j <a href="CppOperatorLessEqual.htm">&lt;=</a> 2; j<a href="CppOperatorIncrement.htm">++</a>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;world_.backgroundNode <a href="CppOperatorAssign.htm">=</a> world_.scene-&gt;CreateChild("BackPlane");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;world_.backgroundNode-&gt;SetScale(Vector3(512.0f, 1.0f, 512.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;world_.backgroundNode-&gt;SetPosition(Vector3(512.0*i, <a href="CppOperatorMinus.htm">-</a>1000.0, 512.0*j));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StaticModel* backgroundObject <a href="CppOperatorAssign.htm">=</a> world_.backgroundNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;StaticModel&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundObject-&gt;SetModel(cache_-&gt;GetResource&lt;Model&gt;("Models/Plane.mdl"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundObject-&gt;SetMaterial(cache_-&gt;GetResource&lt;Material&gt;("Materials/JackEnvMap.xml"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::CreateScene()<br/>
{<br/>
&nbsp;&nbsp;world_.scene <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Scene(context_);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create octree, use <b><a href="CppDefault.htm">default</a></b> volume (-1000, <a href="CppOperatorMinus.htm">-</a>1000, <a href="CppOperatorMinus.htm">-</a>1000) to (1000,1000,1000)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;world_.scene-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Octree&gt;();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create the physics<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;PhysicsWorld * <b><a href="CppConst.htm">const</a></b> physicsWorld <a href="CppOperatorAssign.htm">=</a> world_.scene-&gt;Create<a href="CppComponent.htm">Component</a>&lt;PhysicsWorld&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;physicsWorld-&gt;SetGravity(Vector3::ZERO);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;world_.scene-&gt;Create<a href="CppComponent.htm">Component</a>&lt;<a href="CppDebug.htm">Debug</a>Renderer&gt;();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create an invisible plane for mouse raycasting<br/>
&nbsp;&nbsp;world_.<b><a href="CppVoid.htm">void</a></b>Node <a href="CppOperatorAssign.htm">=</a> world_.scene-&gt;CreateChild("Void");<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Location is set in update since the plane moves with the camera.<br/>
&nbsp;&nbsp;world_.<b><a href="CppVoid.htm">void</a></b>Node-&gt;SetScale(Vector3(1000.0f, 1.0f, 1000.0f));<br/>
&nbsp;&nbsp;StaticModel* planeModel <a href="CppOperatorAssign.htm">=</a> world_.<b><a href="CppVoid.htm">void</a></b>Node-&gt;Create<a href="CppComponent.htm">Component</a>&lt;StaticModel&gt;();<br/>
&nbsp;&nbsp;planeModel-&gt;SetModel(cache_-&gt;GetResource&lt;Model&gt;("Models/Plane.mdl"));<br/>
&nbsp;&nbsp;planeModel-&gt;SetMaterial(cache_-&gt;GetResource&lt;Material&gt;("Materials/Terrain.xml"));<br/>
<br/>
&nbsp;&nbsp;CreateBackground();<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> Create skybox. The Skybox <a href="CppComponent.htm">component</a> is used like StaticModel, but it will be always located at the camera, giving the<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> illusion of the box planes being far away. Use just the ordinary Box model and a suitable material, whose shader will<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> generate the necessary 3D texture coordinates <b><a href="CppFor.htm">for</a></b> cube mapping<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node* skyNode <a href="CppOperatorAssign.htm">=</a> world_.scene-&gt;CreateChild("Sky");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;skyNode-&gt;SetScale(500.0f); <a href="CppComment.htm">//</a> The scale actually does not matter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Skybox* skybox <a href="CppOperatorAssign.htm">=</a> skyNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Skybox&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;skybox-&gt;SetModel(cache_-&gt;GetResource&lt;Model&gt;("Models/Box.mdl"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;skybox-&gt;SetMaterial(cache_-&gt;GetResource&lt;Material&gt;("Materials/Skybox.xml"));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a directional light to the world. Enable cascaded shadows on it<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node* lightNode <a href="CppOperatorAssign.htm">=</a> world_.scene-&gt;CreateChild("DirectionalLight");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lightNode-&gt;SetDirection(Vector3(0.0f, <a href="CppOperatorMinus.htm">-</a>1.0f, 0.0f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Light* light <a href="CppOperatorAssign.htm">=</a> lightNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Light&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetLightType(LIGHT_DIRECTIONAL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetBrightness(1.0f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetColor(Color(1.0f, 0.8f, 0.7f));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetCastShadows(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetShadowBias(BiasParameters(0.00025f, 0.5f));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set cascade splits at 10, 50, 200 world unitys, fade shadows at 80<a href="CppOperatorModulus.htm">%</a> of maximum shadow distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetShadowCascade(CascadeParameters(7.0f, 23.0f, 42.0f, 500.0f, 0.8f));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a second directional light without shadows<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> lightNode <a href="CppOperatorAssign.htm">=</a> world_.scene-&gt;CreateChild("DirectionalLight");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;lightNode-&gt;SetDirection(Vector3(0.0, 1.0, 0.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Light * <b><a href="CppConst.htm">const</a></b> light <a href="CppOperatorAssign.htm">=</a> lightNode-&gt;Create<a href="CppComponent.htm">Component</a>&lt;Light&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetLightType(LIGHT_DIRECTIONAL);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetBrightness(0.25);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetColor(Color(1.0, 1.0, 1.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetCastShadows(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;light-&gt;SetShadowBias(BiasParameters(0.00025f, 0.5f));<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do simulation<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Rng rng(4,Rng::Type::bilderbeek);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_width{3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_length{3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_speciation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dispersal_distance{1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel dispersal_kernel{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DispersalKernel::square<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Tree tree(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rng,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;area_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min_speciation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispersal_distance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tolerance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispersal_kernel<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!tree.IsDone());<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> t=0; t<a href="CppOperatorNotEqual.htm">!=</a>1000; <a href="CppOperatorIncrement.htm">++</a>t)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Draw all active nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; p: GetRelevantActive(tree))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x{p.<a href="CppGetAbs.htm">GetAbs</a>oluteXpos()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y{p.<a href="CppGetAbs.htm">GetAbs</a>oluteYpos()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node * <b><a href="CppConst.htm">const</a></b> node{world_.scene-&gt;CreateChild()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-&gt;SetPosition(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector3(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x) * 1.0), <a href="CppComment.htm">//</a>Urho: X<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(t) * 1.0), <a href="CppComment.htm">//</a>Urho: Y<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 <a href="CppOperatorPlus.htm">+</a> (<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y) * 1.0)&nbsp;&nbsp;<a href="CppComment.htm">//</a>Urho: Z<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StaticModel * <b><a href="CppConst.htm">const</a></b> model <a href="CppOperatorAssign.htm">=</a> node-&gt;Create<a href="CppComponent.htm">Component</a>&lt;StaticModel&gt;();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetModel(cache_-&gt;GetResource&lt;Model&gt;("Models/Box.mdl"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model-&gt;SetCastShadows(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create camera<br/>
&nbsp;&nbsp;world_.camera <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> CameraMaster(context_, <b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> MasterControl::Exit()<br/>
{<br/>
&nbsp;&nbsp;engine_-&gt;Exit();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/nrrand.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/nrrand.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> NRRAND_H<br/>
<a href="CppDefine.htm">#define</a> NRRAND_H<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> NRrand<br/>
{<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;NRrand(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppReturn.htm">returns</a> an <a href="CppInt.htm">integer</a> between 0 and max<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetRandomInt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppReturn.htm">returns</a> normal deviates<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetRandomNormal() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppReturn.htm">returns</a> a uniform <a href="CppRandomNumber.htm">random number</a> in (0,1)<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetRandomFraction() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> the last result (<b><a href="CppFor.htm">for</a></b> normal deviates)<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_lastresult;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> when doing normal deviates and values are in pairs<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <b><a href="CppTrue.htm">true</a></b> when a <b><a href="CppNew.htm">new</a></b> pair is needed, <b><a href="CppFalse.htm">false</a></b> when lastresult can be used<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> m_normflag;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> NRRAND_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/nrrand.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/nrrand.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "nrrand.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCstdlibH.htm">cstdlib</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
NRrand::NRrand(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdSrand.htm">std::srand</a>(seed);<br/>
&nbsp;&nbsp;m_normflag <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> NRrand::GetRandomFraction() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Avoid <b><a href="CppUsing.htm">using</a></b> <a href="CppStdRand.htm">std::rand</a>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [1] <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C<a href="CppOperatorIncrement.htm">++</a> Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. 40.8[15]: 'Prefer a <a href="CppRandomNumber.htm">random number</a> <b><a href="CppClass.htm">class</a></b> <b><a href="CppFor.htm">for</a></b> a particular distribution over direct use of rand()'<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [2] Stephan T. Lavavej. 'rand() Considered Harmful'. 2013. GoingNative 2013<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> [3] <a href="CppBjarneStroustrup.htm">Bjarne Stroustrup</a>. The C<a href="CppOperatorIncrement.htm">++</a> Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2. 40.7.4: 'Producing a <a href="CppRandomNumber.htm">random number</a> generator isn't easy, and unfortunately not all systems deliver a good rand()'<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppStdRand.htm">std::rand</a>())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDivide.htm">/</a><b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(<a href="CppRAND_MAX.htm">RAND_MAX</a>)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> NRrand::GetRandomInt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBoostNumeric_cast.htm">boost::numeric_cast</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFloor.htm">std::floor</a>(GetRandomFraction()*(max+1))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> NRrand::GetRandomNormal() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_normflag)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> r2{2.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> xx{0.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> yy{0.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (r2&gt;1.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx=2.0*GetRandomFraction()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yy=2.0*GetRandomFraction()-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r2=(xx*xx)+(yy*yy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fac{<a href="CppStdSqrt.htm">std::sqrt</a>(-2.0*log(r2)/r2)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_lastresult <a href="CppOperatorAssign.htm">=</a> xx*fac;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> result{yy*fac};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_normflag <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_normflag <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_lastresult;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qttree.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Tree w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/qttree.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/qttree.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> QTTREE_H<br/>
<a href="CppDefine.htm">#define</a> QTTREE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "tree.h"<br/>
<a href="CppInclude.htm">#include</a> "rng.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Tree;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Tree : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Tree(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Tree();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDispersalDistance() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;DispersalKernel GetDispersalKernel() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetLength() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetMinSpeciationRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetTolerance() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Rng GetRng() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetRngSeed() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Rng::Type GetRngType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_next_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Tree *ui;<br/>
<br/>
&nbsp;&nbsp;Rng * m_rng;<br/>
&nbsp;&nbsp;Tree * m_tree;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> m_log;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DisplayTree();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTTREE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/qttree.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/qttree.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "qttree.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qttree.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>Tree::<a href="CppQt.htm">Qt</a>Tree(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Tree),<br/>
&nbsp;&nbsp;m_rng{<b><a href="CppNullptr.htm">nullptr</a></b>},<br/>
&nbsp;&nbsp;m_tree{<b><a href="CppNullptr.htm">nullptr</a></b>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Rng::Test();<br/>
&nbsp;&nbsp;Tree::Test();<br/>
&nbsp;&nbsp;Simulation::Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>Tree::~<a href="CppQt.htm">Qt</a>Tree()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Tree::DisplayTree()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_tree) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;m_tree-&gt;DisplayActive(s);<br/>
&nbsp;&nbsp;m_log <a href="CppOperatorPlusAssign.htm">+=</a> s.str() <a href="CppOperatorPlus.htm">+</a> "\n";<br/>
&nbsp;&nbsp;ui-&gt;text-&gt;setPlainText(m_log.c_str());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>Tree::GetDispersalDistance() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_dispersal_distance-&gt;value();<br/>
}<br/>
<br/>
DispersalKernel <a href="CppQt.htm">Qt</a>Tree::GetDispersalKernel() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_dispersal_type-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Square") <b><a href="CppReturn.htm">return</a></b> DispersalKernel::square;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_dispersal_type-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Normal") <b><a href="CppReturn.htm">return</a></b> DispersalKernel::normal;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppQt.htm">Qt</a>Tree::GetDispersalKernel: unknown text"); <a href="CppComment.htm">//</a>Crashes the program on purpose<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>Tree::GetLength() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_height-&gt;value();<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppQt.htm">Qt</a>Tree::GetMinSpeciationRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_min_speciation_rate-&gt;value();<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppQt.htm">Qt</a>Tree::GetTolerance() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_tolerance-&gt;value();<br/>
}<br/>
<br/>
Rng <a href="CppQt.htm">Qt</a>Tree::GetRng() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Rng(GetRngSeed(),GetRngType());<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>Tree::GetRngSeed() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_rng_seed-&gt;value();<br/>
}<br/>
<br/>
Rng::Type <a href="CppQt.htm">Qt</a>Tree::GetRngType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_rng_type-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Bilderbeek") { <b><a href="CppReturn.htm">return</a></b> Rng::Type::bilderbeek;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_rng_type-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Rosindell" ) { <b><a href="CppReturn.htm">return</a></b> Rng::Type::rosindell;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("<a href="CppQt.htm">Qt</a>Tree::GetRngType: unknown text"); <a href="CppComment.htm">//</a>Crashes the program on purpose<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>Tree::GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> ui-&gt;box_width-&gt;value();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Tree::on_button_start_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_rng;<br/>
&nbsp;&nbsp;m_rng <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Rng(GetRngSeed(),GetRngType());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> m_tree;<br/>
&nbsp;&nbsp;m_tree <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> Tree(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*m_rng,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetWidth(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetLength(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetMinSpeciationRate(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDispersalDistance(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetTolerance(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;GetDispersalKernel()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_log.clear();<br/>
<br/>
&nbsp;&nbsp;DisplayTree();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Tree::on_button_next_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!m_tree) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;m_tree-&gt;Update();<br/>
&nbsp;&nbsp;DisplayTree();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/result.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/result.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RESULT_H<br/>
<a href="CppDefine.htm">#define</a> RESULT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "dispersalkernel.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Result<br/>
{<br/>
&nbsp;&nbsp;Result(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppSurvey.htm">survey</a>_area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_<a href="CppSurvey.htm">survey</a>_area_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_speciation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dispersal_distance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel m_dispersal_kernel_type,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_species_richness<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetSpeciesRichness() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_species_richness; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_<a href="CppSurvey.htm">survey</a>_area_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_<a href="CppSurvey.htm">survey</a>_area_height;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_speciation_rate;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_dispersal_distance;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel m_dispersal_kernel_type;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_species_richness; <a href="CppComment.htm">//</a>The result<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Result&amp; result);<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RESULT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/result.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/result.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "result.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppOstreamH.htm">ostream</a>&gt;<br/>
<br/>
Result::Result(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppSurvey.htm">survey</a>_area_width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppSurvey.htm">survey</a>_area_height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> speciation_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> dispersal_distance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel dispersal_kernel_type,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> species_richness<br/>
) : m_<a href="CppSurvey.htm">survey</a>_area_width{<a href="CppSurvey.htm">survey</a>_area_width},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppSurvey.htm">survey</a>_area_height{<a href="CppSurvey.htm">survey</a>_area_height},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_speciation_rate{speciation_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dispersal_distance{dispersal_distance},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dispersal_kernel_type{dispersal_kernel_type},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_species_richness{species_richness}<br/>
<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os,<b><a href="CppConst.htm">const</a></b> Result&amp; result)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> result.m_<a href="CppSurvey.htm">survey</a>_area_width <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> result.m_<a href="CppSurvey.htm">survey</a>_area_height <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> result.m_speciation_rate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> result.m_dispersal_distance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ToStr(result.m_dispersal_kernel_type) <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> result.m_species_richness<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/rng.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/rng.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> RNG_H<br/>
<a href="CppDefine.htm">#define</a> RNG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "nrrand.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppRandomH.htm">random</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Rng<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be called before Rng <a href="CppConstructor.htm">construct</a>ion,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/due to Rosindell implementation calling <a href="CppStdSrand.htm">std::srand</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppEnumClass.htm">enum class</a></b> Type { rosindell, bilderbeek };<br/>
&nbsp;&nbsp;Rng(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed, <b><a href="CppConst.htm">const</a></b> Type type) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppReturn.htm">returns</a> an <a href="CppInt.htm">integer</a> between 0 and max<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetRandomInt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppReturn.htm">returns</a> normal deviates<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetRandomNormal() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_seed;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Type m_type;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>mt generates <a href="CppRandomNumber.htm">random numbers</a><br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> m_mt;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Rosindell implementation<br/>
&nbsp;&nbsp;NRrand m_nrrand;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> RNG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/rng.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/rng.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "rng.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
Rng::Rng(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed, <b><a href="CppConst.htm">const</a></b> Type type) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
&nbsp;&nbsp;: m_seed{seed},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_type{type},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mt(seed),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nrrand(seed)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be called before Rng <a href="CppConstructor.htm">construct</a>ion,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/due to Rosindell implementation calling <a href="CppStdSrand.htm">std::srand</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> Rng::GetRandomInt(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::rosindell: <b><a href="CppReturn.htm">return</a></b> m_nrrand.GetRandomInt(max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::bilderbeek:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdUniform_int_distribution.htm">std::uniform_int_distribution</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; d(0,max);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x{d(m_mt)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Rng::GetRandomInt"); <a href="CppComment.htm">//</a>Yes, the program will crash, due to <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Rng::GetRandomNormal() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (m_type)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::rosindell: <b><a href="CppReturn.htm">return</a></b> m_nrrand.GetRandomNormal();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> Type::bilderbeek:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean{0.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sigma{1.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdNormal_distribution.htm">std::normal_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; d(mean,sigma);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x{d(m_mt)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> x;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Rng::GetRandomNormal"); <a href="CppComment.htm">//</a>Yes, the program will crash, due to <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/rng_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/rng_test.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "rng.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Rng::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;Rng a(0,Type::rosindell);<br/>
&nbsp;&nbsp;Rng b(0,Type::bilderbeek);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetRandomInt<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Should have same minimum, maximum and mean<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> min{0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max{10};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n{1000};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(min <a href="CppOperatorPlus.htm">+</a> max) <a href="CppOperatorDivide.htm">/</a> 2.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.emplace_back(a.GetRandomInt(max));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.emplace_back(b.GetRandomInt(max));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum_a{<a href="CppStdAccumulate.htm">std::accumulate</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v),0)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sum_b{<a href="CppStdAccumulate.htm">std::accumulate</a>(<a href="CppStdBegin.htm">std::begin</a>(w),<a href="CppStdEnd.htm">std::end</a>(w),0)};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> min_a{*<a href="CppStdMin_element.htm">std::min_element</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v))};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> min_b{*<a href="CppStdMin_element.htm">std::min_element</a>(<a href="CppStdBegin.htm">std::begin</a>(w),<a href="CppStdEnd.htm">std::end</a>(w))};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max_a{*<a href="CppStdMax_element.htm">std::max_element</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v))};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> max_b{*<a href="CppStdMax_element.htm">std::max_element</a>(<a href="CppStdBegin.htm">std::begin</a>(w),<a href="CppStdEnd.htm">std::end</a>(w))};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean_a{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sum_a)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean_b{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sum_b)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(mean_a <a href="CppOperatorMinus.htm">-</a> mean) &lt; 0.11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(mean_b <a href="CppOperatorMinus.htm">-</a> mean) &lt; 0.11);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(min_a <a href="CppOperatorEqual.htm">==</a> min_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(max_a <a href="CppOperatorEqual.htm">==</a> max_b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetRandomNormal<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n{1000};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.emplace_back(a.GetRandomNormal());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.emplace_back(b.GetRandomNormal());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sum_a{<a href="CppStdAccumulate.htm">std::accumulate</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v),0.0)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> sum_b{<a href="CppStdAccumulate.htm">std::accumulate</a>(<a href="CppStdBegin.htm">std::begin</a>(w),<a href="CppStdEnd.htm">std::end</a>(w),0.0)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_68_a{ <a href="CppStdCount_if.htm">std::count_if</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v),[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) { <b><a href="CppReturn.htm">return</a></b> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0; })};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_68_b{ <a href="CppStdCount_if.htm">std::count_if</a>(<a href="CppStdBegin.htm">std::begin</a>(w),<a href="CppStdEnd.htm">std::end</a>(w),[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) { <b><a href="CppReturn.htm">return</a></b> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>1.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0; })};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_95_a{ <a href="CppStdCount_if.htm">std::count_if</a>(<a href="CppStdBegin.htm">std::begin</a>(v),<a href="CppStdEnd.htm">std::end</a>(v),[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) { <b><a href="CppReturn.htm">return</a></b> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>2.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x <a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0; })};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_95_b{ <a href="CppStdCount_if.htm">std::count_if</a>(<a href="CppStdBegin.htm">std::begin</a>(w),<a href="CppStdEnd.htm">std::end</a>(w),[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x) { <b><a href="CppReturn.htm">return</a></b> x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> <a href="CppOperatorMinus.htm">-</a>2.0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> x <a href="CppOperatorLessEqual.htm">&lt;=</a> 2.0; })};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean_a{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sum_a)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mean_b{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(sum_b)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f_68_a{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_68_a)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f_68_b{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_68_b)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f_95_a{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_95_a)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f_95_b{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_95_b)/<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mean_a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> mean_b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f_68_a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f_68_b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f_95_a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f_95_b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(mean_a <a href="CppOperatorMinus.htm">-</a> 0.0) &lt; 0.05);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(mean_b <a href="CppOperatorMinus.htm">-</a> 0.0) &lt; 0.05);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f_68_a <a href="CppOperatorMinus.htm">-</a> 0.68) &lt; 0.02);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f_68_b <a href="CppOperatorMinus.htm">-</a> 0.68) &lt; 0.02);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f_95_a <a href="CppOperatorMinus.htm">-</a> 0.95) &lt; 0.02);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f_95_b <a href="CppOperatorMinus.htm">-</a> 0.95) &lt; 0.02);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/simulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/simulation.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> SIMULATION_H<br/>
<a href="CppDefine.htm">#define</a> SIMULATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "rng.h"<br/>
<a href="CppInclude.htm">#include</a> "task.h"<br/>
<a href="CppInclude.htm">#include</a> "result.h"<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ReadSpeciationRatesFromFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; speciation_input_filename<br/>
);<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Simulation<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Maintain <a href="CppInterface.htm">interface</a> of original article<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/tasks_input_filename: the file that contains a list of simulations that are required<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/speciation_input_filename: a list of speciation rates we wish to simulate<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/result_output_filename: the file that will output the results of the simulations to<br/>
&nbsp;&nbsp;Simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rng::Type rng_type,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tasks_input_filename <a href="CppOperatorAssign.htm">=</a> "tasksfile.txt",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; speciation_input_filename <a href="CppOperatorAssign.htm">=</a> "speciationrates.txt",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; result_output_filename <a href="CppOperatorAssign.htm">=</a> "resultsfile.txt",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed <a href="CppOperatorAssign.htm">=</a> 4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;) : Simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ReadTasksFromFile(tasks_input_filename),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ReadSpeciationRatesFromFile(speciation_input_filename),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rng_type,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;result_output_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seed,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;verbose<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Cleaner <a href="CppInterface.htm">interface</a><br/>
&nbsp;&nbsp;Simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Task&gt;&amp; tasks,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; speciation_rates,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rng::Type rng_type <a href="CppOperatorAssign.htm">=</a> Rng::Type::rosindell,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; result_output_filename <a href="CppOperatorAssign.htm">=</a> "resultsfile.txt",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed <a href="CppOperatorAssign.htm">=</a> 4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;);<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Result&gt; GetResults() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_results; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Result&gt; m_results;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> m_verbose;<br/>
<br/>
};<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SIMULATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/simulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/simulation.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "task.h"<br/>
<a href="CppInclude.htm">#include</a> "tree.h"<br/>
<a href="CppInclude.htm">#include</a> "result.h"<br/>
<a href="CppInclude.htm">#include</a> "dispersalkernel.h"<br/>
<br/>
Simulation::Simulation(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Task&gt;&amp; tasks,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; speciation_rates,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rng::Type rng_type,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; result_output_filename,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> verbose<br/>
) : m_verbose{verbose}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Rng::Test();<br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;Rng rng(seed,rng_type);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> minimum_speciation_rate{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;*<a href="CppStdMin_element.htm">std::min_element</a>(<a href="CppStdBegin.htm">std::begin</a>(speciation_rates),<a href="CppStdEnd.htm">std::end</a>(speciation_rates))<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> out(result_output_filename);<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> Task&amp; task:tasks)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Tree tree(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rng,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_<a href="CppSurvey.htm">survey</a>_area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_<a href="CppSurvey.htm">survey</a>_area_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minimum_speciation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_dispersal_distance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_tolerance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_dispersal_kernel_type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; ;<a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorModulus.htm">%</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(task.m_<a href="CppSurvey.htm">survey</a>_area_width*task.m_<a href="CppSurvey.htm">survey</a>_area_length*250)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> 0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tree.IsDone()) { <b><a href="CppBreak.htm">break</a></b>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> speciation_rate:speciation_rates)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> richness{tree.GetRichness(speciation_rate)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Result result(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_<a href="CppSurvey.htm">survey</a>_area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_<a href="CppSurvey.htm">survey</a>_area_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speciation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_dispersal_distance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;task.m_dispersal_kernel_type,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;richness<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_results.push_back(result);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> result <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_verbose) { <a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> result <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ReadSpeciationRatesFromFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; speciation_input_filename<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(speciation_input_filename))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "speciation_input_filename '" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> speciation_input_filename <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "' not found" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdRuntime_error.htm">std::runtime_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; speciation_rates;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(speciation_input_filename);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(!f.eof())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> speciation_rate <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> speciation_rate;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;speciation_rates.push_back(speciation_rate);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!speciation_rates.empty()) { speciation_rates.pop_back(); }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> speciation_rates;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/simulation_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/simulation_test.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "tree.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Rng::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Tree::Test();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppBool.htm">bool</a></b> thorough{<b><a href="CppTrue.htm">true</a></b>};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,thorough ? 20.0 : 10.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test some known runs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; specset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specset.push_back(0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specset.push_back(0.01);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Task&gt; tasks;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(20,10,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,20,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,2,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::square,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::normal,0.01));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specset,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rng::Type::rosindell,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"resultsfile.txt", <a href="CppComment.htm">//</a>results_output_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4, <a href="CppComment.htm">//</a>seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTrue.htm">true</a></b> <a href="CppComment.htm">//</a>verbose<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Result&gt; results{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.GetResults()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(results.size() <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 0].GetSpeciesRichness()-34.0484) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 1].GetSpeciesRichness()-16.6893) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 2].GetSpeciesRichness()-71.3487) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 3].GetSpeciesRichness()-23.975 ) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 4].GetSpeciesRichness()-70.9428) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 5].GetSpeciesRichness()-23.4636) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 6].GetSpeciesRichness()-48.4659) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 7].GetSpeciesRichness()-23.7277) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 8].GetSpeciesRichness()-37.5131) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 9].GetSpeciesRichness()-12.9071) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[10].GetSpeciesRichness()-38.2425) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[11].GetSpeciesRichness()-14.5789) &lt; 0.0001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test some known runs from file<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (thorough)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> tasks_input_filename{"tmp_tasksfile.txt"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> speciation_input_filename{"tmp_speciationrates.txt"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> results_output_filename{"tmp_resultsfile.txt"};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; speciation_rates;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speciation_rates.push_back(0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speciation_rates.push_back(0.01);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(speciation_input_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<a href="CppStdBegin.htm">std::begin</a>(speciation_rates),<a href="CppStdEnd.htm">std::end</a>(speciation_rates),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(f," "));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(speciation_input_filename));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Task&gt; tasks;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(20,10,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,20,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,2,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::square,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::normal,0.01));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(tasks_input_filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<a href="CppStdBegin.htm">std::begin</a>(tasks),<a href="CppStdEnd.htm">std::end</a>(tasks),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;Task&gt;(f,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(tasks_input_filename));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rng::Type::rosindell,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks_input_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speciation_input_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results_output_filename,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTrue.htm">true</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Result&gt; results{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.GetResults()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(results.size() <a href="CppOperatorEqual.htm">==</a> 12);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 0].GetSpeciesRichness()-34.0484) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 1].GetSpeciesRichness()-16.6893) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 2].GetSpeciesRichness()-71.3487) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 3].GetSpeciesRichness()-23.975 ) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 4].GetSpeciesRichness()-70.9428) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 5].GetSpeciesRichness()-23.4636) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 6].GetSpeciesRichness()-48.4659) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 7].GetSpeciesRichness()-23.7277) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 8].GetSpeciesRichness()-37.5131) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[ 9].GetSpeciesRichness()-12.9071) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[10].GetSpeciesRichness()-38.2425) &lt; 0.0001);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(results[11].GetSpeciesRichness()-14.5789) &lt; 0.0001);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; specset;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specset.push_back(0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specset.push_back(0.01);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Task&gt; tasks;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(20,10,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,20,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,2,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::square,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::normal,0.01));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tasks,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specset,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rng::Type::bilderbeek,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"resultsfile.txt", <a href="CppComment.htm">//</a>results_output_filename<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4, <a href="CppComment.htm">//</a>seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTrue.htm">true</a></b> <a href="CppComment.htm">//</a>verbose<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Result&gt; results{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.GetResults()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/task.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/task.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> TASK_H<br/>
<a href="CppDefine.htm">#define</a> TASK_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "dispersalkernel.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Task<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/tolerance: <b><a href="CppIf.htm">if</a></b> tolerance equals 0.01, then result is correct to approximately 0.5%<br/>
&nbsp;&nbsp;Task(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppSurvey.htm">survey</a>_area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppSurvey.htm">survey</a>_area_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dispersal_distance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel dispersal_kernel_type,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppSurvey.htm">Survey</a>AreaWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppSurvey.htm">survey</a>_area_width; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> Get<a href="CppSurvey.htm">Survey</a>AreaLength() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppSurvey.htm">survey</a>_area_length; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDispersalDistance() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dispersal_distance; }<br/>
&nbsp;&nbsp;DispersalKernel GetDispersalKernelType() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dispersal_kernel_type; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetTolerance() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_tolerance; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_<a href="CppSurvey.htm">survey</a>_area_width;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_<a href="CppSurvey.htm">survey</a>_area_length;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_dispersal_distance;<br/>
&nbsp;&nbsp;DispersalKernel m_dispersal_kernel_type;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_tolerance;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;Task&gt; ReadTasksFromFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tasks_input_filename <a href="CppOperatorAssign.htm">=</a> "tasksfile.txt"<br/>
);<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Task&amp; task);<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; os, Task&amp; task);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Task&amp; lhs, <b><a href="CppConst.htm">const</a></b> Task&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Task&amp; lhs, <b><a href="CppConst.htm">const</a></b> Task&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TASK_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/task.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/task.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "task.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
Task::Task(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppSurvey.htm">survey</a>_area_width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppSurvey.htm">survey</a>_area_length,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dispersal_distance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel dispersal_kernel_type,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance<br/>
) : m_<a href="CppSurvey.htm">survey</a>_area_width{<a href="CppSurvey.htm">survey</a>_area_width},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppSurvey.htm">survey</a>_area_length{<a href="CppSurvey.htm">survey</a>_area_length},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dispersal_distance{dispersal_distance},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dispersal_kernel_type{dispersal_kernel_type},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tolerance{tolerance}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;Task&gt; ReadTasksFromFile(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; tasks_input_filename<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppIsRegularFile.htm">IsRegularFile</a>(tasks_input_filename)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Task&gt; tasks;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(tasks_input_filename);<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b>(!f.eof())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Task task(0,0,0,DispersalKernel::square,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> task;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.emplace_back(task);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!tasks.empty()) { tasks.pop_back(); }<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> tasks;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Task&amp; task)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> task.m_<a href="CppSurvey.htm">survey</a>_area_width <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> task.m_<a href="CppSurvey.htm">survey</a>_area_length <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> task.m_dispersal_distance <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> task.m_dispersal_kernel_type <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> task.m_tolerance<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Task&amp; task)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> area_width <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> area_height <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dispersal_distance <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;DispersalKernel dispersal_kernel_type <a href="CppOperatorAssign.htm">=</a> DispersalKernel::square;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> tolerance <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> area_width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> area_height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> dispersal_distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> dispersal_kernel_type<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> tolerance<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;task <a href="CppOperatorAssign.htm">=</a> Task(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;area_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersal_distance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersal_kernel_type,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tolerance<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Task&amp; lhs, <b><a href="CppConst.htm">const</a></b> Task&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetDispersalDistance()&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetDispersalDistance()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetDispersalKernelType() <a href="CppOperatorEqual.htm">==</a> rhs.GetDispersalKernelType()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.Get<a href="CppSurvey.htm">Survey</a>AreaLength()&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> rhs.Get<a href="CppSurvey.htm">Survey</a>AreaLength()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.Get<a href="CppSurvey.htm">Survey</a>AreaWidth()&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.Get<a href="CppSurvey.htm">Survey</a>AreaWidth()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetTolerance()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorEqual.htm">==</a> rhs.GetTolerance()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Task&amp; lhs, <b><a href="CppConst.htm">const</a></b> Task&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/task_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/task_test.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "task.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Task::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task1(12,23,34,DispersalKernel::square,0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task2(12,23,34,DispersalKernel::square,0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(task1 <a href="CppOperatorEqual.htm">==</a> task2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task1(12,23,34,DispersalKernel::square,0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task2( 0,23,34,DispersalKernel::square,0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task3(12, 0,34,DispersalKernel::square,0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task4(12,23, 0,DispersalKernel::square,0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task5(12,23,34,DispersalKernel::normal,0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task6(12,23,34,DispersalKernel::square,0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(task1 <a href="CppOperatorNotEqual.htm">!=</a> task2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(task1 <a href="CppOperatorNotEqual.htm">!=</a> task3);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(task1 <a href="CppOperatorNotEqual.htm">!=</a> task4);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(task1 <a href="CppOperatorNotEqual.htm">!=</a> task5);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(task1 <a href="CppOperatorNotEqual.htm">!=</a> task6);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>stream <a href="CppOperator.htm">operators</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Task task(12,23,34,DispersalKernel::square,0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> task;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Task task_too(0,0,0,DispersalKernel::square,0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> task_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(task <a href="CppOperatorEqual.htm">==</a> task_too);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ReadTasksFromFile<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Task&gt; tasks;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(20,10,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,20,1,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,2,DispersalKernel::normal,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::square,0.1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tasks.push_back(Task(10,10,1,DispersalKernel::normal,0.01));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<a href="CppStdBegin.htm">std::begin</a>(tasks),<a href="CppStdEnd.htm">std::end</a>(tasks),<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;Task&gt;(f,"\n"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Task&gt; tasks_too <a href="CppOperatorAssign.htm">=</a> ReadTasksFromFile(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(tasks_too <a href="CppOperatorEqual.htm">==</a> tasks);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/tree.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/tree.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> TREE_H<br/>
<a href="CppDefine.htm">#define</a> TREE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppArrayH.htm">array</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "nrrand.h"<br/>
<a href="CppInclude.htm">#include</a> "treenode.h"<br/>
<a href="CppInclude.htm">#include</a> "treedata<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "dispersalkernel.h"<br/>
<a href="CppInclude.htm">#include</a> "rng.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "grid.h"<br/>
<br/>
<a href="CppComment.htm">//</a> <b><a href="CppThis.htm">this</a></b> object represents the output coalescence tree itself<br/>
<a href="CppComment.htm">//</a> and has all the useful <a href="CppFunction.htm">function</a>s <a href="CppOperatorMinus.htm">-</a> everything above <b><a href="CppThis.htm">this</a></b> <a href="CppPointer.htm">point</a> is just a <a href="Tools.htm">tool</a><br/>
<a href="CppComment.htm">//</a> that is required <b><a href="CppFor.htm">for</a></b> <b><a href="CppThis.htm">this</a></b> object<br/>
<a href="CppComment.htm">//</a> the end user should initialise one <a href="CppInstance.htm">instance</a> of "tree" and<br/>
<a href="CppComment.htm">//</a> use that object to <b><a href="CppDo.htm">do</a></b> all their calculations<br/>
<b><a href="CppStruct.htm">struct</a></b> Tree<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> GridType <a href="CppOperatorAssign.htm">=</a> TreeData<a href="CppPoint.htm">Point</a>*;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Grid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;GridType<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> TreeNodes <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;TreeNode&gt;;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> area_width <a href="CppOperatorAssign.htm">=</a> width of <a href="CppSurvey.htm">survey</a> area (in number of trees)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> area_length <a href="CppOperatorAssign.htm">=</a> length of <a href="CppSurvey.htm">survey</a> area (in number of trees)<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> min_speciation_rate <a href="CppOperatorAssign.htm">=</a> smallest speciation rate required<br/>
&nbsp;&nbsp;Tree(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Rng&amp; rng,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_speciation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dispersal_distance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel dispersal_kernel<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DisplayActive(<a href="CppStdOstream.htm">std::ostream</a>&amp; os) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;&amp; GetActive() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_active; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetError() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppThis.htm">this</a></b> <a href="CppReturn.htm">returns</a> the mid<a href="CppPointer.htm">point</a> between the maximum and minimum richness estimates<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetRichness(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> speciation_rate);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsDone() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Update();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> Store the coalescence tree itself<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> there can only be a maximum of twice as many nodes as there are<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> initially free branches so we can set the size of our data object<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt; m_active;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_area_width;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_area_length;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_dispersal_distance;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel m_dispersal_kernel;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> grid <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b> is an internal variable<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> <b><a href="CppThis.htm">this</a></b> is necessary <b><a href="CppFor.htm">for</a></b> calculations <a href="CppOperatorMinus.htm">-</a> initialise it as all zeros<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> it will store <a href="CppInt.htm">integer</a>s that refer to places in data<a href="CppPointer.htm">point</a> <a href="CppArray.htm">array</a> "active"<br/>
&nbsp;&nbsp;Grid m_grid;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> when producing a coalescence tree, we <b><a href="CppDo.htm">do</a></b> so with a minimal speciation rate<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> in mind (to save a lot of computational expense in growing the full tree)<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_min_speciation_rate;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The coalescence tree<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeNode&gt; m_nodes;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Species richness<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_richness;<br/>
<br/>
&nbsp;&nbsp;Rng&amp; m_rnd;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_tolerance;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt; CreateActive(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TreeNodes&amp; nodes<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Grid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateGrid(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;&amp; data<a href="CppPointer.htm">point</a>s<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Where will the next position be?<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; GetMove(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel kernel,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Rng&amp; rng,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dispersal<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Interval within which the <b><a href="CppTrue.htm">true</a></b> mean richness must lie<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppDouble.htm">double</a></b>,2&gt; GetRichnessInterval(<b><a href="CppDouble.htm">double</a></b> spec);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_gridsize <a href="CppOperatorAssign.htm">=</a> 4000;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppClass.htm">class</a></b> TreeData<a href="CppPoint.htm">Point</a>;<br/>
};<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TREE_H<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt; GetRelevantActive(<b><a href="CppConst.htm">const</a></b> Tree&amp; tree) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/tree.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/tree.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "tree.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "grid.h"<br/>
<a href="CppInclude.htm">#include</a> "treedata<a href="CppPointer.htm">point</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "treenode.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> IsValid(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index, <b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; <a href="CppContainer.htm">container</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppContainer.htm">container</a>.size());<br/>
}<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<b><a href="CppBool.htm">bool</a></b> IsValid(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index1, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index2, <b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; <a href="CppContainer.htm">container</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!IsValid(index1,<a href="CppContainer.htm">container</a>)) <b><a href="CppReturn.htm">return</a></b> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!<a href="CppContainer.htm">container</a>.empty());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> IsValid(index2,<a href="CppContainer.htm">container</a>[0]);<br/>
}<br/>
<br/>
Tree::Tree(<br/>
&nbsp;&nbsp;Rng&amp; rng,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_length,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_speciation_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dispersal_distance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel dispersal_kernel<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_active{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_area_width{area_width},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_area_length{area_length},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dispersal_distance{dispersal_distance},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dispersal_kernel{dispersal_kernel},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_grid{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_min_speciation_rate{min_speciation_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_nodes{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_richness{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rnd{rng},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_tolerance{tolerance}<br/>
{<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_dispersal_distance <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Tree::Tree: dispersal distance must be non-zero");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_dispersal_distance &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Tree::Tree: dispersal distance must be positive");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Reserving m_nodes is important: due to <a href="CppPointer.htm">pointer</a>,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>we must prevent a copy of the nodes<br/>
&nbsp;&nbsp;m_nodes.reserve(2*area_width*area_length+1); <a href="CppComment.htm">//</a>These are reserved<br/>
&nbsp;&nbsp;m_nodes.resize(area_width*area_length+1); <a href="CppComment.htm">//</a>These are used<br/>
&nbsp;&nbsp;m_active <a href="CppOperatorAssign.htm">=</a> CreateActive(area_width,area_length,m_nodes);<br/>
&nbsp;&nbsp;m_grid <a href="CppOperatorAssign.htm">=</a> CreateGrid(area_width,area_length,m_active);<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt; Tree::CreateActive(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_length,<br/>
&nbsp;&nbsp;TreeNodes&amp; nodes<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt; v;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(area_width &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(area_length &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Index 0 is systematically avoided, unknown why<br/>
&nbsp;&nbsp;v.push_back(TreeData<a href="CppPoint.htm">Point</a>(0,0,0));<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>area_width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>area_length; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(TreeData<a href="CppPoint.htm">Point</a>(x,y,&amp;nodes[i]));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
Tree::Grid<br/>
&nbsp;&nbsp;Tree::CreateGrid(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;&amp; data<a href="CppPointer.htm">point</a>s<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(width &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(height &gt; 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!data<a href="CppPointer.htm">point</a>s.empty());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> grid_size<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> sm_gridsize &lt; width*2 ? width*2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: (sm_gridsize &lt; height*2 ? height*2 : sm_gridsize)<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(grid_size &gt; 0);<br/>
<br/>
&nbsp;&nbsp;Grid v(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;GridType&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNullptr.htm">nullptr</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(data<a href="CppPointer.htm">point</a>s.size())};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Skip 0, 0 denotes 'no-one here'<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; p{data<a href="CppPointer.htm">point</a>s[i]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v[p.GetXpos()][p.GetYpos()]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> &amp;data<a href="CppPointer.htm">point</a>s[i];<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Tree::DisplayActive(<a href="CppStdOstream.htm">std::ostream</a>&amp; os) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> seperator{" | "};<br/>
&nbsp;&nbsp;<a href="CppStdOstringstream.htm">std::ostringstream</a> s;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(m_active) <a href="CppOperatorPlus.htm">+</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(m_active),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;(s,seperator.c_str())<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> text{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.str().substr(0,s.str().size() <a href="CppOperatorMinus.htm">-</a> seperator.size())<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> text;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Tree::GetError() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_active.size()) };<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> error <a href="CppOperatorAssign.htm">=</a> 0.0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 1; i <a href="CppOperatorNotEqual.htm">!=</a> sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> "Skip zero");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid(i,m_active));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;error <a href="CppOperatorPlusAssign.htm">+=</a> m_active[i].GetProbability();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error;<br/>
}<br/>
<br/>
<a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; Tree::GetMove(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel dispersal_kernel,<br/>
&nbsp;&nbsp;Rng&amp; rnd,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dispersal<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dispersal &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (dispersal_kernel <a href="CppOperatorEqual.htm">==</a> DispersalKernel::normal)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFloor.htm">std::floor</a>((rnd.GetRandomNormal()*dispersal)+0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdFloor.htm">std::floor</a>((rnd.GetRandomNormal()*dispersal)+0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> y <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x{rnd.GetRandomInt(dispersal*2)-dispersal};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y{rnd.GetRandomInt(dispersal*2)-dispersal};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x <a href="CppOperatorNotEqual.htm">!=</a> 0 <a href="CppOperatorLogicalOr.htm">||</a> y <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_pair.htm">std::make_pair</a>(x,y);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> Tree::GetRichness(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> speciation_rate)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; v <a href="CppOperatorAssign.htm">=</a> GetRichnessInterval(speciation_rate);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> (v[0]+v[1])/2.0;<br/>
}<br/>
<br/>
<a href="CppComment.htm">//</a> <b><a href="CppThis.htm">this</a></b> <a href="CppReturn.htm">returns</a> an interval within which the <b><a href="CppTrue.htm">true</a></b> mean ricness must lie<br/>
<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppDouble.htm">double</a></b>,2&gt; Tree::GetRichnessInterval(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> speciation_rate)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> check that the tree was calculated <b><a href="CppFor.htm">for</a></b> a small enough speciation rate<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> it is possible to <b><a href="CppOverride.htm">override</a></b> <b><a href="CppThis.htm">this</a></b> check by commenting out <b><a href="CppIf.htm">if</a></b> required<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_min_speciation_rate &gt; speciation_rate)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Tree::GetRichnessInterval: could not calculate result");<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdArray.htm">std::array</a>&lt;<b><a href="CppDouble.htm">double</a></b>,2&gt; result <a href="CppOperatorAssign.htm">=</a> {0.0,0.0};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (TreeNode&amp; node: m_nodes)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;1.0: free branch, because it is certain that the lineages have not en<a href="CppCounter.htm">counter</a>ed speciaiton<a href="CppComment.htm">//</a> when they are at the very end and no pruning has so far taken place<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>2.0: an internal node that has thus far not been pruned at all<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(node.GetProbability() <a href="CppOperatorEqual.htm">==</a> (node.GetRoot() ? 1.0 : <a href="CppOperatorMinus.htm">-</a>2.0)); <a href="CppComment.htm">//</a>FAILS, because <b><a href="CppThis.htm">this</a></b> calculation repeats itself<br/>
&nbsp;&nbsp;&nbsp;&nbsp;node.SetProbability(node.IsRootNode() ? 1.0 : <a href="CppOperatorMinus.htm">-</a>2.0);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_nodes.size())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> loop <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>check to see <b><a href="CppIf.htm">if</a></b> that part of the <a href="CppArray.htm">array</a> is <b><a href="CppCompl.htm">compl</a></b>ete<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid(i,m_nodes));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TreeNode&amp; node{m_nodes[i]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (node.GetProbability() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> it is <b><a href="CppCompl.htm">compl</a></b>ete so use it to <b><a href="CppCompl.htm">compl</a></b>ete the info on in its parents<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> parent{node.GetParent()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(IsValid(theparent,ps));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (parent <a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> parent-&gt;GetProbability() &lt; 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> only <b><a href="CppDo.htm">do</a></b> <a href="CppAny.htm">any</a>thing <b><a href="CppIf.htm">if</a></b> the parents have not already been <b><a href="CppCompl.htm">compl</a></b>eted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> be sure to go round again <b><a href="CppIf.htm">if</a></b> the parents have not been <b><a href="CppCompl.htm">compl</a></b>eted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (parent-&gt;GetProbability() <a href="CppOperatorLessEqual.htm">&lt;=</a> <a href="CppOperatorMinus.htm">-</a>1.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> parent not at all <b><a href="CppCompl.htm">compl</a></b>ete<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> probability{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdPow.htm">std::pow</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0-speciation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.GetBranchLength()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[0] <a href="CppOperatorPlusAssign.htm">+=</a> node.GetProbability()*(1.0-probability);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> we store probabilities as negative in a node <b><a href="CppIf.htm">if</a></b> they<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> refer only to one of the two branches of the node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> we then wait until we have both branches of the node<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> before continuing to <b><a href="CppCompl.htm">compl</a></b>ete the full calculation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent-&gt;SetProbability(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>1.0 * node.GetProbability() * probability<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parent partially <b><a href="CppCompl.htm">compl</a></b>ete<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> probability_1{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdPow.htm">std::pow</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0-speciation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.GetBranchLength()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[0] <a href="CppOperatorPlusAssign.htm">+=</a> node.GetProbability()*(1.0-probability_1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;probability_1 <a href="CppOperatorMultiplyAssign.htm">*=</a> node.GetProbability();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> probability_2 <a href="CppOperatorAssign.htm">=</a> parent-&gt;GetProbability()*-1.0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent-&gt;SetProbability(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; probability_1 <a href="CppOperatorPlus.htm">+</a> probability_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a> probability_1 * probability_2<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> be sure to repeat the loop unless all calculations are fully compelted<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (loop <a href="CppOperatorEqual.htm">==</a> <b><a href="CppFalse.htm">false</a></b>) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_nodes.size())};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 1; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a> here we are dealing with all the last branches after prooning all nodes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid(i,m_nodes));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TreeNode&amp; node{m_nodes[i]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (node.GetParent() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppNullptr.htm">nullptr</a></b>)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> branch_length{node.GetBranchLength()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[0] <a href="CppOperatorPlusAssign.htm">+=</a> node.GetProbability() * (1.0 <a href="CppOperatorMinus.htm">-</a> <a href="CppStdPow.htm">std::pow</a>(1.0 <a href="CppOperatorMinus.htm">-</a> speciation_rate,branch_length) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[1] <a href="CppOperatorPlusAssign.htm">+=</a> node.GetProbability() * (&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdPow.htm">std::pow</a>(1.0 <a href="CppOperatorMinus.htm">-</a> speciation_rate,branch_length) );<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;result[1] <a href="CppOperatorPlusAssign.htm">+=</a> result[0];<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> Tree::IsDone() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> error{GetError()};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> error &lt; m_richness * m_tolerance;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Tree::Update()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>NOTE: chosen_index cannot be 0, because 0 denotes 'no-one here' in the grid<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> chosen_index{1 <a href="CppOperatorPlus.htm">+</a> m_rnd.GetRandomInt(m_active.size() <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorMinus.htm">-</a> 1)};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid(chosen_index,m_active));<br/>
&nbsp;&nbsp;TreeData<a href="CppPoint.htm">Point</a>&amp; chosen <a href="CppOperatorAssign.htm">=</a> m_active[chosen_index];<br/>
<br/>
&nbsp;&nbsp; <a href="CppComment.htm">//</a>Remove active indidual from old spot<br/>
&nbsp;&nbsp; {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> chosen.GetXpos();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> chosen.GetYpos();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_grid[x][y] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>?<br/>
&nbsp;&nbsp;m_richness <a href="CppOperatorPlusAssign.htm">+=</a> m_min_speciation_rate*(chosen.GetProbability());<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do the move, also tracks that the lineage did not speciate<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdPair.htm">std::pair</a>&lt;<b><a href="CppInt.htm">int</a></b>,<b><a href="CppInt.htm">int</a></b>&gt; move{GetMove(m_dispersal_kernel,m_rnd,m_dispersal_distance)};<br/>
&nbsp;&nbsp;chosen.Move(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;move.first,move.second,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_min_speciation_rate<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>?<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(IsValid(chosen.GetMpos(),m_nodes));<br/>
&nbsp;&nbsp;chosen.GetNode()-&gt;<a href="CppIncrease.htm">Increase</a>BranchLength();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to_x <a href="CppOperatorAssign.htm">=</a> chosen.GetXpos();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> to_y <a href="CppOperatorAssign.htm">=</a> chosen.GetYpos();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid(to_x,to_y,m_grid));<br/>
<br/>
&nbsp;&nbsp;GridType&amp; grid_spot_to{m_grid[to_x][to_y]};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If there an individual at the dispersed-to spot?<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (grid_spot_to <a href="CppOperatorEqual.htm">==</a> <b><a href="CppNullptr.htm">nullptr</a></b>)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Just move the individual<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid_spot_to <a href="CppOperatorAssign.htm">=</a> &amp;chosen;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Nope, <b><a href="CppThis.htm">this</a></b> <a href="CppTime.htm">time</a>step is done<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Remove active indidual from old spot<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_grid[from_x][from_y] <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>There is an individual at the dispersed-to-spot<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let these two coalesce<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create a <b><a href="CppNew.htm">new</a></b> node to celebrate <b><a href="CppThis.htm">this</a></b> event<br/>
<br/>
&nbsp;&nbsp;m_nodes.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TreeNode(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen.GetNode(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid_spot_to-&gt;GetNode()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> new_node{&amp;m_nodes.back()};<br/>
<br/>
&nbsp;&nbsp;chosen.GetNode()-&gt;SetParent(new_node);<br/>
&nbsp;&nbsp;grid_spot_to-&gt;GetNode()-&gt;SetParent(new_node);<br/>
&nbsp;&nbsp;grid_spot_to-&gt;SetNode(new_node);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> probability{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;chosen.GetProbability()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> grid_spot_to-&gt;GetProbability()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* (1.0-chosen.GetProbability())<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;grid_spot_to-&gt;SetProbability(probability);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Overwrite chosen by last<br/>
&nbsp;&nbsp;TreeData<a href="CppPoint.htm">Point</a>&amp; last <a href="CppOperatorAssign.htm">=</a> m_active.back();<br/>
&nbsp;&nbsp;chosen <a href="CppOperatorAssign.htm">=</a> last;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> last_x <a href="CppOperatorAssign.htm">=</a> last.GetXpos();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> last_y <a href="CppOperatorAssign.htm">=</a> last.GetYpos();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(IsValid(last_x,last_y,m_grid));<br/>
&nbsp;&nbsp;GridType&amp; last_active_spot <a href="CppOperatorAssign.htm">=</a> m_grid[last_x][last_y];<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (last_active_spot <a href="CppOperatorEqual.htm">==</a> &amp;last)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;last_active_spot <a href="CppOperatorAssign.htm">=</a> &amp;chosen;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_active.pop_back();<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt; GetRelevantActive(<b><a href="CppConst.htm">const</a></b> Tree&amp; tree) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt; v(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(tree.GetActive()) <a href="CppOperatorPlus.htm">+</a> 1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(tree.GetActive())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/tree_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/tree_test.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "tree.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Tree::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Rng::Test();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,2.0);<br/>
&nbsp;&nbsp;Rng rng(0,Rng::Type::bilderbeek);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_width{4};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> area_length{1};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_speciation_rate{0.0};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dispersal_distance{1};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> tolerance{0.1};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DispersalKernel dispersal_kernel{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;DispersalKernel::square<br/>
&nbsp;&nbsp;};<br/>
<br/>
&nbsp;&nbsp;Tree tree(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;rng,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;area_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;area_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;min_speciation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersal_distance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tolerance,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dispersal_kernel<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!tree.IsDone());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt; active_now{tree.GetActive()};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>20; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;tree.Update();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;TreeData<a href="CppPoint.htm">Point</a>&gt;&amp; active_new{tree.GetActive()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (active_now <a href="CppOperatorNotEqual.htm">!=</a> active_new)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;active_now <a href="CppOperatorAssign.htm">=</a> active_new;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.DisplayActive(<a href="CppStdCout.htm">std::cout</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (tree.IsDone()) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/treedatapoint.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/treedatapoint.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> TREEDATAPOINT_H<br/>
<a href="CppDefine.htm">#define</a> TREEDATAPOINT_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> TreeNode;<br/>
<br/>
/<a href="CppComment.htm">//</a> Tracks a lineage in probability and space<br/>
/<a href="CppComment.htm">//</a> Probability: how likely is <b><a href="CppThis.htm">this</a></b> lineage to exist?<br/>
/<a href="CppComment.htm">//</a> Space: the lineage goes through individuals in a two-dimensional space<br/>
<br/>
/<a href="CppComment.htm">//</a> A Lineage allows <b><a href="CppFor.htm">for</a></b> a high number of positions,<br/>
/<a href="CppComment.htm">//</a> by supply a position within a tile<br/>
/<a href="CppComment.htm">//</a> and a tile index<br/>
<br/>
/<a href="CppComment.htm">//</a> For example, the spot marked X may have:<br/>
/<a href="CppComment.htm">//</a> PosX <a href="CppOperatorEqual.htm">==</a> 2, PosY <a href="CppOperatorEqual.htm">==</a> 1<br/>
/<a href="CppComment.htm">//</a> TileX <a href="CppOperatorEqual.htm">==</a> 42, TileY <a href="CppOperatorEqual.htm">==</a> 23<br/>
<a href="CppComment.htm">///</a><br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>+---<a href="CppOperatorDecrement.htm">--</a>+-<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;|&nbsp;&nbsp;X&nbsp;&nbsp;|<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
/<a href="CppComment.htm">//</a> <a href="CppOperatorMinus.htm">-</a>+---<a href="CppOperatorDecrement.htm">--</a>+-<br/>
/<a href="CppComment.htm">//</a>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
<b><a href="CppStruct.htm">struct</a></b> TreeData<a href="CppPoint.htm">Point</a><br/>
{<br/>
<br/>
<br/>
&nbsp;&nbsp;TreeData<a href="CppPoint.htm">Point</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x <a href="CppOperatorAssign.htm">=</a> 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y <a href="CppOperatorAssign.htm">=</a> 0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TreeNode * node <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b><br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;TreeData<a href="CppPoint.htm">Point</a>(<b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp;);<br/>
&nbsp;&nbsp;TreeData<a href="CppPoint.htm">Point</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetAbs.htm">GetAbs</a>oluteXpos() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> <a href="CppGetAbs.htm">GetAbs</a>oluteYpos() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetXpos() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_xpos; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetYpos() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_ypos; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetTileX() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_xindex; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetTileY() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_yindex; }<br/>
&nbsp;&nbsp;TreeNode *&nbsp;&nbsp;GetNode() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_node; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetProbability() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_probability; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetIndex(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_xindex <a href="CppOperatorAssign.htm">=</a> x; m_yindex <a href="CppOperatorAssign.htm">=</a> y; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetNode(TreeNode * <b><a href="CppConst.htm">const</a></b> node) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_node <a href="CppOperatorAssign.htm">=</a> node; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPos(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> xpos, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> ypos) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_xpos <a href="CppOperatorAssign.htm">=</a> xpos; m_ypos <a href="CppOperatorAssign.htm">=</a> ypos; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetProbability(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> probability) { m_probability <a href="CppOperatorAssign.htm">=</a> probability; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Move the data <a href="CppPointer.htm">point</a> and update its probability<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Move(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dx, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy, <b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p);<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_xpos;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_ypos;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Number of horizontal wraps around the torus<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_xindex;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Number of vertical wraps around the torus<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_yindex;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Output of <b><a href="CppThis.htm">this</a></b> lineage<br/>
&nbsp;&nbsp;TreeNode * m_node;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> the probability of not having speciated yet<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <b><a href="CppThis.htm">this</a></b> is to allow the coalescence tree calculation to be stopped<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> prematurely <a href="CppOperatorMinus.htm">-</a> saving many calculations with minimal loss in accuracy<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_probability;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sm_gridsize <a href="CppOperatorAssign.htm">=</a> 4000;<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; <a href="CppPointer.htm">point</a>) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TREEDATAPOINT_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/treedatapoint.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/treedatapoint.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "treedata<a href="CppPointer.htm">point</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppOstreamH.htm">ostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "tree.h"<br/>
<br/>
TreeData<a href="CppPoint.htm">Point</a>::TreeData<a href="CppPoint.htm">Point</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y,<br/>
&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> node<br/>
)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;m_xpos{x},<br/>
&nbsp;&nbsp;m_ypos{y},<br/>
&nbsp;&nbsp;m_xindex{0},<br/>
&nbsp;&nbsp;m_yindex{0},<br/>
&nbsp;&nbsp;m_node{node},<br/>
&nbsp;&nbsp;m_probability{1.0}<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(TreeData<a href="CppPoint.htm">Point</a>::sm_gridsize <a href="CppOperatorEqual.htm">==</a> Tree::sm_gridsize,"");<br/>
}<br/>
<br/>
TreeData<a href="CppPoint.htm">Point</a>::TreeData<a href="CppPoint.htm">Point</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; other<br/>
)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;m_xpos{other.GetXpos()},<br/>
&nbsp;&nbsp;m_ypos{other.GetYpos()},<br/>
&nbsp;&nbsp;m_xindex{other.GetTileX()},<br/>
&nbsp;&nbsp;m_yindex{other.GetTileY()},<br/>
&nbsp;&nbsp;m_node{other.GetNode()},<br/>
&nbsp;&nbsp;m_probability{other.GetProbability()}<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppStatic_assert.htm">static_assert</a></b>(TreeData<a href="CppPoint.htm">Point</a>::sm_gridsize <a href="CppOperatorEqual.htm">==</a> Tree::sm_gridsize,"");<br/>
}<br/>
<br/>
TreeData<a href="CppPoint.htm">Point</a>&amp; TreeData<a href="CppPoint.htm">Point</a>::<b><a href="CppOperator.htm">operator</a></b>=(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; other<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_xpos <a href="CppOperatorAssign.htm">=</a> other.GetXpos();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_ypos <a href="CppOperatorAssign.htm">=</a> other.GetYpos();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_xindex <a href="CppOperatorAssign.htm">=</a> other.GetTileX();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_yindex <a href="CppOperatorAssign.htm">=</a> other.GetTileY();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_node <a href="CppOperatorAssign.htm">=</a> other.GetNode();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_probability <a href="CppOperatorAssign.htm">=</a> other.GetProbability();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> *<b><a href="CppThis.htm">this</a></b>;<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> TreeData<a href="CppPoint.htm">Point</a>::<a href="CppGetAbs.htm">GetAbs</a>oluteXpos() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetXpos() <a href="CppOperatorPlus.htm">+</a> (GetTileX() * sm_gridsize);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> TreeData<a href="CppPoint.htm">Point</a>::<a href="CppGetAbs.htm">GetAbs</a>oluteYpos() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetYpos() <a href="CppOperatorPlus.htm">+</a> (GetTileY() * sm_gridsize);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> TreeData<a href="CppPoint.htm">Point</a>::Move(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dx,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dy,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> newxpos <a href="CppOperatorAssign.htm">=</a> m_xpos <a href="CppOperatorPlus.htm">+</a> dx;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> newypos <a href="CppOperatorAssign.htm">=</a> m_ypos <a href="CppOperatorPlus.htm">+</a> dy;<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (newxpos &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newxpos <a href="CppOperatorPlusAssign.htm">+=</a> sm_gridsize;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>m_xindex;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (newxpos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> sm_gridsize)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newxpos <a href="CppOperatorMinusAssign.htm">-=</a> sm_gridsize;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_xindex;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (newypos &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newypos <a href="CppOperatorPlusAssign.htm">+=</a> sm_gridsize;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a>m_yindex;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (newypos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> sm_gridsize)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;newypos <a href="CppOperatorMinusAssign.htm">-=</a> sm_gridsize;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_yindex;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_xpos <a href="CppOperatorAssign.htm">=</a> newxpos;<br/>
&nbsp;&nbsp;m_ypos <a href="CppOperatorAssign.htm">=</a> newypos;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>1.0-p : chance not to speciate<br/>
&nbsp;&nbsp;m_probability <a href="CppOperatorAssign.htm">=</a> m_probability*(1.0-p);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_xpos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_xpos &lt; sm_gridsize);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ypos <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_ypos &lt; sm_gridsize);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_probability <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_probability <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; lhs, <b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetXpos() <a href="CppOperatorEqual.htm">==</a> rhs.GetXpos()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetYpos() <a href="CppOperatorEqual.htm">==</a> rhs.GetYpos()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetTileX() <a href="CppOperatorEqual.htm">==</a> rhs.GetTileX()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetTileY() <a href="CppOperatorEqual.htm">==</a> rhs.GetTileY()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetNode() <a href="CppOperatorEqual.htm">==</a> rhs.GetNode()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetProbability() <a href="CppOperatorEqual.htm">==</a> rhs.GetProbability()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TreeData<a href="CppPoint.htm">Point</a>&amp; <a href="CppPointer.htm">point</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppPointer.htm">point</a>.GetXpos() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppPointer.htm">point</a>.GetYpos() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppPointer.htm">point</a>.GetTileX() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppPointer.htm">point</a>.GetTileY() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppPointer.htm">point</a>.GetNode() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppPointer.htm">point</a>.GetProbability()<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/treenode.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/treenode.h" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppIfndef.htm">#ifndef</a> TREENODE_H<br/>
<a href="CppDefine.htm">#define</a> TREENODE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<br/>
<a href="CppComment.htm">///</a>Nodes in a tree<br/>
<b><a href="CppStruct.htm">struct</a></b> TreeNode<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Parent <a href="CppOperatorAssign.htm">=</a> TreeNode*;<br/>
<br/>
&nbsp;&nbsp;TreeNode(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> kid_left <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b>,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> kid_right <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNullptr.htm">nullptr</a></b><br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetBranchLength() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(m_branch_length);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;Parent GetParent() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_parent; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetProbability() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_p; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Does <b><a href="CppThis.htm">this</a></b> node connect to the present,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/or is it created at a coalescent event?<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> IsRootNode() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_kid_left <a href="CppOperatorEqual.htm">==</a> <b><a href="CppNullptr.htm">nullptr</a></b>; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppIncrease.htm">Increase</a>BranchLength() <b><a href="CppNoexcept.htm">noexcept</a></b> { <a href="CppOperatorIncrement.htm">++</a>m_branch_length; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParent(<b><a href="CppConst.htm">const</a></b> Parent parent) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_parent <a href="CppOperatorAssign.htm">=</a> parent; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetProbability(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p) <b><a href="CppNoexcept.htm">noexcept</a></b> { m_p <a href="CppOperatorAssign.htm">=</a> p; }<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Node connect to the present have no kids,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Nodes created at a coalescent event have two kids:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/the lineages that coalesced<br/>
&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> m_kid_left;<br/>
&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> m_kid_right;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The parent of <b><a href="CppThis.htm">this</a></b> Node<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/If m_parent <a href="CppOperatorEqual.htm">==</a> <b><a href="CppNullptr.htm">nullptr</a></b>, <b><a href="CppThis.htm">this</a></b> Node has no Parent, i.e. it is a the root of the tree<br/>
&nbsp;&nbsp;Parent m_parent;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppComment.htm">//</a>The number of generations<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppComment.htm">//</a>between <b><a href="CppThis.htm">this</a></b> individual and its parent in the tree<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_branch_length;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Probability<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;1.0: free branch, because it is certain that the lineages have not en<a href="CppCounter.htm">counter</a>ed speciaiton<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when they are at the very end and no pruning has so far taken place<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> <a href="CppOperatorMinus.htm">-</a>2.0: an internal node that has thus far not been pruned at all<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> m_p;<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> TreeNode&amp; lhs, <b><a href="CppConst.htm">const</a></b> TreeNode&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> TreeNode&amp; lhs, <b><a href="CppConst.htm">const</a></b> TreeNode&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TreeNode&amp; node);<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> TREENODE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolRosindellEtAl2008/treenode.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolRosindellEtAl2008/treenode.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
RosindellEtAl2008, refactoring an extension of Rosindel at al., 2008 [1]<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
Original <a href="CppVersion.htm">version</a> by James Rosindell<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>RosindellEtAl2008.htm<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>Article with original code:<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a> [1] Rosindell, James, Yan Wong, and Rampal S. Etienne.<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp; "A coalescence approach to spatial neutral ecology."<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecological Informatics 3.3 (2008): 259-271.<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppInclude.htm">#include</a> "treenode.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
TreeNode::TreeNode(<br/>
&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> kid_left,<br/>
&nbsp;&nbsp;TreeNode * <b><a href="CppConst.htm">const</a></b> kid_right<br/>
)<br/>
&nbsp;&nbsp;: <a href="CppComment.htm">//</a>m_root{root},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kid_left{kid_left},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_kid_right{kid_right},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parent{<b><a href="CppNullptr.htm">nullptr</a></b>},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_branch_length{0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_p{0.0}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> TreeNode&amp; lhs, <b><a href="CppConst.htm">const</a></b> TreeNode&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetParent()&nbsp;&nbsp;<a href="CppOperatorEqual.htm">==</a> rhs.GetParent()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.IsRootNode() <a href="CppOperatorEqual.htm">==</a> rhs.IsRootNode()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetBranchLength() <a href="CppOperatorEqual.htm">==</a> rhs.GetBranchLength()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> TreeNode&amp; lhs, <b><a href="CppConst.htm">const</a></b> TreeNode&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> TreeNode&amp; node)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> node.IsRootNode() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> node.GetParent() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> node.GetBranchLength()<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
