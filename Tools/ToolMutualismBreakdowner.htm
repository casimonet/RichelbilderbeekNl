<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MutualismBreakdowner</title>
  <meta name="description" content="C++ MutualismBreakdowner"/>
  <meta name="keywords" content="C++ MutualismBreakdowner "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolMutualismBreakdowner.htm">MutualismBreakdowner</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ToolMutualismBreakdowner-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
<br/>
#Specific, console<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppUnits/CppUnits.pri)<br/>
include(ToolMutualismBreakdownerConsole.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolMutualismBreakdowner/ToolMutualismBreakdownerDesktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/ToolMutualismBreakdownerDesktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>NoWeffcpp.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralDesktop.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppQwt.htm">Qwt</a>.pri)<br/>
<br/>
#Specific, console<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppUnits/CppUnits.pri)<br/>
include(ToolMutualismBreakdownerDesktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += ../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/simulation.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/simulation_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/parameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/parameters_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/mutualismbreakdownermenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/poisoningfunction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/loripesconsumptionfunction.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/simulation.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/parameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/mutualismbreakdownermenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/poisoningfunction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/loripesconsumptionfunction.h<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/ToolMutualismBreakdowner.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/ToolMutualismBreakdownerDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/ToolMutualismBreakdownerDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownerparameters<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtloripesconsumptionfunction<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtmutualismbreakdownertestconsumptionfunctiondialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtmutualismbreakdownerparameters<a href="CppWidget.htm">widget</a>_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpoisoningfunction<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtmutualismbreakdownertestpoisoningfunctiondialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpoisoningfunction<a href="CppWidget.htm">widget</a>_test.cpp<br/>
<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownerparameters<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtloripesconsumptionfunction<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtmutualismbreakdownertestconsumptionfunctiondialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpoisoningfunction<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtmutualismbreakdownertestpoisoningfunctiondialog.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtmutualismbreakdownerparameters<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolMutualismBreakdowner/qtloripesconsumptionfunction<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtmutualismbreakdownertestconsumptionfunctiondialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtpoisoningfunction<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;qtmutualismbreakdownertestpoisoningfunctiondialog.ui<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/loripesconsumptionfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/loripesconsumptionfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> LORIPESCONSUMPTIONFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> LORIPESCONSUMPTIONFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<br/>
<a href="CppComment.htm">///</a>The idea is that the more seagrass is present,<br/>
<a href="CppComment.htm">///</a>the more Loripes lucinalis can consume sulfide, because<br/>
<a href="CppComment.htm">///</a><br/>
<a href="CppComment.htm">///</a>the seagrass supplies it with oxygen<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
 Sulfide consumption by Loripes<br/>
<br/>
 |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__________<br/>
 |&nbsp;&nbsp;_---<br/>
 | <a href="CppOperatorDivide.htm">/</a><br/>
 |/<br/>
 <a href="CppOperatorPlus.htm">+</a>------------<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a> <a href="CppOperatorMinus.htm">-</a>&gt; seagrass density<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> LoripesConsumption<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;LoripesConsumption<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~LoripesConsumption<a href="CppFunction.htm">Function</a>() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The rate at which Loripes consumes sulfide<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> CalculateConsumptionRate(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity seagrass_density) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> InvertedExponentialConsumption : LoripesConsumption<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;InvertedExponentialConsumption(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> 0.05);<br/>
&nbsp;&nbsp;~InvertedExponentialConsumption() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The rate at which Loripes consumes sulfide<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalculateConsumptionRate(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity seagrass_density) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_r;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> LoripesConsumption<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> LORIPESCONSUMPTIONFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/loripesconsumptionfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/loripesconsumptionfunction.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "loripesconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> LoripesConsumption<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppShape.htm">Shape</a> of <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> InvertedExponentialConsumption p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(p.CalculateConsumptionRate(&nbsp;&nbsp;0.0 * species_per_square_meters)-0.0) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(p.CalculateConsumptionRate( 20.0 * species_per_square_meters)-0.6) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(p.CalculateConsumptionRate( 60.0 * species_per_square_meters)-0.9) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(p.CalculateConsumptionRate(100.0 * species_per_square_meters)-1.0) &lt; 0.1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InvertedExponentialConsumption c(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
InvertedExponentialConsumption::InvertedExponentialConsumption(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r)<br/>
&nbsp;&nbsp;: m_r{r}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_r <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> InvertedExponentialConsumption::CalculateConsumptionRate(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity seagrass_density<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (seagrass_density &lt; 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialConsumption::CalculateConsumptionRate: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "seagrass_density must be positive, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStd.htm">std</a>::isnan(seagrass_density.value()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialConsumption::CalculateConsumptionRate: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "seagrass_density must be a number, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> seagrass_density.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(seagrass_density <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> n{seagrass_density.value()};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> result{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1.0 <a href="CppOperatorMinus.htm">-</a> <a href="CppStdExp.htm">std::exp</a>(-m_r * n)<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(result <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(result <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> InvertedExponentialConsumption::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialConsumption" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_r<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> LoripesConsumption<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "InvertedExponentialConsumption");<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> r{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> r;<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialConsumption&gt;(r);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "units.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::TestSpeciesDensity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p <a href="CppOperatorAssign.htm">=</a> Parameters::GetTest(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation s(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SIM FINISHED SUCCESSFULLY" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppMain.htm">main</a>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SIM FINISHED WITH ERROR" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "DONE" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownermenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownermenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> MUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "menudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MutualismBreakdowner;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MutualismBreakdownerMenuDialog <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> MenuDialog<br/>
{<br/>
&nbsp;&nbsp;MutualismBreakdownerMenuDialog();<br/>
&nbsp;&nbsp;~MutualismBreakdownerMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;Help GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownermenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownermenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
MutualismBreakdowner, seagrass model<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>System expert: Greg Fivash<br/>
<a href="CppComment.htm">//</a>Model development: Greg Fivash (major), Richel Bilderbeek (minor)<br/>
<a href="CppComment.htm">//</a>Programming: Richel Bilderbeek<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>MutualismBreakdowner.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppAsciiArter.htm">asciiarter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "imagecanvas.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRichelBilderbeekProgram.htm">richelbilderbeekprogram</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::MutualismBreakdownerMenuDialog::MutualismBreakdownerMenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::MutualismBreakdownerMenuDialog::ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppArgc.htm">argc</a> &gt; 4)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::MutualismBreakdownerMenuDialog::GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"MutualismBreakdowner",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"simulation",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 3rd of May 2015",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-2015",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>MutualismBreakdowner.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Test<a href="CppTime.htm">Time</a>r <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Test<a href="CppTime.htm">Time</a>r::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppTrace.htm">Trace</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppTrace.htm">Trace</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; <a href="CppRibi.htm">ribi</a>::MutualismBreakdownerMenuDialog::GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; p(<b><a href="CppNew.htm">new</a></b> ProgramMutualismBreakdowner);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::MutualismBreakdownerMenuDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::MutualismBreakdownerMenuDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-05-03: <a href="CppVersion.htm">Version</a> 0.1: initial <a href="CppVersion.htm">version</a>",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-05-05: <a href="CppVersion.htm">Version</a> 1.0: added menu screens",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Help <a href="CppRibi.htm">ribi</a>::MutualismBreakdownerMenuDialog::GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::Help(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"MutualismBreakdowner",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Seagrass model",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No additional options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::MutualismBreakdownerMenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/parameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/parameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> PARAMETERS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LoripesConsumption<a href="CppFunction.htm">Function</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Poisoning<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Parameters<br/>
{<br/>
&nbsp;&nbsp;Parameters();<br/>
&nbsp;&nbsp;Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_delta_t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_max_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_minimum,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity initial_loripes_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_initial_organic_matter_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity initial_seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::Concentration <a href="CppAny.htm">any</a>_initial_sulfide_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; <a href="CppAny.htm">any</a>_loripes_consumption_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_addition,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_<b><a href="CppBreak.htm">break</a></b>down,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_capture,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_factor,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; <a href="CppAny.htm">any</a>_poisoning_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_recruitment_max,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_recruitment_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_seagrass_carrying_capacity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_seagrass_growth_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_seagrass_to_organic_matter_factor,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_sulfide_diffusion_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppAny.htm">any</a>_n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetDeltaT() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> delta_t; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetDetoxicationMaxRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> detoxification_max_rate; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetDetoxicationMinimum() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> detoxification_minimum; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetDetoxicationRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> detoxification_rate; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetInitialLoripesDensity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> initial_loripes_density; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetInitialOrganicMatterDensity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> initial_organic_matter_density; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetInitialSeagrassDensity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> initial_seagrass_density; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetInitialSulfideConcentration() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> initial_sulfide_concentration; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetLoripesConsumption<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> loripes_consumption_function; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetMutualismBreakdownMax() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> mutualism_<b><a href="CppBreak.htm">break</a></b>down_max; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetMutualismBreakdownR0() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetMutualismBreakdownRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetOrganicMatter<a href="CppAdd.htm">Add</a>ition() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> organic_matter_addition; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetOrganicMatterBreakdown() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> organic_matter_<b><a href="CppBreak.htm">break</a></b>down; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetOrganicMatterCapture() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> organic_matter_capture; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetOrganicMatterToSulfideFactor() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> organic_matter_to_sulfide_factor; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetOrganicMatterToSulfideRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> organic_matter_to_sulfide_rate; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetPoisoning<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> poisoning_function; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDeltaT(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_delta_t);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInitialSeagrassDensity(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_initial_seagrass_density) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetOrganicMatter<a href="CppAdd.htm">Add</a>ition(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_addition) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetRecruitmentMax() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> recruitment_max; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetRecruitmentRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> recruitment_rate; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetSeagrassCarryingCapacity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> seagrass_carrying_capacity; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetSeagrassGrowthRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> seagrass_growth_rate; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetSeagrassToOrganicMatterFactor() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> seagrass_to_organic_matter_factor; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetSulfdeDiffusionRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> sulfide_diffusion_rate; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetNumberOf<a href="CppTime.htm">Time</a>steps() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> n_<a href="CppTime.htm">time</a>steps; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDetoxificationMaxRate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_max_rate) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDetoxificationMinimum(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_minimum) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetDetoxificationRate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_rate) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInitialLoripesDensity(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_initial_loripes_density) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInitialOrganicMatterDensity(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_initial_organic_matter_density) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInitialSulfideConcentation(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::Concentration <a href="CppAny.htm">any</a>_initial_sulfide_concentration) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetLoripesConsumption<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt; <a href="CppAny.htm">any</a>_loripes_consumption_function) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMutualismBreakdownMax(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMutualismBreakdownR0(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetMutualismBreakdownRate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetOrganicMatterBreakdown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_<b><a href="CppBreak.htm">break</a></b>down) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetOrganicMatterCapture(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_capture) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetOrganicMatterToSulfideFactor(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_factor) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetOrganicMatterToSulfideRate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_rate) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPoisoning<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; <a href="CppAny.htm">any</a>_poisoning_function);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a testing parameter set<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Parameters GetTest(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i);<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> delta_t;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> detoxification_max_rate;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> detoxification_minimum;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> detoxification_rate;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::SpeciesDensity initial_loripes_density;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> initial_organic_matter_density;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::SpeciesDensity initial_seagrass_density;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::Concentration initial_sulfide_concentration;<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt; loripes_consumption_function;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mutualism_<b><a href="CppBreak.htm">break</a></b>down_max;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> organic_matter_addition;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> organic_matter_<b><a href="CppBreak.htm">break</a></b>down;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> organic_matter_capture;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> organic_matter_to_sulfide_factor;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> organic_matter_to_sulfide_rate;<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; poisoning_function;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> recruitment_max;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> recruitment_rate;<br/>
<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::SpeciesDensity seagrass_carrying_capacity;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> seagrass_growth_rate;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> seagrass_to_organic_matter_factor;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> sulfide_diffusion_rate;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/parameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/parameters.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "loripesconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "poisoning<a href="CppFunction.htm">function</a>.h"<br/>
Parameters::Parameters()<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;delta_t{0.1},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;detoxification_max_rate{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;detoxification_minimum{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;detoxification_rate{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_loripes_density{0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_organic_matter_density{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_seagrass_density{0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_sulfide_concentration{0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loripes_consumption_function{<b><a href="CppNew.htm">new</a></b> InvertedExponentialConsumption},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_max{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_addition{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_<b><a href="CppBreak.htm">break</a></b>down{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_capture{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_to_sulfide_factor{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_to_sulfide_rate{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;poisoning_function{<b><a href="CppNew.htm">new</a></b> InvertedExponentialPoisoning},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;recruitment_max{0.1},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;recruitment_rate{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_carrying_capacity{0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_growth_rate{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_to_organic_matter_factor{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sulfide_diffusion_rate{0.0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppTime.htm">time</a>steps{1}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(poisoning_function);<br/>
}<br/>
<br/>
Parameters::Parameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_delta_t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_max_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_minimum,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_initial_loripes_density,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_initial_organic_matter_density,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_initial_seagrass_density,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::Concentration <a href="CppAny.htm">any</a>_initial_sulfide_density,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; <a href="CppAny.htm">any</a>_loripes_consumption_function,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_addition,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_<b><a href="CppBreak.htm">break</a></b>down,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_capture,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_factor,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; <a href="CppAny.htm">any</a>_poisoning_function,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_recruitment_max,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_recruitment_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_seagrass_carrying_capacity,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_seagrass_growth_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_seagrass_to_organic_matter_factor,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_sulfide_diffusion_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppAny.htm">any</a>_n_<a href="CppTime.htm">time</a>steps<br/>
) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;delta_t{<a href="CppAny.htm">any</a>_delta_t},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;detoxification_max_rate{<a href="CppAny.htm">any</a>_detoxification_max_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;detoxification_minimum{<a href="CppAny.htm">any</a>_detoxification_minimum},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;detoxification_rate{<a href="CppAny.htm">any</a>_detoxification_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_loripes_density{<a href="CppAny.htm">any</a>_initial_loripes_density},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_organic_matter_density{<a href="CppAny.htm">any</a>_initial_organic_matter_density},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_seagrass_density{<a href="CppAny.htm">any</a>_initial_seagrass_density},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;initial_sulfide_concentration{<a href="CppAny.htm">any</a>_initial_sulfide_density},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loripes_consumption_function{<a href="CppAny.htm">any</a>_loripes_consumption_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_max{<a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0{<a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate{<a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_addition{<a href="CppAny.htm">any</a>_organic_matter_addition},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_<b><a href="CppBreak.htm">break</a></b>down{<a href="CppAny.htm">any</a>_organic_matter_<b><a href="CppBreak.htm">break</a></b>down},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_capture{<a href="CppAny.htm">any</a>_organic_matter_capture},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_to_sulfide_factor{<a href="CppAny.htm">any</a>_organic_matter_to_sulfide_factor},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_to_sulfide_rate{<a href="CppAny.htm">any</a>_organic_matter_to_sulfide_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;poisoning_function{<a href="CppAny.htm">any</a>_poisoning_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;recruitment_max{<a href="CppAny.htm">any</a>_recruitment_max},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;recruitment_rate{<a href="CppAny.htm">any</a>_recruitment_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_carrying_capacity{<a href="CppAny.htm">any</a>_seagrass_carrying_capacity},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_growth_rate{<a href="CppAny.htm">any</a>_seagrass_growth_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_to_organic_matter_factor{<a href="CppAny.htm">any</a>_seagrass_to_organic_matter_factor},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sulfide_diffusion_rate{<a href="CppAny.htm">any</a>_sulfide_diffusion_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppTime.htm">time</a>steps{<a href="CppAny.htm">any</a>_n_<a href="CppTime.htm">time</a>steps}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::mole;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (delta_t <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Parameters::Parameters: delta_t must be above zero");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(initial_loripes_density <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * species_per_square_meter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(initial_seagrass_density <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * species_per_square_meter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(initial_sulfide_concentration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * mole <a href="CppOperatorDivide.htm">/</a> cubic_meter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(seagrass_carrying_capacity <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * species_per_square_meter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(seagrass_growth_rate <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(loripes_consumption_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(poisoning_function);<br/>
}<br/>
<br/>
Parameters Parameters::GetTest(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a> i <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> loripes_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialConsumption&gt;(0.05);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(loripes_consumption_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(loripes_consumption_function.get());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> poisoning_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialPoisoning&gt;(0.05,1.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(poisoning_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(poisoning_function.get());<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::mole;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_delta_t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_max_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_minimum,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1 * species_per_square_meters, <a href="CppComment.htm">//</a>initial_loripes_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0, <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_initial_organic_matter_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1 * species_per_square_meters, <a href="CppComment.htm">//</a>initial_seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0 * mole <a href="CppOperatorDivide.htm">/</a> cubic_meter, <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_initial_sulfide_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;loripes_consumption_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_addition,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_<b><a href="CppBreak.htm">break</a></b>down,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_capture,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_factor,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;poisoning_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_recruitment_max,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_recruitment_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;1.0 * species_per_square_meters, <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_seagrass_carrying_capacity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_seagrass_growth_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_seagrass_to_organic_matter_factor,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_sulfide_diffusion_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;100 <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetDeltaT(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_delta_t)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppAny.htm">any</a>_delta_t <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Parameters::SetDeltaT: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppAny.htm">any</a>_delta_t cannot be less or equal to zero, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "obtained value " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppAny.htm">any</a>_delta_t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;delta_t <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_delta_t;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetInitialSeagrassDensity(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_initial_seagrass_density) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppAny.htm">any</a>_initial_seagrass_density &lt; 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SetInitialSeagrassDensity: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppAny.htm">any</a>_initial_seagrass_density cannot be less than zero, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "obtained value " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppAny.htm">any</a>_initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;initial_seagrass_density <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_initial_seagrass_density;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetOrganicMatter<a href="CppAdd.htm">Add</a>ition(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_addition) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;organic_matter_addition <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_organic_matter_addition;<br/>
}<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetDetoxificationMaxRate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_max_rate) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;detoxification_max_rate <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_detoxification_max_rate;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetDetoxificationMinimum(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_minimum) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;detoxification_minimum <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_detoxification_minimum;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetDetoxificationRate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_detoxification_rate) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;detoxification_rate <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_detoxification_rate;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetInitialLoripesDensity(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_initial_loripes_density) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;initial_loripes_density <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_initial_loripes_density;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetInitialOrganicMatterDensity(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_initial_organic_matter_density) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;initial_organic_matter_density <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_initial_organic_matter_density;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetInitialSulfideConcentation(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::Concentration <a href="CppAny.htm">any</a>_initial_sulfide_concentration) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;initial_sulfide_concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_initial_sulfide_concentration;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetLoripesConsumption<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt; <a href="CppAny.htm">any</a>_loripes_consumption_function) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;loripes_consumption_function <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_loripes_consumption_function;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetMutualismBreakdownMax(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_max <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetMutualismBreakdownR0(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0 <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetMutualismBreakdownRate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetOrganicMatterBreakdown(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_<b><a href="CppBreak.htm">break</a></b>down) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;organic_matter_<b><a href="CppBreak.htm">break</a></b>down <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_organic_matter_<b><a href="CppBreak.htm">break</a></b>down;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetOrganicMatterCapture(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_capture) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;organic_matter_capture <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_organic_matter_capture;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetOrganicMatterToSulfideFactor(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_factor) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;organic_matter_to_sulfide_factor <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_factor;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetOrganicMatterToSulfideRate(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_rate) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;organic_matter_to_sulfide_rate <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_organic_matter_to_sulfide_rate;<br/>
}<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::SetPoisoning<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; <a href="CppAny.htm">any</a>_poisoning_function)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppAny.htm">any</a>_poisoning_function)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Parameters::SetPoisoning<a href="CppFunction.htm">Function</a>: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppAny.htm">any</a>_poisoning_function must not be null";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;poisoning_function <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_poisoning_function;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetDeltaT() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetInitialLoripesDensity() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetInitialOrganicMatterDensity() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetInitialSeagrassDensity() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetInitialSulfideConcentration() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *parameter.GetLoripesConsumption<a href="CppFunction.htm">Function</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.organic_matter_addition <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.organic_matter_<b><a href="CppBreak.htm">break</a></b>down <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.organic_matter_capture <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.organic_matter_to_sulfide_factor <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.organic_matter_to_sulfide_rate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *parameter.GetPoisoning<a href="CppFunction.htm">Function</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.seagrass_carrying_capacity <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.seagrass_growth_rate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.seagrass_to_organic_matter_factor <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.sulfide_diffusion_rate <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.delta_t<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.initial_organic_matter_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.initial_sulfide_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.loripes_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.organic_matter_addition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.organic_matter_<b><a href="CppBreak.htm">break</a></b>down<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.organic_matter_capture<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.organic_matter_to_sulfide_factor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.organic_matter_to_sulfide_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.poisoning_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.seagrass_carrying_capacity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.seagrass_growth_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.seagrass_to_organic_matter_factor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.sulfide_diffusion_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetDeltaT() <a href="CppOperatorEqual.htm">==</a> rhs.GetDeltaT()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.initial_loripes_density <a href="CppOperatorEqual.htm">==</a> rhs.initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.initial_organic_matter_density <a href="CppOperatorEqual.htm">==</a> rhs.initial_organic_matter_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.initial_seagrass_density <a href="CppOperatorEqual.htm">==</a> rhs.initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.initial_sulfide_concentration <a href="CppOperatorEqual.htm">==</a> rhs.initial_sulfide_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.loripes_consumption_function-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> rhs.loripes_consumption_function-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.organic_matter_addition <a href="CppOperatorEqual.htm">==</a> rhs.organic_matter_addition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.organic_matter_<b><a href="CppBreak.htm">break</a></b>down <a href="CppOperatorEqual.htm">==</a> rhs.organic_matter_<b><a href="CppBreak.htm">break</a></b>down<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.organic_matter_capture <a href="CppOperatorEqual.htm">==</a> rhs.organic_matter_capture<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.organic_matter_to_sulfide_factor <a href="CppOperatorEqual.htm">==</a> rhs.organic_matter_to_sulfide_factor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.organic_matter_to_sulfide_rate <a href="CppOperatorEqual.htm">==</a> rhs.organic_matter_to_sulfide_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetPoisoning<a href="CppFunction.htm">Function</a>()-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> rhs.GetPoisoning<a href="CppFunction.htm">Function</a>()-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.seagrass_carrying_capacity <a href="CppOperatorEqual.htm">==</a> rhs.seagrass_carrying_capacity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.seagrass_growth_rate <a href="CppOperatorEqual.htm">==</a> rhs.seagrass_growth_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.seagrass_to_organic_matter_factor <a href="CppOperatorEqual.htm">==</a> rhs.seagrass_to_organic_matter_factor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.sulfide_diffusion_rate <a href="CppOperatorEqual.htm">==</a> rhs.sulfide_diffusion_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> rhs.n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;;<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/parameters_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/parameters_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "loripesconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Parameters::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DeltaT<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does loripes_consumption_function work?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p <a href="CppOperatorAssign.htm">=</a> Parameters::GetTest(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.loripes_consumption_function);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.loripes_consumption_function.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.loripes_consumption_function-&gt;CalculateConsumptionRate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does loripes_consumption_function work after copying?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p <a href="CppOperatorAssign.htm">=</a> Parameters::GetTest(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.loripes_consumption_function);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.loripes_consumption_function.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.loripes_consumption_function-&gt;CalculateConsumptionRate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters q(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q.loripes_consumption_function);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q.loripes_consumption_function.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q.loripes_consumption_function-&gt;CalculateConsumptionRate(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;) <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set same loripes_consumption_function<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.loripes_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialConsumption&gt;(0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.loripes_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialConsumption&gt;(0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p <a href="CppOperatorNotEqual.htm">!=</a> q)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> q <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set different loripes_consumption_function<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.loripes_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialConsumption&gt;(0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.loripes_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialConsumption&gt;(0.6)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change sulfide_diffusion_rate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.sulfide_diffusion_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p.sulfide_diffusion_rate <a href="CppOperatorPlus.htm">+</a> 0.1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change of initial_loripes_density<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p.initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change of organic_matter_addition<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.organic_matter_addition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p.organic_matter_addition<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (0.1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change of organic_matter_to_sulfide_factor<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.organic_matter_to_sulfide_factor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p.organic_matter_to_sulfide_factor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (0.1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change of organic_matter_to_sulfide_rate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.organic_matter_to_sulfide_factor<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p.organic_matter_to_sulfide_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (0.1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameters_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters_too <a href="CppOperatorEqual.htm">==</a> parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O of initial_species_density<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23.45 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.initial_seagrass_density <a href="CppOperatorAssign.htm">=</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameters_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters_too.initial_seagrass_density <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters_too <a href="CppOperatorEqual.htm">==</a> parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/poisoningfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/poisoningfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> POISONINGFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> POISONINGFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<br/>
<a href="CppComment.htm">///</a>A strategy<br/>
<b><a href="CppStruct.htm">struct</a></b> Poisoning<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;Poisoning<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Poisoning<a href="CppFunction.htm">Function</a>() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The fraction that will survive<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> seagrass_density is less than zero<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <b><a href="CppDouble.htm">double</a></b> CalculateSurvivalFraction(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::Concentration sulfide_concentration) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
 Survival<br/>
<br/>
 <a href="CppOperatorPlus.htm">+</a><br/>
 |\<br/>
 | \_<br/>
 |&nbsp;&nbsp; \__<br/>
 |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>________<br/>
 <a href="CppOperatorPlus.htm">+</a>-------------------<a href="CppOperatorDecrement.htm">--</a> Sulfide concentration<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> InvertedExponentialPoisoning : <b><a href="CppPublic.htm">public</a></b> Poisoning<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;InvertedExponentialPoisoning(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r <a href="CppOperatorAssign.htm">=</a> 0.2,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max <a href="CppOperatorAssign.htm">=</a> 0.009<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_r{r}, m_max{max} {}<br/>
&nbsp;&nbsp;~InvertedExponentialPoisoning() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The fraction that will survive<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> seagrass_density is less than zero<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> CalculateSurvivalFraction(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::Concentration sulfide_concentration) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_r;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_max;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Poisoning<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> POISONINGFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/poisoningfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/poisoningfunction.cpp" border = "1"><tr><td><code>
<br/>
<a href="CppInclude.htm">#include</a> "poisoning<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Poisoning<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> InvertedExponentialPoisoning f;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> InvertExponentialPoisoning f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction( 0.0)-1.0) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction( 1.0)-1.0) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction(23.0)-0.5) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction(35.0)-0.1) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction(50.0)-0.0) &lt; 0.1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InvertedExponentialPoisoning c(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> InvertedExponentialPoisoning::CalculateSurvivalFraction(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::Concentration sulfide_concentration<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sulfide_concentration &lt; 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialPoisoning::CalculateSurvivalFraction: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "sulfide_concentration must be positive, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sulfide_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStd.htm">std</a>::isnan(sulfide_concentration.value()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialPoisoning::CalculateSurvivalFraction: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "sulfide_concentration must be a number, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sulfide_concentration.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sulfide_concentration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> s{sulfide_concentration.value()};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p_survive{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_max * (1.0 <a href="CppOperatorMinus.htm">-</a> <a href="CppStdExp.htm">std::exp</a>(-m_r * s))<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p_survive;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> InvertedExponentialPoisoning::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialPoisoning" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_r <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_max<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Poisoning<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "InvertedExponentialPoisoning");<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> r{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> r;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> max{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> max;<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialPoisoning&gt;(r,max);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtloripesconsumptionfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtloripesconsumptionfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTLORIPESCONSUMPTIONFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTLORIPESCONSUMPTIONFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LoripesConsumption<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTLORIPESCONSUMPTIONFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtloripesconsumptionfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtloripesconsumptionfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtloripesconsumption<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "loripesconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtloripesconsumption<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_ie_r,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt; <a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialConsumption&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_ie_r-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;LoripesConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!f)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "BREAK";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;InvertedExponentialConsumption&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_ie_r-&gt;setValue(iec-&gt;m_r);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "poisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "loripesconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "units.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerequilibriumdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<br/>
<a href="CppComment.htm">//</a>Loripes lacteus<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Images from http://www.idscaro.net/sci/01_coll/plates/bival/pl_lucinidae_1.htm<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;LoripesLactaus1.jpg and LoripesLactaus1.jpg:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;Loripes lacteus (Linnaeus, 1758)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;North Sea to Mauritania, Madeira to Mediterranean<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;Corsica 18mm<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;LoripesLactaus3.jpg and LoripesLactaus4.jpg:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;Loripes lacteus (Linnaeus, 1758)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;North Sea to Mauritania, Madeira to Mediterranean<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;NE. Italy 15-19mm<br/>
<a href="CppComment.htm">//</a>Loripes lucinalis<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Image by Joop Trausel and Frans Slieker<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Image from http://eol.org/data_objects/32015683<br/>
<a href="CppComment.htm">//</a>Zostera noltii<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Images from http://flora.nhm-wien.ac.at/Seiten-Arten/Zostera-noltii.htm<br/>
<a href="CppComment.htm">//</a>Equlibrium photo<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Image from NIOZ, from http://www.nioz.nl/files/afdelingen/MEE/Seagrass6.jpg<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;The image was at the side of http://www.nioz.nl/nieuws-detail/biobouwers-structureren-het-voedselweb-in-intergetijde-kustgebieden<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GROWTH&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; POISONING<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b*e^(a*N)<br/>
dN/dt <a href="CppOperatorAssign.htm">=</a> r*N*(1 <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorDecrement.htm">--</a>-) <a href="CppOperatorPlus.htm">+</a> (1 <a href="CppOperatorPlus.htm">+</a> <a href="CppOperatorDecrement.htm">--</a>---------<a href="CppOperatorDecrement.htm">--</a> )*m*N*S<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 <a href="CppOperatorMinus.htm">-</a> b*e^(a*N)<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SULFIDE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXTERNAL&nbsp;&nbsp;DIFFUSION&nbsp;&nbsp;&nbsp;&nbsp; DETOXIFICATION<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PRODUCTION&nbsp;&nbsp;&nbsp;&nbsp;SULFIDE<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INPUT<br/>
<br/>
dS/dt <a href="CppOperatorAssign.htm">=</a>&nbsp;&nbsp;&nbsp;&nbsp;b*N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a>&nbsp;&nbsp;theta&nbsp;&nbsp; <a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;g*S&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c*N*S<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog();<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::Test();<br/>
&nbsp;&nbsp;InvertedExponentialPoisoning();<br/>
&nbsp;&nbsp;InvertedExponentialConsumption();<br/>
&nbsp;&nbsp;Parameters();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNEREQUILIBRIUMDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNEREQUILIBRIUMDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_run_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_equilbrium_from_low;<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_equilbrium_from_high;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_parameters_<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNEREQUILIBRIUMDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerequilibriumdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_zoomer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_grid.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_curve.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downerequilibriumdialog.h"<br/>
<br/>
<a href="CppPreIf.htm">#if</a> QWT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0x060100 <a href="CppOperatorLogicalOr.htm">||</a> !WIN32<br/>
<a href="CppInclude.htm">#include</a> "qwt_<a href="CppPointer.htm">point</a>_data.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog),<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout()-&gt;addWidget(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_equilibrium-&gt;setTitle("Equilibrium");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> grid<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> plot:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot_equilibrium,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotGrid * <b><a href="CppConst.htm">const</a></b> grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotGrid;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(196,196,196)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;attach(plot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotZoomer(plot-&gt;canvas());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_equilibrium-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low-&gt;attach(ui-&gt;plot_equilibrium);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low-&gt;setPen(<a href="CppQColor.htm">QColor</a>(255,0,0));<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high-&gt;attach(ui-&gt;plot_equilibrium);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high-&gt;setPen(<a href="CppQColor.htm">QColor</a>(0,0,255));<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_parameters_<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on_button_run_clicked()));<br/>
&nbsp;&nbsp;on_button_run_clicked();<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 8 <a href="CppOperatorDivide.htm">/</a> 10,screen.height() * 8 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<br/>
Parameters <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;SetParameters(parameters);<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::on_button_run_clicked()<br/>
{<br/>
&nbsp;&nbsp;Parameters parameters{GetParameters()};<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; thetas; <a href="CppComment.htm">//</a>desiccation stresses<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ns_from_low; <a href="CppComment.htm">//</a>seagrass equilibrium densities<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ns_from_high; <a href="CppComment.htm">//</a>seagrass equilibrium densities<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> theta=0.0; theta<a href="CppOperatorLessEqual.htm">&lt;=</a>10.0; theta<a href="CppOperatorPlusAssign.htm">+=</a>1.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.SetOrganicMatter<a href="CppAdd.htm">Add</a>ition(theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;thetas.push_back(theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From low<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters.SetInitialSeagrassDensity(0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simulation simulation(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (simulation.GetSeagrassDensities().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ns_from_low.push_back(0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n_end <a href="CppOperatorAssign.htm">=</a> simulation.GetSeagrassDensities().back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ns_from_low.push_back(n_end.value());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From high<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters.SetInitialSeagrassDensity(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Simulation simulation(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (simulation.GetSeagrassDensities().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ns_from_high.push_back(0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n_end <a href="CppOperatorAssign.htm">=</a> simulation.GetSeagrassDensities().back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ns_from_high.push_back(n_end.value());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;thetas[0],&amp;ns_from_low[0],ns_from_low.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;thetas[0],&amp;ns_from_high[0],ns_from_high.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;plot_equilibrium-&gt;replot();<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_quit_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_equilibrium_plot_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_<a href="CppTime.htm">time</a>_plot_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_consumption_clicked();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_poisoning_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerequilibriumdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downertestconsumption<a href="CppFunction.htm">function</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downertestpoisoning<a href="CppFunction.htm">function</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) close();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a <a href="CppOperatorAssign.htm">=</a> MutualismBreakdownerMenuDialog().GetAbout();<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppQtAboutDialog.htm">QtAboutDialog</a> d(a);<br/>
&nbsp;&nbsp;d.setStyleSheet(<b><a href="CppThis.htm">this</a></b>-&gt;styleSheet());<br/>
&nbsp;&nbsp;d.setWindowIcon(<b><a href="CppThis.htm">this</a></b>-&gt;windowIcon());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_quit_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;close();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog();<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_start_<a href="CppTime.htm">time</a>_plot_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog d;<br/>
&nbsp;&nbsp;ShowChild(&amp;d);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_start_equilibrium_plot_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog d;<br/>
&nbsp;&nbsp;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_consumption_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog d;<br/>
&nbsp;&nbsp;ShowChild(&amp;d);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_poisoning_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog d;<br/>
&nbsp;&nbsp;ShowChild(&amp;d);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERPARAMETERSWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERPARAMETERSWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_set_random_values_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_load_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtconsumption<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtpoisoning<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERPARAMETERSWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "qtloripesconsumption<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>),<br/>
&nbsp;&nbsp;m_qtconsumption<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>LoripesConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>},<br/>
&nbsp;&nbsp;m_qtpoisoning<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> my_layout{ui-&gt;box_consumption_by_loripes-&gt;layout()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtconsumption<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> my_layout{ui-&gt;box_poisoning-&gt;layout()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtpoisoning<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_delta_t,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_detoxification_max_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_detoxification_min,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_detoxification_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_initial_loripes_density,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_initial_organic_matter_density,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_initial_seagrass_density,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_initial_sulfide_concentration,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_n_<a href="CppTime.htm">time</a>steps,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_organic_matter_addition,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_organic_matter_<b><a href="CppBreak.htm">break</a></b>down,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_organic_matter_capture,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_organic_matter_to_sulfide_factor,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_organic_matter_to_sulfide_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_recruitment_max,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_recruitment_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_seagrass_carrying_capacity,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_seagrass_growth_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_seagrass_to_organic_matter_factor,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_sulfide_diffusion_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_organic_matter_to_sulfide_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtconsumption<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtpoisoning<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
Parameters <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::mole;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter;<br/>
&nbsp;&nbsp;Parameters p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_delta_t-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_detoxification_max_rate-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_detoxification_min-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_detoxification_rate-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_initial_loripes_density-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_initial_organic_matter_density-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_initial_seagrass_density-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_initial_sulfide_concentration-&gt;value() * mole <a href="CppOperatorDivide.htm">/</a> cubic_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtconsumption<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_organic_matter_addition-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_organic_matter_<b><a href="CppBreak.htm">break</a></b>down-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_organic_matter_capture-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_organic_matter_to_sulfide_factor-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_organic_matter_to_sulfide_rate-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtpoisoning<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_recruitment_max-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_recruitment_rate-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_seagrass_carrying_capacity-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_seagrass_growth_rate-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_seagrass_to_organic_matter_factor-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_sulfide_diffusion_rate-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_delta_t-&gt;setValue(parameters.GetDeltaT());<br/>
&nbsp;&nbsp;ui-&gt;box_detoxification_max_rate-&gt;setValue(parameters.GetDetoxicationMaxRate());<br/>
&nbsp;&nbsp;ui-&gt;box_detoxification_min-&gt;setValue(parameters.GetDetoxicationMinimum());<br/>
&nbsp;&nbsp;ui-&gt;box_detoxification_rate-&gt;setValue(parameters.GetDetoxicationRate());<br/>
&nbsp;&nbsp;ui-&gt;box_initial_loripes_density-&gt;setValue(parameters.GetInitialLoripesDensity().value());<br/>
&nbsp;&nbsp;ui-&gt;box_initial_organic_matter_density-&gt;setValue(parameters.GetInitialOrganicMatterDensity());<br/>
&nbsp;&nbsp;ui-&gt;box_initial_seagrass_density-&gt;setValue(parameters.GetInitialSeagrassDensity().value());<br/>
&nbsp;&nbsp;ui-&gt;box_initial_sulfide_concentration-&gt;setValue(parameters.GetInitialSulfideConcentration().value());<br/>
&nbsp;&nbsp;ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_max-&gt;setValue(parameters.GetMutualismBreakdownMax());<br/>
&nbsp;&nbsp;ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_r0-&gt;setValue(parameters.GetMutualismBreakdownR0());<br/>
&nbsp;&nbsp;ui-&gt;box_mutualism_<b><a href="CppBreak.htm">break</a></b>down_rate-&gt;setValue(parameters.GetMutualismBreakdownRate());<br/>
&nbsp;&nbsp;ui-&gt;box_organic_matter_addition-&gt;setValue(parameters.GetOrganicMatter<a href="CppAdd.htm">Add</a>ition());<br/>
&nbsp;&nbsp;ui-&gt;box_organic_matter_<b><a href="CppBreak.htm">break</a></b>down-&gt;setValue(parameters.GetOrganicMatterBreakdown());<br/>
&nbsp;&nbsp;ui-&gt;box_organic_matter_capture-&gt;setValue(parameters.GetOrganicMatterCapture());<br/>
&nbsp;&nbsp;ui-&gt;box_organic_matter_to_sulfide_factor-&gt;setValue(parameters.GetOrganicMatterToSulfideFactor());<br/>
&nbsp;&nbsp;ui-&gt;box_organic_matter_to_sulfide_rate-&gt;setValue(parameters.GetOrganicMatterToSulfideRate());<br/>
&nbsp;&nbsp;ui-&gt;box_recruitment_max-&gt;setValue(parameters.GetRecruitmentMax());<br/>
&nbsp;&nbsp;ui-&gt;box_recruitment_rate-&gt;setValue(parameters.GetRecruitmentRate());<br/>
&nbsp;&nbsp;ui-&gt;box_seagrass_carrying_capacity-&gt;setValue(parameters.GetSeagrassCarryingCapacity().value());<br/>
&nbsp;&nbsp;ui-&gt;box_seagrass_growth_rate-&gt;setValue(parameters.GetSeagrassGrowthRate());<br/>
&nbsp;&nbsp;ui-&gt;box_seagrass_to_organic_matter_factor-&gt;setValue(parameters.GetSeagrassToOrganicMatterFactor());<br/>
&nbsp;&nbsp;ui-&gt;box_sulfide_diffusion_rate-&gt;setValue(parameters.GetSulfdeDiffusionRate());<br/>
&nbsp;&nbsp;ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;setValue(parameters.GetNumberOf<a href="CppTime.htm">Time</a>steps());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtconsumption<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetLoripesConsumption<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtpoisoning<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetPoisoning<a href="CppFunction.htm">Function</a>());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::on_button_set_random_values_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> p <a href="CppOperatorAssign.htm">=</a> Parameters::GetTest(0);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;SetParameters(p);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName().toStdString()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (filename.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::on_button_load_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a>Dialog::getOpenFileName().toStdString()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (filename.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameters;<br/>
&nbsp;&nbsp;SetParameters(parameters);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> q <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Initial Loripes density<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_initial_loripes_density-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_initial_loripes_density-&gt;value() <a href="CppOperatorPlus.htm">+</a> 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> q <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Organic material <b><a href="CppBreak.htm">break</a></b>down<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_organic_matter_addition-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_organic_matter_addition-&gt;value() <a href="CppOperatorPlus.htm">+</a> 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> q <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>organic_matter_to_sulfide_factor<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_organic_matter_to_sulfide_factor-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_organic_matter_to_sulfide_factor-&gt;value() <a href="CppOperatorPlus.htm">+</a> 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> q <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>organic_matter_to_sulfide_rate<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_organic_matter_to_sulfide_rate-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_organic_matter_to_sulfide_rate-&gt;value() <a href="CppOperatorPlus.htm">+</a> 1.0<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> q <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertestconsumptionfunctiondialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertestconsumptionfunctiondialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERTESTCONSUMPTIONFUNCTIONDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERTESTCONSUMPTIONFUNCTIONDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Run();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_parameters_<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERTESTCONSUMPTIONFUNCTIONDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertestconsumptionfunctiondialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertestconsumptionfunctiondialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downertestconsumption<a href="CppFunction.htm">function</a>dialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_zoomer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_grid.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_curve.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "loripesconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downertestconsumption<a href="CppFunction.htm">function</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppPreIf.htm">#if</a> QWT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0x060100 <a href="CppOperatorLogicalOr.htm">||</a> !WIN32<br/>
<a href="CppInclude.htm">#include</a> "qwt_<a href="CppPointer.htm">point</a>_data.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog::<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog),<br/>
&nbsp;&nbsp;m_curve(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout()-&gt;addWidget(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot-&gt;setTitle("Loripes sulfide consumption");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> grid<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> plot:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotGrid * <b><a href="CppConst.htm">const</a></b> grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotGrid;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(128,128,128)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;attach(plot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotZoomer(plot-&gt;canvas());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(226,255,226));<br/>
<br/>
&nbsp;&nbsp;m_curve-&gt;attach(ui-&gt;plot);<br/>
&nbsp;&nbsp;m_curve-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,255,0)));<br/>
<br/>
<br/>
 Run();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_parameters_<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(Run()));<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 8 <a href="CppOperatorDivide.htm">/</a> 10,screen.height() * 8 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<br/>
Parameters <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog::GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;SetParameters(parameters);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestConsumption<a href="CppFunction.htm">Function</a>Dialog::Run()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ".";<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters().GetLoripesConsumption<a href="CppFunction.htm">Function</a>();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.get());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; seagrass_densities;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; consumptions;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> n <a href="CppOperatorAssign.htm">=</a> 0.0; n <a href="CppOperatorNotEqual.htm">!=</a> 100.0; n <a href="CppOperatorPlusAssign.htm">+=</a> 1.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_densities.push_back(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> n * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> consumption{ f-&gt;CalculateConsumptionRate(seagrass_density)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;consumptions.push_back(consumption);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_curve-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;seagrass_densities[0],&amp;consumptions[0],consumptions.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;plot-&gt;replot();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertestpoisoningfunctiondialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertestpoisoningfunctiondialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERTESTPOISONINGFUNCTIONDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERTESTPOISONINGFUNCTIONDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Run();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_parameters_<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERTESTPOISONINGFUNCTIONDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertestpoisoningfunctiondialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertestpoisoningfunctiondialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downertestpoisoning<a href="CppFunction.htm">function</a>dialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_zoomer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_grid.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_curve.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "poisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downertestpoisoning<a href="CppFunction.htm">function</a>dialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppPreIf.htm">#if</a> QWT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0x060100 <a href="CppOperatorLogicalOr.htm">||</a> !WIN32<br/>
<a href="CppInclude.htm">#include</a> "qwt_<a href="CppPointer.htm">point</a>_data.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog::<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog),<br/>
&nbsp;&nbsp;m_curve(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout()-&gt;addWidget(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot-&gt;setTitle("Poisoning");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> grid<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> plot:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotGrid * <b><a href="CppConst.htm">const</a></b> grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotGrid;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(128,128,128)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;attach(plot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotZoomer(plot-&gt;canvas());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
<br/>
&nbsp;&nbsp;m_curve-&gt;attach(ui-&gt;plot);<br/>
&nbsp;&nbsp;m_curve-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
<br/>
<br/>
 Run();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_parameters_<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(Run()));<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 8 <a href="CppOperatorDivide.htm">/</a> 10,screen.height() * 8 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<br/>
Parameters <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog::GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;SetParameters(parameters);<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerTestPoisoning<a href="CppFunction.htm">Function</a>Dialog::Run()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters().GetPoisoning<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f.get());<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; sulfide_concentrations;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; survivals;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> s <a href="CppOperatorAssign.htm">=</a> 0.0; s <a href="CppOperatorNotEqual.htm">!=</a> 100.0; s <a href="CppOperatorPlusAssign.htm">+=</a> 1.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sulfide_concentrations.push_back(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sulfilde_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> s * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> poisoning{ f-&gt;CalculateSurvivalFraction(sulfilde_concentration)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;survivals.push_back(poisoning);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_curve-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;sulfide_concentrations[0],&amp;survivals[0],survivals.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;plot-&gt;replot();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERTIMEPLOTDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERTIMEPLOTDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_run_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_loripes_density;<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_seagrass_density;<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_sulfide_concentration;<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_organic_matter_density;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_parameters_<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERTIMEPLOTDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_zoomer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_grid.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_curve.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppPreIf.htm">#if</a> QWT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0x060100 <a href="CppOperatorLogicalOr.htm">||</a> !WIN32<br/>
<a href="CppInclude.htm">#include</a> "qwt_<a href="CppPointer.htm">point</a>_data.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog),<br/>
&nbsp;&nbsp;m_curve_loripes_density(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_curve_seagrass_density(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_curve_organic_matter_density(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout()-&gt;addWidget(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_loripes_density-&gt;setTitle("Loripes density");<br/>
&nbsp;&nbsp;ui-&gt;plot_seagrass_density-&gt;setTitle("Seagrass density");<br/>
&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration-&gt;setTitle("Sulfide concentration");<br/>
&nbsp;&nbsp;ui-&gt;plot_organic_matter_density-&gt;setTitle("Organic matter density");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> grid<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> plot:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot_loripes_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot_organic_matter_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot_seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotGrid * <b><a href="CppConst.htm">const</a></b> grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotGrid;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(128,128,128)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;attach(plot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotZoomer(plot-&gt;canvas());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_loripes_density-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
&nbsp;&nbsp;ui-&gt;plot_seagrass_density-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(226,255,226));<br/>
&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(255,226,226));<br/>
&nbsp;&nbsp;ui-&gt;plot_organic_matter_density-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(226,226,255));<br/>
<br/>
&nbsp;&nbsp;m_curve_loripes_density-&gt;attach(ui-&gt;plot_loripes_density);<br/>
&nbsp;&nbsp;m_curve_loripes_density-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_loripes_density-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,0)));<br/>
<br/>
&nbsp;&nbsp;m_curve_seagrass_density-&gt;attach(ui-&gt;plot_seagrass_density);<br/>
&nbsp;&nbsp;m_curve_seagrass_density-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_seagrass_density-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,255,0)));<br/>
<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration-&gt;attach(ui-&gt;plot_sulfide_concentration);<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(255,0,0)));<br/>
<br/>
&nbsp;&nbsp;m_curve_organic_matter_density-&gt;attach(ui-&gt;plot_organic_matter_density);<br/>
&nbsp;&nbsp;m_curve_organic_matter_density-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_organic_matter_density-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,0,255)));<br/>
<br/>
<br/>
&nbsp;&nbsp;on_button_run_clicked();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_parameters_<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on_button_run_clicked()));<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 8 <a href="CppOperatorDivide.htm">/</a> 10,screen.height() * 8 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
Parameters <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;SetParameters(parameters);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::on_button_run_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parameters <a href="CppOperatorAssign.htm">=</a> GetParameters();<br/>
&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;Simulation simulation(parameters);<br/>
&nbsp;&nbsp;simulation.Run();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppTime.htm">time</a>series{simulation.<a href="CppGetTime.htm">GetTime</a>Series()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; loripes_densities_with_unit <a href="CppOperatorAssign.htm">=</a> simulation.GetLoripesDensities();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; seagrass_densities_with_unit <a href="CppOperatorAssign.htm">=</a> simulation.GetSeagrassDensities();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; sulfide_concentrations_with_unit <a href="CppOperatorAssign.htm">=</a> simulation.GetSulfideConcentrations();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; organic_matter_densities{simulation.GetOrganicMatterDensities()};<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; loripes_densities;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(loripes_densities_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(loripes_densities_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(loripes_densities),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; d){ <b><a href="CppReturn.htm">return</a></b> d.value(); }<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; seagrass_densities;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(seagrass_densities_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(seagrass_densities_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(seagrass_densities),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; d){ <b><a href="CppReturn.htm">return</a></b> d.value(); }<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; sulfide_concentrations;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(sulfide_concentrations_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(sulfide_concentrations_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(sulfide_concentrations),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; d){ <b><a href="CppReturn.htm">return</a></b> d.value(); }<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;m_curve_loripes_density-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;<a href="CppTime.htm">time</a>series[0],&amp;loripes_densities[0],loripes_densities.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_curve_seagrass_density-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;<a href="CppTime.htm">time</a>series[0],&amp;seagrass_densities[0],seagrass_densities.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;<a href="CppTime.htm">time</a>series[0],&amp;sulfide_concentrations[0],sulfide_concentrations.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_curve_organic_matter_density-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;<a href="CppTime.htm">time</a>series[0],&amp;organic_matter_densities[0],organic_matter_densities.size())<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_loripes_density-&gt;replot();<br/>
&nbsp;&nbsp;ui-&gt;plot_seagrass_density-&gt;replot();<br/>
&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration-&gt;replot();<br/>
&nbsp;&nbsp;ui-&gt;plot_organic_matter_density-&gt;replot();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.SetParameters(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.GetParameters() <a href="CppOperatorNotEqual.htm">!=</a> parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d.GetParameters() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetParameters() <a href="CppOperatorEqual.htm">==</a> parameters);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtpoisoningfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtpoisoningfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPOISONINGFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPOISONINGFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Poisoning<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPOISONINGFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtpoisoningfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtpoisoningfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "poisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_ie_r,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_ie_max,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialPoisoning&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_ie_r-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_ie_max-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!f)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "BREAK";<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;InvertedExponentialPoisoning&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_ie_r-&gt;setValue(iec-&gt;m_r);<br/>
&nbsp;&nbsp;ui-&gt;box_ie_max-&gt;setValue(iec-&gt;m_max);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtpoisoningfunctionwidget_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtpoisoningfunctionwidget_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "poisoning<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.GetPoisoning<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> f <a href="CppOperatorAssign.htm">=</a> parameters.GetPoisoning<a href="CppFunction.htm">Function</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.Set<a href="CppFunction.htm">Function</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.Get<a href="CppFunction.htm">Function</a>()-&gt;ToStr() <a href="CppOperatorNotEqual.htm">!=</a> f-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d.Get<a href="CppFunction.htm">Function</a>()-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppFunction.htm">Function</a>()-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> f-&gt;ToStr());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/simulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/simulation.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SIMULATION_H<br/>
<a href="CppDefine.htm">#define</a> SIMULATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Simulation<br/>
{<br/>
&nbsp;&nbsp;Simulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetLoripesDensities() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_loripes_densities; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSeagrassDensities() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_seagrass_densities; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSulfideConcentrations() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sulfide_concentrations; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; GetOrganicMatterDensities() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_organic_matter_densities; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppGetTime.htm">GetTime</a>Series() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppTime.htm">time</a>series; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Run();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::units::SpeciesDensity&gt; m_loripes_densities;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::units::SpeciesDensity&gt; m_seagrass_densities;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::units::Concentration&gt; m_sulfide_concentrations;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_organic_matter_densities;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_<a href="CppTime.htm">time</a>series;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Simulation&amp; simulation) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SIMULATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/simulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/simulation.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "poisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "loripesconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<br/>
Simulation::Simulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
&nbsp;&nbsp;: m_parameters{parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_loripes_densities{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_densities{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_concentrations{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_organic_matter_densities{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>series{}<br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::Run()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps{m_parameters.GetNumberOf<a href="CppTime.htm">Time</a>steps()};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> t_end{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_<a href="CppTime.htm">time</a>steps)};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t_end &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_t{m_parameters.GetDeltaT()};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(delta_t &gt; 0.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t_end <a href="CppOperatorDivide.htm">/</a> delta_t)};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> track_after{<a href="CppStdMax.htm">std::max</a>(1,sz <a href="CppOperatorDivide.htm">/</a> 1000)};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(track_after &gt; 0);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> loripes_consumption_function <a href="CppOperatorAssign.htm">=</a> m_parameters.GetLoripesConsumption<a href="CppFunction.htm">Function</a>();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> poisoning_function <a href="CppOperatorAssign.htm">=</a> m_parameters.GetPoisoning<a href="CppFunction.htm">Function</a>();<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(loripes_consumption_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(loripes_consumption_function.get());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(poisoning_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(poisoning_function.get());<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppInitialize.htm">Initialize</a> sim<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> seagrass_density <a href="CppOperatorAssign.htm">=</a> m_parameters.GetInitialSeagrassDensity();<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> sulfide_concentration <a href="CppOperatorAssign.htm">=</a> m_parameters.GetInitialSulfideConcentration();<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> organic_matter_density <a href="CppOperatorAssign.htm">=</a> m_parameters.GetInitialOrganicMatterDensity();<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> loripes_density <a href="CppOperatorAssign.htm">=</a> m_parameters.GetInitialLoripesDensity();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f("tmp.txt");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_parameters;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i=0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> t=0.0; t&lt;t_end; t<a href="CppOperatorPlusAssign.htm">+=</a>delta_t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> seagrass_density;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> l <a href="CppOperatorAssign.htm">=</a> loripes_density;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> s <a href="CppOperatorAssign.htm">=</a> sulfide_concentration;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m{organic_matter_density};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seagrass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> k <a href="CppOperatorAssign.htm">=</a> m_parameters.GetSeagrassCarryingCapacity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> r <a href="CppOperatorAssign.htm">=</a> m_parameters.GetSeagrassGrowthRate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> growth <a href="CppOperatorAssign.htm">=</a> r*n.value()*(1.0-(n/k));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> death_by_sulfide<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> poisoning_function-&gt;CalculateSurvivalFraction(s) * n.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> delta_n <a href="CppOperatorAssign.htm">=</a> growth <a href="CppOperatorMinus.htm">-</a> death_by_sulfide;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seagrass_density <a href="CppOperatorPlusAssign.htm">+=</a> (delta_n * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter * delta_t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Simulation::Run(), calculating seagrass density: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Organic matter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> capture <a href="CppOperatorAssign.htm">=</a> n.value() * m_parameters.GetOrganicMatterCapture();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> addition <a href="CppOperatorAssign.htm">=</a> m_parameters.GetOrganicMatter<a href="CppAdd.htm">Add</a>ition();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> <b><a href="CppBreak.htm">break</a></b>down <a href="CppOperatorAssign.htm">=</a> m * m_parameters.GetOrganicMatterBreakdown();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_m <a href="CppOperatorAssign.htm">=</a> capture <a href="CppOperatorPlus.htm">+</a> addition <a href="CppOperatorMinus.htm">-</a> <b><a href="CppBreak.htm">break</a></b>down;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;organic_matter_density <a href="CppOperatorPlusAssign.htm">+=</a> (delta_m * delta_t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Simulation::Run(), calculating organic matter density: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sulfide<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> organic_matter_<b><a href="CppBreak.htm">break</a></b>down<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_parameters.GetOrganicMatterToSulfideFactor()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* m_parameters.GetOrganicMatterToSulfideRate()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* m<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> diffusion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_parameters.GetSulfdeDiffusionRate()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d0 <a href="CppOperatorAssign.htm">=</a> m_parameters.GetDetoxicationMinimum();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> r <a href="CppOperatorAssign.htm">=</a> m_parameters.GetDetoxicationRate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max <a href="CppOperatorAssign.htm">=</a> m_parameters.GetDetoxicationMaxRate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> detoxification<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> max<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (d0 * <a href="CppStdExp.htm">std::exp</a>(r * n.value())) <a href="CppOperatorDivide.htm">/</a> (1.0 <a href="CppOperatorPlus.htm">+</a> (d0 * <a href="CppStdExp.htm">std::exp</a>(r * n.value())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* s.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> consumption<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_parameters.GetLoripesConsumption<a href="CppFunction.htm">Function</a>()-&gt;CalculateConsumptionRate(n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* l.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* s.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> delta_s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> organic_matter_<b><a href="CppBreak.htm">break</a></b>down<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> diffusion.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> detoxification<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> consumption<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sulfide_concentration <a href="CppOperatorPlusAssign.htm">+=</a> (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta_s * (<a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* delta_t<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Simulation::Run(), calculating sulfide concentration: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Loripes density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> r <a href="CppOperatorAssign.htm">=</a> m_parameters.GetRecruitmentRate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> K <a href="CppOperatorAssign.htm">=</a> m_parameters.GetRecruitmentMax();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> mr <a href="CppOperatorAssign.htm">=</a> m_parameters.GetMutualismBreakdownRate();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> mmax <a href="CppOperatorAssign.htm">=</a> m_parameters.GetMutualismBreakdownMax();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> mr0 <a href="CppOperatorAssign.htm">=</a> m_parameters.GetMutualismBreakdownR0();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>GF:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>r * (1-(n/K))*)*(N-K) <a href="CppOperatorPlus.htm">+</a> k<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> growth<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> l<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;* (<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;rmax <a href="CppOperatorPlus.htm">+</a> ((rr * (1.0-(l.value()/rmax))) * (l.value()-rmax))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>&nbsp;&nbsp;)<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>RF:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> growth <a href="CppOperatorAssign.htm">=</a> l * (rmax <a href="CppOperatorMinus.htm">-</a> ((rr * l.value()) <a href="CppOperatorDivide.htm">/</a> rmax))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (K <a href="CppOperatorEqual.htm">==</a> 0.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "STUB" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Logistic growth<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> growth <a href="CppOperatorAssign.htm">=</a> r*l*(1.0-(l.value()/K));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> growth<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorMinus.htm">-</a> (l.value() * rmax <a href="CppOperatorDivide.htm">/</a> (1.0 <a href="CppOperatorPlus.htm">+</a> (rmax * rr * l.value())))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* rr * (1.0 <a href="CppOperatorMinus.htm">-</a> (rmax <a href="CppOperatorDivide.htm">/</a> l.value()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>* rmax<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>* (<a href="CppStdExp.htm">std::exp</a>(-rr * l.value()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>* (1.0 <a href="CppOperatorMinus.htm">-</a> <a href="CppStdExp.htm">std::exp</a>(-rr * l.value()))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> mutualism_<b><a href="CppBreak.htm">break</a></b>down <a href="CppOperatorAssign.htm">=</a> l * mmax * (1.0 <a href="CppOperatorMinus.htm">-</a> ((mr0 * <a href="CppStdExp.htm">std::exp</a>(mr * n.value())) <a href="CppOperatorDivide.htm">/</a> (1.0 <a href="CppOperatorPlus.htm">+</a> <a href="CppStdExp.htm">std::exp</a>(mr * n.value()))));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> delta_l<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> growth.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> mutualism_<b><a href="CppBreak.htm">break</a></b>down.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loripes_density <a href="CppOperatorPlusAssign.htm">+=</a> (delta_l * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter * delta_t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Simulation::Run(), calculating loripes density: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorModulus.htm">%</a> track_after <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>series.push_back(<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(t));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_loripes_densities.push_back(loripes_density);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_densities.push_back(seagrass_density);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_concentrations.push_back(sulfide_concentration);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_organic_matter_densities.push_back(organic_matter_density);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Simulation&amp; simulation) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; t{simulation.<a href="CppGetTime.htm">GetTime</a>Series()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; n <a href="CppOperatorAssign.htm">=</a> simulation.GetSeagrassDensities();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; l <a href="CppOperatorAssign.htm">=</a> simulation.GetLoripesDensities();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; s <a href="CppOperatorAssign.htm">=</a> simulation.GetSulfideConcentrations();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; m{simulation.GetOrganicMatterDensities()};<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> stream;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorEqual.htm">==</a> n.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorEqual.htm">==</a> s.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorEqual.htm">==</a> m.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(l.size() <a href="CppOperatorEqual.htm">==</a> m.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.size())};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stream <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> l[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;'\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> str{stream.str()};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!str.empty()) str.pop_back();<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> str;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/simulation_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/simulation_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Simulation::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> "0.1 0.1 0.005 10 m^-2 0.5 InvertedExponentialConsumption 0.05 0.1 0.5 0.01 m^-2 0.5 0.1 1 0.01 10"<br/>
<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/crosscompiletowindows.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/crosscompiletowindows.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#From http://richelbilderbeek.nl/CppQtCrosscompileToWindowsExample15.htm<br/>
<br/>
echo "Cross compiling to Windows"<br/>
<br/>
echo "1/2: Creating Windows makefile"<br/>
i686-w64-mingw32.static-qmake-qt5 ToolMutualismBreakdowner.pro<br/>
<br/>
<br/>
echo "2/2: making makefile"<br/>
<br/>
make<br/>
<br/>
echo "Done"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
