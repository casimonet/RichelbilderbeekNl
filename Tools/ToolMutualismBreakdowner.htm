<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>MutualismBreakdowner</title>
  <meta name="description" content="C++ MutualismBreakdowner"/>
  <meta name="keywords" content="C++ MutualismBreakdowner "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolMutualismBreakdowner.htm">MutualismBreakdowner</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ToolMutualismBreakdowner-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
<br/>
#Specific, console<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/<a href="CppUnits.htm">CppUnits</a>.pri)<br/>
include(<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolMutualismBreakdowner/ToolMutualismBreakdownerDesktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/ToolMutualismBreakdownerDesktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>NoWeffcpp.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralDesktop.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppQwt.htm">Qwt</a>.pri)<br/>
<br/>
#Specific, console<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppUnits.htm">CppUnits</a>/<a href="CppUnits.htm">CppUnits</a>.pri)<br/>
include(<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>Desktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/ToolMutualismBreakdownerConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += ../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a><br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownertimesimulation.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownertimesimulation_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerparameters_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownermenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerpoisoningfunction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownersulfideconsumptionfunction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerseagrassgrowthfunction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownersulfideproductionfunction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownersulfidediffusionfunction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownersulfidedetoxificationfunction.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerseagrasssystem.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerspatialsimulation.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerseagrasscolonisationfunction.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownertimesimulation.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerparameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownermenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerpoisoningfunction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownersulfideconsumptionfunction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerseagrassgrowthfunction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownersulfideproductionfunction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownersulfidediffusionfunction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownersulfidedetoxificationfunction.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerseagrasssystem.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerspatialsimulation.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/mutualismbreakdownerseagrasscolonisationfunction.h<br/>
<br/>
<a href="CppQmakeResources.htm">RESOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>.qrc<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/ToolMutualismBreakdownerDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/ToolMutualismBreakdownerDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>Console.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownertimeplotdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownertimeplotdialog_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownermenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerparameters<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfideconsumptionfunction<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerparameters<a href="CppWidget.htm">widget</a>_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtpoisoningfunction<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtpoisoningfunction<a href="CppWidget.htm">widget</a>_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtseagrassgrowthfunction<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfideproductionfunction<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfidedetoxificationfunction<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfidediffusionfunction<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerspatialplotdialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerspatial<a href="CppWidget.htm">widget</a>.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtseagrasscolonisationfunction<a href="CppWidget.htm">widget</a>.cpp<br/>
<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownertimeplotdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownermenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerparameters<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfideconsumptionfunction<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtpoisoningfunction<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtseagrassgrowthfunction<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfideproductionfunction<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfidedetoxificationfunction<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfidediffusionfunction<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerspatialplotdialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerspatial<a href="CppWidget.htm">widget</a>.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtseagrasscolonisationfunction<a href="CppWidget.htm">widget</a>.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownertimeplotdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownermenudialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerparameters<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfideconsumptionfunction<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtpoisoningfunction<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtseagrassgrowthfunction<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfideproductionfunction<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfidedetoxificationfunction<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtsulfidediffusionfunction<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerspatialplotdialog.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtmutualismbreakdownerspatial<a href="CppWidget.htm">widget</a>.ui \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>/qtseagrasscolonisationfunction<a href="CppWidget.htm">widget</a>.ui<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTime.htm">time</a>simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "units.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::TestSpeciesDensity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p <a href="CppOperatorAssign.htm">=</a> Parameters::GetTest(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>Simulation s(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s.Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SIM FINISHED SUCCESSFULLY" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppMain.htm">main</a>: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SIM FINISHED WITH ERROR" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "DONE" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownermenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownermenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> MUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppScoped_ptr.htm">scoped_ptr</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "menudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> MenuDialog <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> ::<a href="CppRibi.htm">ribi</a>::MenuDialog<br/>
{<br/>
&nbsp;&nbsp;MenuDialog();<br/>
&nbsp;&nbsp;~MenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;Help GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownermenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownermenudialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">/*</a><br/>
MutualismBreakdowner, seagrass model<br/>
Copyright (C) 2015 Richel Bilderbeek<br/>
<br/>
This program is free software: you can redistribute it and/or modify<br/>
it under the terms of the GNU General Public License as published by<br/>
the Free Software Foundation, either version 3 of the License, or<br/>
(at your option) any later version.<br/>
<br/>
This program is distributed in the hope that it will be useful,<br/>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the<br/>
GNU General Public License for more details.<br/>
You should have received a copy of the GNU General Public License<br/>
along with this program.If not, see &lt;http://www.gnu.org/licenses/&gt;.<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppComment.htm">//</a>System expert: Greg Fivash<br/>
<a href="CppComment.htm">//</a>Model development: Greg Fivash (major), Richel Bilderbeek (minor)<br/>
<a href="CppComment.htm">//</a>Programming: Richel Bilderbeek<br/>
<a href="CppComment.htm">//</a><br/>
<a href="CppComment.htm">//</a>From http://www.richelbilderbeek.nl/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>.htm<br/>
<a href="CppComment.htm">//</a>---------------------------------------------------------------------------<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "<a href="CppAsciiArter.htm">asciiarter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppComment.htm">//</a><a href="CppInclude.htm">#include</a> "imagecanvas.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRichelBilderbeekProgram.htm">richelbilderbeekprogram</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::MenuDialog::MenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::mb::MenuDialog::ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1 <a href="CppOperatorLogicalOr.htm">||</a> <a href="CppArgc.htm">argc</a> &gt; 4)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 0;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::mb::MenuDialog::GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Greg Fivash and Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"MutualismBreakdowner",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"simulation",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 12th of May 2015",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-2015",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="ToolMutualismBreakdowner.htm">ToolMutualismBreakdowner</a>.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Test<a href="CppTime.htm">Time</a>r <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Test<a href="CppTime.htm">Time</a>r::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppTrace.htm">Trace</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppTrace.htm">Trace</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; <a href="CppRibi.htm">ribi</a>::mb::MenuDialog::GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; p(<b><a href="CppNew.htm">new</a></b> ProgramMutualismBreakdowner);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::mb::MenuDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "2.1";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::mb::MenuDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-05-03: <a href="CppVersion.htm">Version</a> 0.1: initial <a href="CppVersion.htm">version</a> with 3 ODEs",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-05-05: <a href="CppVersion.htm">Version</a> 1.0: implemented system of 4 ODEs, added menu screens",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-05-12: <a href="CppVersion.htm">Version</a> 2.0: implemented system of 2 ODEs",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-05-13: <a href="CppVersion.htm">Version</a> 2.1: added spatial model"<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Help <a href="CppRibi.htm">ribi</a>::mb::MenuDialog::GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::Help(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"MutualismBreakdowner",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Seagrass model",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No additional options<br/>
&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::MenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> MUTUALISMBREAKDOWNER_PARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> MUTUALISMBREAKDOWNER_PARAMETERS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_<a href="CppTime.htm">time</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Poisoning<a href="CppFunction.htm">Function</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassColonisation<a href="CppFunction.htm">Function</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassGrowth<a href="CppFunction.htm">Function</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideConsumption<a href="CppFunction.htm">Function</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideDetoxification<a href="CppFunction.htm">Function</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideDiffusion<a href="CppFunction.htm">Function</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Parameters<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesDensity <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Concentration;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::<a href="CppTime.htm">Time</a>;<br/>
<br/>
&nbsp;&nbsp;Parameters();<br/>
&nbsp;&nbsp;Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> spatial_delta_t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> spatial_height,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> spatial_width,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> <a href="CppTime.htm">time</a>plot_delta_t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity m_initial_loripes_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity m_initial_seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration <a href="CppAny.htm">any</a>_initial_loripes_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; <a href="CppAny.htm">any</a>_poisoning_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt; seagrass_colonisation_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt; seagrass_growth_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt; sulfide_consumption_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt; sulfide_detoxification_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt; sulfide_diffusion_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt; sulfide_production_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppAny.htm">any</a>_n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetSpatialDeltaT() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_spatial_delta_t; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetSpatialHeight() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_spatial_height; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetSpatialWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_spatial_width; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> <a href="CppGetTime.htm">GetTime</a>plotDeltaT() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppTime.htm">time</a>plot_delta_t; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetInitialLoripesDensity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_initial_loripes_density; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetInitialSeagrassDensity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_initial_seagrass_density; }<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetInitialSulfideConcentration() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_initial_sulfide_concentration; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> GetNumberOf<a href="CppTime.htm">Time</a>steps() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> n_<a href="CppTime.htm">time</a>steps; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetPoisoning<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_poisoning_function; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSeagrassColonisation<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_seagrass_colonisation_function; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSeagrassGrowth<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_seagrass_growth_function; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSulfideConsumption<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sulfide_consumption_function; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSulfideDetoxification<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sulfide_detoxification_function; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSulfideDiffusion<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sulfide_diffusion_function; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sulfide_production_function; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create a testing parameter set<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Parameters GetTest(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppTime.htm">Time</a>plotDeltaT(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> <a href="CppAny.htm">any</a>_delta_t);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetInitialSeagrassDensity(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_initial_seagrass_density) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPoisoning<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; <a href="CppAny.htm">any</a>_poisoning_function);<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a> m_spatial_delta_t;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_spatial_height;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_spatial_width;<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a> m_<a href="CppTime.htm">time</a>plot_delta_t;<br/>
<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::SpeciesDensity m_initial_loripes_density;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::SpeciesDensity m_initial_seagrass_density;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::Concentration m_initial_sulfide_concentration;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; m_poisoning_function;<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt; m_seagrass_colonisation_function;<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt; m_seagrass_growth_function;<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt; m_sulfide_consumption_function;<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt; m_sulfide_detoxification_function;<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt; m_sulfide_diffusion_function;<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt; m_sulfide_production_function;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppFriend.htm">friend</a></b> <b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> MUTUALISMBREAKDOWNER_PARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerparameters.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerpoisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrassgrowth<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrasscolonisation<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidedetoxification<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidediffusion<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideproduction<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::Parameters::Parameters()<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_delta_t{0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::seconds},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_height{10},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_width{10},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>plot_delta_t{0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::seconds},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_loripes_density{0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_seagrass_density{0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_sulfide_concentration{0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_poisoning_function{<a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialPoisoning&gt;()},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_colonisation_function{<a href="CppStdMake_shared.htm">std::make_shared</a>&lt;SeagrassInvertedExponential&gt;()},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_growth_function{<a href="CppStdMake_shared.htm">std::make_shared</a>&lt;SeagrassStressedLogisticGrowth&gt;()},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_consumption_function{<b><a href="CppNew.htm">new</a></b> LinearConsumption},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_detoxification_function{<b><a href="CppNew.htm">new</a></b> LinearSulfideDetoxification},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_diffusion_function{<b><a href="CppNew.htm">new</a></b> LinearSulfideDiffusion},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_production_function{<a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfide<a href="CppProduct.htm">Product</a>ion&gt;()},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppTime.htm">time</a>steps{1}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_poisoning_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_seagrass_growth_function);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::Parameters::Parameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> spatial_delta_t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> spatial_height,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> spatial_width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> <a href="CppTime.htm">time</a>plot_delta_t,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity initial_loripes_density,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity initial_seagrass_density,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::Concentration initial_sulfide_concentration,<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; poisoning_function,<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt; seagrass_colonisation_function,<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt; seagrass_growth_function,<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt; sulfide_consumption_function,<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt; sulfide_detoxification_function,<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt; sulfide_diffusion_function,<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt; sulfide_production_function,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppAny.htm">any</a>_n_<a href="CppTime.htm">time</a>steps<br/>
) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_delta_t{spatial_delta_t},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_height{spatial_height},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_width{spatial_width},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>plot_delta_t{<a href="CppTime.htm">time</a>plot_delta_t},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_loripes_density{initial_loripes_density},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_seagrass_density{initial_seagrass_density},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_initial_sulfide_concentration{initial_sulfide_concentration},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_poisoning_function{poisoning_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_colonisation_function{seagrass_colonisation_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_growth_function{seagrass_growth_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_consumption_function{sulfide_consumption_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_detoxification_function{sulfide_detoxification_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_diffusion_function{sulfide_diffusion_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_production_function{sulfide_production_function},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_<a href="CppTime.htm">time</a>steps{<a href="CppAny.htm">any</a>_n_<a href="CppTime.htm">time</a>steps}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::mole;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::seconds;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_spatial_delta_t <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0 * seconds)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Parameters::Parameters: spatial_delta_t must be above zero");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_<a href="CppTime.htm">time</a>plot_delta_t <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0 * seconds)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Parameters::Parameters: <a href="CppTime.htm">time</a>plot_delta_t must be above zero");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_initial_loripes_density <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * species_per_square_meter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_initial_seagrass_density <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * species_per_square_meter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_initial_sulfide_concentration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * mole <a href="CppOperatorDivide.htm">/</a> cubic_meter);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_sulfide_consumption_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_seagrass_colonisation_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_seagrass_growth_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_poisoning_function);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_sulfide_production_function);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::Parameters <a href="CppRibi.htm">ribi</a>::mb::Parameters::GetTest(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppComment.htm">/*</a> i <a href="CppComment.htm">*/</a>)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> poisoning_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialPoisoning&gt;(0.01,0.05,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> seagrass_colonisation_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;SeagrassInvertedExponential&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.1, <a href="CppComment.htm">//</a>alpha<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second <a href="CppComment.htm">//</a>growth_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> seagrass_growth_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;SeagrassStressedLogisticGrowth&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter, <a href="CppComment.htm">//</a>carrying_capacity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second, <a href="CppComment.htm">//</a>growth_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second <a href="CppComment.htm">//</a>stress_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sulfide_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearConsumption&gt;(0.05);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sulfide_detoxification_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfideDetoxification&gt;(0.05);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sulfide_diffusion_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfideDiffusion&gt;(0.05);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> sulfide_production_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfide<a href="CppProduct.htm">Product</a>ion&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::mole;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::seconds;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1 * seconds, <a href="CppComment.htm">//</a>spatial_delta_t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;10, <a href="CppComment.htm">//</a>spatial_height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;10, <a href="CppComment.htm">//</a>spatial_width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1 * seconds, <a href="CppComment.htm">//</a><a href="CppTime.htm">time</a>plot_delta_t,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1 * species_per_square_meters, <a href="CppComment.htm">//</a>initial_loripes_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.1 * species_per_square_meters, <a href="CppComment.htm">//</a>initial_seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0 * mole <a href="CppOperatorDivide.htm">/</a> cubic_meter, <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_initial_loripes_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;poisoning_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_colonisation_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seagrass_growth_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sulfide_consumption_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sulfide_detoxification_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sulfide_diffusion_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;sulfide_production_function,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;100 <a href="CppComment.htm">//</a><a href="CppAny.htm">any</a>_n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::Parameters::Set<a href="CppTime.htm">Time</a>plotDeltaT(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> <a href="CppAny.htm">any</a>_delta_t)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppAny.htm">any</a>_delta_t <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::seconds)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Parameters::SetDeltaT: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppAny.htm">any</a>_delta_t cannot be less or equal to zero, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "obtained value " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppAny.htm">any</a>_delta_t;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>plot_delta_t <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_delta_t;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::Parameters::SetInitialSeagrassDensity(<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity <a href="CppAny.htm">any</a>_initial_seagrass_density) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppAny.htm">any</a>_initial_seagrass_density &lt; 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SetInitialSeagrassDensity: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppAny.htm">any</a>_initial_seagrass_density cannot be less than zero, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "obtained value " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppAny.htm">any</a>_initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_initial_seagrass_density <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_initial_seagrass_density;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::Parameters::SetPoisoning<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; <a href="CppAny.htm">any</a>_poisoning_function)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!<a href="CppAny.htm">any</a>_poisoning_function)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Parameters::SetPoisoning<a href="CppFunction.htm">Function</a>: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppAny.htm">any</a>_poisoning_function must not be null";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_poisoning_function <a href="CppOperatorAssign.htm">=</a> <a href="CppAny.htm">any</a>_poisoning_function;<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetSpatialDeltaT() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetSpatialHeight() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetSpatialWidth() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.<a href="CppGetTime.htm">GetTime</a>plotDeltaT() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetInitialLoripesDensity() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetInitialSeagrassDensity() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.GetInitialSulfideConcentration() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *parameter.GetPoisoning<a href="CppFunction.htm">Function</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *parameter.GetSulfideConsumption<a href="CppFunction.htm">Function</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *parameter.GetSulfideDetoxification<a href="CppFunction.htm">Function</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *parameter.GetSulfideDiffusion<a href="CppFunction.htm">Function</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> *parameter.GetSulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameter.n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, Parameters&amp; parameter) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;is<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_spatial_delta_t<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_spatial_height<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_spatial_width<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_<a href="CppTime.htm">time</a>plot_delta_t<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_initial_sulfide_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_poisoning_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_sulfide_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_sulfide_detoxification_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_sulfide_diffusion_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.m_sulfide_production_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameter.n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetSpatialDeltaT() <a href="CppOperatorEqual.htm">==</a> rhs.GetSpatialDeltaT()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetSpatialHeight() <a href="CppOperatorEqual.htm">==</a> rhs.GetSpatialHeight()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetSpatialWidth() <a href="CppOperatorEqual.htm">==</a> rhs.GetSpatialWidth()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.<a href="CppGetTime.htm">GetTime</a>plotDeltaT() <a href="CppOperatorEqual.htm">==</a> rhs.<a href="CppGetTime.htm">GetTime</a>plotDeltaT()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_initial_loripes_density <a href="CppOperatorEqual.htm">==</a> rhs.m_initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_initial_seagrass_density <a href="CppOperatorEqual.htm">==</a> rhs.m_initial_seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_initial_sulfide_concentration <a href="CppOperatorEqual.htm">==</a> rhs.m_initial_sulfide_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetPoisoning<a href="CppFunction.htm">Function</a>()-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> rhs.GetPoisoning<a href="CppFunction.htm">Function</a>()-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_sulfide_consumption_function-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> rhs.m_sulfide_consumption_function-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_sulfide_detoxification_function-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> rhs.m_sulfide_detoxification_function-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_sulfide_diffusion_function-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> rhs.m_sulfide_diffusion_function-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.m_sulfide_production_function-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> rhs.m_sulfide_production_function-&gt;ToStr()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorEqual.htm">==</a> rhs.n_<a href="CppTime.htm">time</a>steps<br/>
&nbsp;&nbsp;;<br/>
<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerparameters_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerparameters_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::Parameters::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>DeltaT<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does sulfide_consumption_function work?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p <a href="CppOperatorAssign.htm">=</a> Parameters::GetTest(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.m_sulfide_consumption_function);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.m_sulfide_consumption_function.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.m_sulfide_consumption_function-&gt;CalculateConsumption(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.m_initial_sulfide_concentration,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.m_initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;).value() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Does sulfide_consumption_function work after copying?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p <a href="CppOperatorAssign.htm">=</a> Parameters::GetTest(0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.m_sulfide_consumption_function);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.m_sulfide_consumption_function.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.m_sulfide_consumption_function-&gt;CalculateConsumption(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.m_initial_sulfide_concentration,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.m_initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;).value() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters q(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q.m_sulfide_consumption_function);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q.m_sulfide_consumption_function.get());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(q.m_sulfide_consumption_function-&gt;CalculateConsumption(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.m_initial_sulfide_concentration,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q.m_initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;).value() <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set same sulfide_consumption_function<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.m_sulfide_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearConsumption&gt;(0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.m_sulfide_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearConsumption&gt;(0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p <a href="CppOperatorNotEqual.htm">!=</a> q)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> p <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n' <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> q <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Set different sulfide_consumption_function<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;p.m_sulfide_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearConsumption&gt;(0.5)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.m_sulfide_consumption_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearConsumption&gt;(0.6)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Change of initial_loripes_density<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters p;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters q;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;q.m_initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> p.m_initial_loripes_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> (0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O, one Parameters<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameters_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters_too <a href="CppOperatorEqual.htm">==</a> parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O, two Parameters<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters_a;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters_b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters_a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters_b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters_a_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters_b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameters_a_too <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameters_b_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters_a_too <a href="CppOperatorEqual.htm">==</a> parameters_a);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters_b_too <a href="CppOperatorEqual.htm">==</a> parameters_b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O of initial_species_density<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity d{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;23.45 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.m_initial_seagrass_density <a href="CppOperatorAssign.htm">=</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameters_too;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters_too.m_initial_seagrass_density <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters_too <a href="CppOperatorEqual.htm">==</a> parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerpoisoningfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerpoisoningfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> POISONINGFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> POISONINGFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesgrowth.h"<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<a href="CppComment.htm">///</a>A strategy<br/>
<b><a href="CppStruct.htm">struct</a></b> Poisoning<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Concentration;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Growth <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
<br/>
&nbsp;&nbsp;Poisoning<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Poisoning<a href="CppFunction.htm">Function</a>() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The fraction that will survive<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> seagrass_density is less than zero<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> Growth CalculateDecline(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<br/>
 Survival<br/>
<br/>
 <a href="CppOperatorPlus.htm">+</a><br/>
 |\<br/>
 | \_<br/>
 |&nbsp;&nbsp; \__<br/>
 |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorDecrement.htm">--</a><a href="CppOperatorDecrement.htm">--</a>________<br/>
 <a href="CppOperatorPlus.htm">+</a>-------------------<a href="CppOperatorDecrement.htm">--</a> Sulfide concentration<br/>
<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b*e^(a*N)<br/>
dN/dt <a href="CppOperatorAssign.htm">=</a> (1 <a href="CppOperatorMinus.htm">-</a> <a href="CppOperatorDecrement.htm">--</a>---------<a href="CppOperatorDecrement.htm">--</a> )*m*N*S<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 <a href="CppOperatorPlus.htm">+</a> b*e^(a*N)<br/>
<a href="CppComment.htm">*/</a><br/>
<b><a href="CppStruct.htm">struct</a></b> InvertedExponentialPoisoning : <b><a href="CppPublic.htm">public</a></b> Poisoning<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;InvertedExponentialPoisoning(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> 0.1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> b <a href="CppOperatorAssign.htm">=</a> 0.1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max <a href="CppOperatorAssign.htm">=</a> 0.009<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_a{a}, m_b{b}, m_max{max} {}<br/>
&nbsp;&nbsp;~InvertedExponentialPoisoning() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The fraction that will survive<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> seagrass_density is less than zero<br/>
&nbsp;&nbsp;Growth CalculateDecline(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_a;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_b;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_max;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Poisoning<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> POISONINGFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerpoisoningfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerpoisoningfunction.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerpoisoning<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::Poisoning<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> InvertedExponentialPoisoning f;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> InvertExponentialPoisoning f;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction( 0.0)-1.0) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction( 1.0)-1.0) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction(23.0)-0.5) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction(35.0)-0.1) &lt; 0.1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdAbs.htm">std::abs</a>(f.CalculateSurvivalFraction(50.0)-0.0) &lt; 0.1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;InvertedExponentialPoisoning c(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::Poisoning<a href="CppFunction.htm">Function</a>::Growth<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::InvertedExponentialPoisoning::CalculateDecline(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (sulfide_concentration &lt; 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialPoisoning::CalculateSurvivalFraction: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "sulfide_concentration must be positive, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sulfide_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStd.htm">std</a>::isnan(sulfide_concentration.value()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialPoisoning::CalculateSurvivalFraction: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "sulfide_concentration must be a number, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> sulfide_concentration.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sulfide_concentration <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> s <a href="CppOperatorAssign.htm">=</a> sulfide_concentration;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> seagrass_density;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> f_num <a href="CppOperatorAssign.htm">=</a> 0.0 <a href="CppOperatorPlus.htm">+</a> (m_b * <a href="CppStdExp.htm">std::exp</a>(m_a * seagrass_density.value()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> f_den <a href="CppOperatorAssign.htm">=</a> 1.0 <a href="CppOperatorPlus.htm">+</a> (m_b * <a href="CppStdExp.htm">std::exp</a>(m_a * seagrass_density.value()));<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> m <a href="CppOperatorAssign.htm">=</a> m_max * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second <a href="CppOperatorDivide.htm">/</a> <a href="CppBoostUnits.htm">boost::units</a>::si::mol_per_cubic_meter;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> decline<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> (1.0 <a href="CppOperatorMinus.htm">-</a> (f_num <a href="CppOperatorDivide.htm">/</a> f_den)) * m * n * s<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> decline;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::mb::InvertedExponentialPoisoning::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "InvertedExponentialPoisoning" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_a <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_b <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_max<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Poisoning<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "InvertedExponentialPoisoning");<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> a{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> b{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> b;<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> max{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> max;<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialPoisoning&gt;(a,b,max);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerseagrasscolonisationfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerseagrasscolonisationfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SEAGRASSCOLONISATIONFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> SEAGRASSCOLONISATIONFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesgrowth.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassColonisation<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Growth <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
<br/>
&nbsp;&nbsp;SeagrassColonisation<a href="CppFunction.htm">Function</a>();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~SeagrassColonisation<a href="CppFunction.htm">Function</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> Growth CalculateColonisation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Density&gt;&amp; neighbours_seagrass_densities<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStd.htm">std</a>::<a href="CppInitialize.htm">initialize</a>r_list&lt;Density&gt;&amp; neighbours_seagrass_densities<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">//</a> r * N_neighbour * (1 <a href="CppOperatorMinus.htm">-</a> exp(-alpha * N_neighbour))<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassInvertedExponential : <b><a href="CppPublic.htm">public</a></b> SeagrassColonisation<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Growth <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
<br/>
&nbsp;&nbsp;SeagrassInvertedExponential(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha <a href="CppOperatorAssign.htm">=</a> 0.1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate growth_rate <a href="CppOperatorAssign.htm">=</a> 1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;Growth CalculateColonisation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Density&gt;&amp; neighbours_seagrass_densities<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStd.htm">std</a>::<a href="CppInitialize.htm">initialize</a>r_list&lt;Density&gt;&amp; neighbours_seagrass_densities<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetAlpha() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_alpha; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetGrowthRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_growth_rate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_alpha;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate m_growth_rate;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SeagrassColonisation<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SEAGRASSCOLONISATIONFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerseagrasscolonisationfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerseagrasscolonisationfunction.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrasscolonisation<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesgrowth.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SeagrassColonisation<a href="CppFunction.htm">Function</a>::SeagrassColonisation<a href="CppFunction.htm">Function</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::SeagrassColonisation<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter_per_second;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::per_second;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppShape.htm">Shape</a> of <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SeagrassInvertedExponential f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.1,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0 * per_second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity n{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.1 * species_per_square_meter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth dndt{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.CalculateColonisation( {n,n})<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dndt.value() &gt; 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a{23.45};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SeagrassInvertedExponential c(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r * per_second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SeagrassInvertedExponential::SeagrassInvertedExponential(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> alpha,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate growth_rate<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_alpha{alpha},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_growth_rate{growth_rate}<br/>
{<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SeagrassInvertedExponential::Growth<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::SeagrassInvertedExponential::CalculateColonisation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Density&gt;&amp; neighbours_seagrass_densities<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <a href="CppStd.htm">std</a>::<a href="CppInitialize.htm">initialize</a>r_list&lt;Density&gt;&amp; neighbours_seagrass_densities<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n_neighbour<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStdAccumulate.htm">std::accumulate</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(neighbours_seagrass_densities),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(neighbours_seagrass_densities),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0.0 * species_per_square_meter<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> r <a href="CppOperatorAssign.htm">=</a> m_growth_rate;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> m_alpha;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> n_neighbour;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> result <a href="CppOperatorAssign.htm">=</a> r * n * (1.0 <a href="CppOperatorMinus.htm">-</a> <a href="CppStdExp.htm">std::exp</a>(-a * n.value()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::mb::SeagrassInvertedExponential::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SeagrassInvertedExponential" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_alpha <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_growth_rate<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SeagrassColonisation<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "SeagrassInvertedExponential");<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> alpha;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> alpha;<br/>
&nbsp;&nbsp;SeagrassColonisation<a href="CppFunction.htm">Function</a>::Rate growth_rate;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> growth_rate;<br/>
<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;SeagrassInvertedExponential&gt;(alpha,growth_rate);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerseagrassgrowthfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerseagrassgrowthfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SEAGRASSGROWTHFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> SEAGRASSGROWTHFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesgrowth.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassGrowth<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Growth <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
<br/>
&nbsp;&nbsp;SeagrassGrowth<a href="CppFunction.htm">Function</a>();<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~SeagrassGrowth<a href="CppFunction.htm">Function</a>() {}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth CalculateGrowth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity seagrass_density<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">/*</a><br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassLogisticGrowth : <b><a href="CppPublic.htm">public</a></b> SeagrassGrowth<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Growth <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
<br/>
&nbsp;&nbsp;SeagrassLogisticGrowth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density carrying_capacity <a href="CppOperatorAssign.htm">=</a> 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate growth_rate <a href="CppOperatorAssign.htm">=</a> 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;Growth CalculateGrowth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetCarryingCapacity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_carrying_capacity; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetGrowthRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_growth_rate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density m_carrying_capacity;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate m_growth_rate;<br/>
};<br/>
<a href="CppComment.htm">*/</a><br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassStressedLogisticGrowth : <b><a href="CppPublic.htm">public</a></b> SeagrassGrowth<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Growth <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
<br/>
&nbsp;&nbsp;SeagrassStressedLogisticGrowth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density carrying_capacity <a href="CppOperatorAssign.htm">=</a> 1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate growth_rate <a href="CppOperatorAssign.htm">=</a> 1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate stress_rate <a href="CppOperatorAssign.htm">=</a> 0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;Growth CalculateGrowth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetCarryingCapacity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_carrying_capacity; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetGrowthRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_growth_rate; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetStressRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_stress_rate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density m_carrying_capacity;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate m_growth_rate;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate m_stress_rate;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SeagrassGrowth<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SEAGRASSGROWTHFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerseagrassgrowthfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerseagrassgrowthfunction.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrassgrowth<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesgrowth.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SeagrassGrowth<a href="CppFunction.htm">Function</a>::SeagrassGrowth<a href="CppFunction.htm">Function</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::SeagrassGrowth<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::per_second;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppShape.htm">Shape</a> of <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SeagrassStressedLogisticGrowth f(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0 * species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1 * per_second,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.1 * per_second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesDensity n{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.1 * species_per_square_meter<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrowth dndt{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.CalculateGrowth(n)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dndt.value() &gt; 0.0);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> k{23.45};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> stress{34.56};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SeagrassStressedLogisticGrowth c(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k * species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r * per_second,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stress * per_second<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SeagrassStressedLogisticGrowth::SeagrassStressedLogisticGrowth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density carrying_capacity,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate growth_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Rate stress_rate<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_carrying_capacity{carrying_capacity},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_growth_rate{growth_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_stress_rate{stress_rate}<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_carrying_capacity <a href="CppOperatorLessEqual.htm">&lt;=</a> 0.0 * species_per_square_meter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SeagrassStressedLogisticGrowth::SeagrassStressedLogisticGrowth: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "carrying capacity must be positive, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_carrying_capacity<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SeagrassStressedLogisticGrowth::Growth<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::SeagrassStressedLogisticGrowth::CalculateGrowth(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (seagrass_density &lt; 0.0 * species_per_square_meter)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SeagrassStressedLogisticGrowth::CalculateGrowth: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "seagrass_density must be positive, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppStd.htm">std</a>::isnan(seagrass_density.value()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SeagrassStressedLogisticGrowth::CalculateGrowth: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "seagrass_density must be a number, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "value supplied was " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> seagrass_density.value()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(seagrass_density <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meters);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> r <a href="CppOperatorAssign.htm">=</a> m_growth_rate;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> k <a href="CppOperatorAssign.htm">=</a> m_carrying_capacity;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> seagrass_density;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d <a href="CppOperatorAssign.htm">=</a> m_stress_rate;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> result <a href="CppOperatorAssign.htm">=</a> n * ((r * (1.0 <a href="CppOperatorMinus.htm">-</a> (n/k))) <a href="CppOperatorMinus.htm">-</a> d);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> result;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::mb::SeagrassStressedLogisticGrowth::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "SeagrassStressedLogisticGrowth" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_carrying_capacity <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_growth_rate<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SeagrassGrowth<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "SeagrassStressedLogisticGrowth");<br/>
&nbsp;&nbsp;SeagrassGrowth<a href="CppFunction.htm">Function</a>::Density carrying_capacity;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> carrying_capacity;<br/>
&nbsp;&nbsp;SeagrassGrowth<a href="CppFunction.htm">Function</a>::Rate growth_rate;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> growth_rate;<br/>
<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;SeagrassStressedLogisticGrowth&gt;(carrying_capacity,growth_rate);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerseagrasssystem.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerseagrasssystem.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SEAGRASSSYSTEM_H<br/>
<a href="CppDefine.htm">#define</a> SEAGRASSSYSTEM_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_<a href="CppTime.htm">time</a>.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassSystem<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::<a href="CppTime.htm">Time</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesDensity <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Concentration;<br/>
<br/>
&nbsp;&nbsp;SeagrassSystem(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppAdd.htm">Add</a>SeagrassDensity(<b><a href="CppConst.htm">const</a></b> SpeciesDensity seagrass_density) { m_seagrass_density <a href="CppOperatorPlusAssign.htm">+=</a> seagrass_density; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Change(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> delta_t);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSeagrassDensity() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_seagrass_density; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSulfideConcentration() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sulfide_concentration; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSeagrassDensity(<b><a href="CppConst.htm">const</a></b> SpeciesDensity seagrass_density) { m_seagrass_density <a href="CppOperatorAssign.htm">=</a> seagrass_density; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetSulfideConcentration(<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration) { m_sulfide_concentration <a href="CppOperatorAssign.htm">=</a> sulfide_concentration; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;SpeciesDensity m_seagrass_density;<br/>
&nbsp;&nbsp;Concentration m_sulfide_concentration;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SEAGRASSSYSTEM_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerseagrasssystem.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerseagrasssystem.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrasssystem.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrassgrowth<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerpoisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidedetoxification<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidediffusion<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideproduction<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SeagrassSystem::SeagrassSystem(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
&nbsp;&nbsp;: m_parameters{parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_density{parameters.GetInitialSeagrassDensity()},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_concentration{parameters.GetInitialSulfideConcentration()}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::SeagrassSystem::Change(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> delta_t)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> m_seagrass_density;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> s <a href="CppOperatorAssign.htm">=</a> m_sulfide_concentration;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seagrass<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> growth <a href="CppOperatorAssign.htm">=</a> m_parameters.GetSeagrassGrowth<a href="CppFunction.htm">Function</a>()-&gt;CalculateGrowth(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> poisoning <a href="CppOperatorAssign.htm">=</a> m_parameters.GetPoisoning<a href="CppFunction.htm">Function</a>()-&gt;CalculateDecline(n,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> delta_n <a href="CppOperatorAssign.htm">=</a> growth <a href="CppOperatorMinus.htm">-</a> poisoning;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_density <a href="CppOperatorPlusAssign.htm">+=</a> (delta_n * delta_t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": calculating seagrass density: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sulfide<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> loripes_density <a href="CppOperatorAssign.htm">=</a> m_parameters.GetInitialLoripesDensity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> production <a href="CppOperatorAssign.htm">=</a> m_parameters.GetSulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>()-&gt;Calculate<a href="CppProduct.htm">Product</a>ion(n);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> detoxification <a href="CppOperatorAssign.htm">=</a> m_parameters.GetSulfideDetoxification<a href="CppFunction.htm">Function</a>()-&gt;CalculateDetoxification(n,s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> diffusion <a href="CppOperatorAssign.htm">=</a> m_parameters.GetSulfideDiffusion<a href="CppFunction.htm">Function</a>()-&gt;CalculateDiffusion(s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> consumption <a href="CppOperatorAssign.htm">=</a> m_parameters.GetSulfideConsumption<a href="CppFunction.htm">Function</a>()-&gt;CalculateConsumption(s,loripes_density);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> delta_s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> production<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> diffusion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> detoxification<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorMinus.htm">-</a> consumption<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_concentration <a href="CppOperatorPlusAssign.htm">+=</a> (delta_s * delta_t);<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ":, calculating sulfide concentration: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerspatialsimulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerspatialsimulation.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SPATIALSIMULATION_H<br/>
<a href="CppDefine.htm">#define</a> SPATIALSIMULATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_<a href="CppTime.htm">time</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrasssystem.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SpatialSimulation<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::<a href="CppTime.htm">Time</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> System <a href="CppOperatorAssign.htm">=</a> SeagrassSystem;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Grid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;System<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>;<br/>
<br/>
&nbsp;&nbsp;SpatialSimulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Change(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> delta_t);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetGrid() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_grid; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> KillSeagrass(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;Grid m_grid;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters m_parameters;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SPATIALSIMULATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownerspatialsimulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownerspatialsimulation.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerspatialsimulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrasscolonisation<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SpatialSimulation::SpatialSimulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
&nbsp;&nbsp;: m_grid{Grid(parameters.GetSpatialHeight(),<a href="CppStdVector.htm">std::vector</a>&lt;System&gt;(parameters.GetSpatialWidth(),System(parameters)))},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{parameters}<br/>
{<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::SpatialSimulation::Change(<b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a> delta_t)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Growth <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesGrowth;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b>&amp; line: m_grid)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppAuto.htm">auto</a></b>&amp; system: line)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;system.Change(delta_t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> seagrass_colonisation_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> m_parameters.GetSeagrassColonisation<a href="CppFunction.htm">Function</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_grid.size())};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_grid[0].size())};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Density&gt; neigbour_seagrass_densities<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_grid[y][(x-1+width)%width].GetSeagrassDensity(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_grid[y][(x+1+width)%width].GetSeagrassDensity(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_grid[(y-1+height)%height][x].GetSeagrassDensity(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_grid[(y+1+height)%height][x].GetSeagrassDensity()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Growth colonization<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> seagrass_colonisation_function-&gt;CalculateColonisation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigbour_seagrass_densities<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_grid[y][x].<a href="CppAdd.htm">Add</a>SeagrassDensity(colonization * delta_t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::SpatialSimulation::KillSeagrass(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y)<br/>
{<br/>
&nbsp;&nbsp;m_grid[y][x].SetSeagrassDensity(0.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownersulfideconsumptionfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownersulfideconsumptionfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> LORIPESCONSUMPTIONFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> LORIPESCONSUMPTIONFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIosfwdH.htm">iosfwd</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "concentrationchange.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideConsumption<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Concentration;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Change <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::ConcentrationChange;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
<br/>
&nbsp;&nbsp;SulfideConsumption<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~SulfideConsumption<a href="CppFunction.htm">Function</a>() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> Change CalculateConsumption(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density loripes_density<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LinearConsumption : SulfideConsumption<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;LinearConsumption(<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> 0.05)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_a{a} {}<br/>
&nbsp;&nbsp;~LinearConsumption() {}<br/>
<br/>
&nbsp;&nbsp;Change CalculateConsumption(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density loripes_density<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_a;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SulfideConsumption<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> LORIPESCONSUMPTIONFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownersulfideconsumptionfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownersulfideconsumptionfunction.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::SulfideConsumption<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppShape.htm">Shape</a> of <a href="CppFunction.htm">function</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> LinearConsumption p;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;LinearConsumption c(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::LinearConsumption::Change <a href="CppRibi.htm">ribi</a>::mb::LinearConsumption::CalculateConsumption(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density loripes_density<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::second;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> l <a href="CppOperatorAssign.htm">=</a> loripes_density;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> s <a href="CppOperatorAssign.htm">=</a> sulfide_concentration;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> dsdt <a href="CppOperatorAssign.htm">=</a> l * s * m_a <a href="CppOperatorDivide.htm">/</a> species_per_square_meter <a href="CppOperatorDivide.htm">/</a> second;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> dsdt;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::mb::LinearConsumption::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "LinearConsumption" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_a<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SulfideConsumption<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "LinearConsumption");<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> a{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a;<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearConsumption&gt;(a);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownersulfidedetoxificationfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownersulfidedetoxificationfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SULFIDEDETOXIFICATIONFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> SULFIDEDETOXIFICATIONFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "concentrationchange.h"<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<a href="CppComment.htm">///</a>A strategy<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideDetoxification<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Concentration;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Change <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::ConcentrationChange;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
<br/>
&nbsp;&nbsp;SulfideDetoxification<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~SulfideDetoxification<a href="CppFunction.htm">Function</a>() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> Change CalculateDetoxification(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LinearSulfideDetoxification : <b><a href="CppPublic.htm">public</a></b> SulfideDetoxification<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;LinearSulfideDetoxification(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> 0.1<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_a{a} {}<br/>
&nbsp;&nbsp;~LinearSulfideDetoxification() {}<br/>
<br/>
&nbsp;&nbsp;Change CalculateDetoxification(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_a;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SulfideDetoxification<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SULFIDEDETOXIFICATIONFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownersulfidedetoxificationfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownersulfidedetoxificationfunction.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidedetoxification<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::SulfideDetoxification<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> LinearSulfideDetoxification f;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;LinearSulfideDetoxification c(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SulfideDetoxification<a href="CppFunction.htm">Function</a>::Change<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::LinearSulfideDetoxification::CalculateDetoxification(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::second;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> detoxification<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> sulfide_concentration * seagrass_density<br/>
&nbsp;&nbsp;&nbsp;&nbsp;* m_a <a href="CppOperatorDivide.htm">/</a> species_per_square_meter <a href="CppOperatorDivide.htm">/</a> second<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> detoxification;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::mb::LinearSulfideDetoxification::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "LinearSulfideDetoxification" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_a<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SulfideDetoxification<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "LinearSulfideDetoxification");<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> a{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a;<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfideDetoxification&gt;(a);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownersulfidediffusionfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownersulfidediffusionfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SULFIDEDIFFUSIONFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> SULFIDEDIFFUSIONFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "concentrationchange.h"<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<a href="CppComment.htm">///</a>A strategy<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideDiffusion<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Concentration;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Change <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::ConcentrationChange;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
<br/>
&nbsp;&nbsp;SulfideDiffusion<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~SulfideDiffusion<a href="CppFunction.htm">Function</a>() {}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> Change CalculateDiffusion(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LinearSulfideDiffusion : <b><a href="CppPublic.htm">public</a></b> SulfideDiffusion<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;LinearSulfideDiffusion(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> 0.1<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_a{a} {}<br/>
&nbsp;&nbsp;~LinearSulfideDiffusion() {}<br/>
<br/>
&nbsp;&nbsp;Change CalculateDiffusion(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_a;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SulfideDiffusion<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SULFIDEDIFFUSIONFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownersulfidediffusionfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownersulfidediffusionfunction.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidediffusion<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::SulfideDiffusion<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> LinearSulfideDiffusion f;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;LinearSulfideDiffusion c(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::SulfideDiffusion<a href="CppFunction.htm">Function</a>::Change<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::LinearSulfideDiffusion::CalculateDiffusion(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Concentration sulfide_concentration<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::second;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> diffusion<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> sulfide_concentration * m_a <a href="CppOperatorDivide.htm">/</a> second;<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> diffusion;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::mb::LinearSulfideDiffusion::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "LinearSulfideDiffusion" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_a<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> SulfideDiffusion<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "LinearSulfideDiffusion");<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> a{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a;<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfideDiffusion&gt;(a);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownersulfideproductionfunction.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownersulfideproductionfunction.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SULFIDEPRODUCTIONFUNCTION_H<br/>
<a href="CppDefine.htm">#define</a> SULFIDEPRODUCTIONFUNCTION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "concentration.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "concentrationchange.h"<br/>
<a href="CppInclude.htm">#include</a> "rate.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<a href="CppComment.htm">///</a>A strategy<br/>
<b><a href="CppStruct.htm">struct</a></b> Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Concentration <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Concentration;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Density <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::SpeciesDensity;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Change <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::ConcentrationChange;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Rate <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::units::Rate;<br/>
<br/>
&nbsp;&nbsp;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> ~Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>() {}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/The fraction that will survive<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Will <b><a href="CppThrow.htm">throw</a></b> <b><a href="CppIf.htm">if</a></b> seagrass_density is less than zero<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> Change Calculate<a href="CppProduct.htm">Product</a>ion(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVirtual.htm">virtual</a></b> <a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> LinearSulfide<a href="CppProduct.htm">Product</a>ion : <b><a href="CppPublic.htm">public</a></b> Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><br/>
{<br/>
&nbsp;&nbsp;LinearSulfide<a href="CppProduct.htm">Product</a>ion(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> a <a href="CppOperatorAssign.htm">=</a> 0.1<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;: m_a{a} {}<br/>
&nbsp;&nbsp;~LinearSulfide<a href="CppProduct.htm">Product</a>ion() {}<br/>
<br/>
&nbsp;&nbsp;Change Calculate<a href="CppProduct.htm">Product</a>ion(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density<br/>
&nbsp;&nbsp;) <b><a href="CppConst.htm">const</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_a;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SULFIDEPRODUCTIONFUNCTION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownersulfideproductionfunction.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownersulfideproductionfunction.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideproduction<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> LinearSulfide<a href="CppProduct.htm">Product</a>ion f;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>File I/O<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{12.34};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;LinearSulfide<a href="CppProduct.htm">Product</a>ion c(r);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<a href="CppFileIo.htm">FileIo</a>().GetTempFileName(".txt")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt; d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (c.ToStr() <a href="CppOperatorNotEqual.htm">!=</a> d-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> c.ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c.ToStr() <a href="CppOperatorEqual.htm">==</a> d-&gt;ToStr());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppFileIo.htm">FileIo</a>().<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>::Change<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::LinearSulfide<a href="CppProduct.htm">Product</a>ion::Calculate<a href="CppProduct.htm">Product</a>ion(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Density seagrass_density<br/>
) <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::second;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> production<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> seagrass_density * m_a * mole_per_cubic_meter <a href="CppOperatorDivide.htm">/</a> species_per_square_meter <a href="CppOperatorDivide.htm">/</a> second;<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> production;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::mb::LinearSulfide<a href="CppProduct.htm">Product</a>ion::ToStr() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "LinearSulfide<a href="CppProduct.htm">Product</a>ion" <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_a<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f.ToStr();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<a href="CppStdIstream.htm">std::istream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperator.htm">operator</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>(<a href="CppStdIstream.htm">std::istream</a>&amp; is, <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> type_str;<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> type_str;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(type_str <a href="CppOperatorEqual.htm">==</a> "LinearSulfide<a href="CppProduct.htm">Product</a>ion");<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> a{0.0};<br/>
&nbsp;&nbsp;is <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> a;<br/>
&nbsp;&nbsp;f <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfide<a href="CppProduct.htm">Product</a>ion&gt;(a);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> is;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownertimesimulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownertimesimulation.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SIMULATION_H<br/>
<a href="CppDefine.htm">#define</a> SIMULATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppTime.htm">Time</a>Simulation<br/>
{<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>Simulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSeagrassDensities() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_seagrass_densities; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; GetSulfideConcentrations() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sulfide_concentrations; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppGetTime.htm">GetTime</a>Series() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_<a href="CppTime.htm">time</a>series; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Run();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::units::SpeciesDensity&gt; m_seagrass_densities;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::units::Concentration&gt; m_sulfide_concentrations;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_<a href="CppTime.htm">time</a>series;<br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Simulation&amp; simulation) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SIMULATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownertimesimulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownertimesimulation.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>simulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCmathH.htm">cmath</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/systems/si.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppUnits.htm">boost/units</a>/io.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerpoisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "speciesdensity.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrassgrowth<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidedetoxification<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidediffusion<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideproduction<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrasssystem.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppTime.htm">Time</a>Simulation::<a href="CppTime.htm">Time</a>Simulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
&nbsp;&nbsp;: m_parameters{parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_densities{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_concentrations{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>series{}<br/>
<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppTime.htm">Time</a>Simulation::Run()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppTime.htm">Time</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppBoostUnits.htm">boost::units</a>::quantity&lt;<a href="CppBoostUnits.htm">boost::units</a>::si::<a href="CppTime.htm">time</a>&gt;;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::seconds;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_<a href="CppTime.htm">time</a>steps{m_parameters.GetNumberOf<a href="CppTime.htm">Time</a>steps()};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(n_<a href="CppTime.htm">time</a>steps <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> t_end <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(n_<a href="CppTime.htm">time</a>steps) * seconds;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> delta_t <a href="CppOperatorAssign.htm">=</a> m_parameters.<a href="CppGetTime.htm">GetTime</a>plotDeltaT();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t_end <a href="CppOperatorDivide.htm">/</a> delta_t)};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sz &gt; 0);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> track_after{<a href="CppStdMax.htm">std::max</a>(1,sz <a href="CppOperatorDivide.htm">/</a> 1000)};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(track_after &gt; 0);<br/>
<br/>
&nbsp;&nbsp;SeagrassSystem seagrass_system(m_parameters);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> i=0;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<a href="CppTime.htm">Time</a> t=0.0 * seconds; t&lt;t_end; t<a href="CppOperatorPlusAssign.htm">+=</a>delta_t)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seagrass_system.Change(delta_t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="Cpp__func__.htm">__func__</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": Change: " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s.str() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (i <a href="CppOperatorModulus.htm">%</a> track_after <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>series.push_back(t.value());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_densities.push_back(seagrass_system.GetSeagrassDensity());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_concentrations.push_back(seagrass_system.GetSulfideConcentration());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>i;<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::mb::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">Time</a>Simulation&amp; simulation) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; t{simulation.<a href="CppGetTime.htm">GetTime</a>Series()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; n <a href="CppOperatorAssign.htm">=</a> simulation.GetSeagrassDensities();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; s <a href="CppOperatorAssign.htm">=</a> simulation.GetSulfideConcentrations();<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> stream;<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorEqual.htm">==</a> n.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.size() <a href="CppOperatorEqual.htm">==</a> s.size());<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(t.size())};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i <a href="CppOperatorAssign.htm">=</a> 0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;stream <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> t[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> n[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> " " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> s[i] <a href="CppOperatorStreamOut.htm">&lt;&lt;</a>&nbsp;&nbsp;'\n';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> str{stream.str()};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!str.empty()) str.pop_back();<br/>
&nbsp;&nbsp;os <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> str;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/mutualismbreakdownertimesimulation_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/mutualismbreakdownertimesimulation_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>simulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrassgrowth<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppTime.htm">Time</a>Simulation::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;SeagrassStressedLogisticGrowth();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerpoisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "units.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerequilibriumdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<br/>
<a href="CppComment.htm">//</a>Diffusion:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;URL: http://en.wikipedia.org/wiki/Diffusion#/media/File:Blausen_0315_Diffusion.png<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;By BruceBlaus<br/>
<br/>
<a href="CppComment.htm">//</a>Equilibrium photo<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Image from NIOZ, from http://www.nioz.nl/files/afdelingen/MEE/Seagrass6.jpg<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;The image was at the side of http://www.nioz.nl/nieuws-detail/biobouwers-structureren-het-voedselweb-in-intergetijde-kustgebieden<br/>
<br/>
<a href="CppComment.htm">//</a>Grid:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;URL: http://www.<a href="CppTemplate.htm">templates</a>.com/blog/10-grid-web-design-<a href="Tools.htm">tools</a>/<br/>
<br/>
<a href="CppComment.htm">//</a>Loripes lacteus<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Images from http://www.idscaro.net/sci/01_coll/plates/bival/pl_lucinidae_1.htm<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;LoripesLactaus1.jpg and LoripesLactaus1.jpg:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;Loripes lacteus (Linnaeus, 1758)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;North Sea to Mauritania, Madeira to Mediterranean<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;Corsica 18mm<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;LoripesLactaus3.jpg and LoripesLactaus4.jpg:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;Loripes lacteus (Linnaeus, 1758)<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;North Sea to Mauritania, Madeira to Mediterranean<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;&nbsp;&nbsp;NE. Italy 15-19mm<br/>
<br/>
<a href="CppComment.htm">//</a>Loripes lucinalis<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Image by Joop Trausel and Frans Slieker<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Image from http://eol.org/data_objects/32015683<br/>
<br/>
<a href="CppComment.htm">//</a>Sulfide detoxification:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Article name: The structure of Aquifex aeolicus sulfide:quinone oxidoreductase, a basis to understand sulfide detoxification and respiration<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;URL: http://www.pnas.org/content/106/24/9625/F6.expansion.html<br/>
<br/>
<a href="CppComment.htm">//</a>Sulfide production:<br/>
<a href="CppComment.htm">//</a> URL: http://www.marinebio.net/marinescience/04benthon/dsimg/dscuc.jpg<br/>
<a href="CppComment.htm">//</a> by Genny Anderon<br/>
<br/>
<a href="CppComment.htm">//</a><a href="CppTime.htm">Time</a>:<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;URL: http://en.wikipedia.org/wiki/<a href="CppTime.htm">Time</a>#/media/File:Wooden_hourglass_3.jpg<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;by Arthena<br/>
<br/>
<a href="CppComment.htm">//</a>Zostera noltii<br/>
<a href="CppComment.htm">//</a>&nbsp;&nbsp;Images from http://flora.nhm-wien.ac.at/Seiten-Arten/Zostera-noltii.htm<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog();<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog();<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::Test<a href="CppTime.htm">Time</a>();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::units::Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::InvertedExponentialPoisoning();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::Parameters();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNEREQUILIBRIUMDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNEREQUILIBRIUMDIALOG_H<br/>
<a href="CppComment.htm">/*</a><br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog;<br/>
}<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_run_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_equilbrium_from_low;<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_equilbrium_from_high;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_parameters_<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b> {}<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<a href="CppComment.htm">*/</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNEREQUILIBRIUMDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerequilibriumdialog.cpp" border = "1"><tr><td><code>
<a href="CppComment.htm">/*</a><br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerequilibriumdialog.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_zoomer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_grid.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_curve.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTime.htm">time</a>simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downerequilibriumdialog.h"<br/>
<br/>
<a href="CppPreIf.htm">#if</a> QWT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0x060100 <a href="CppOperatorLogicalOr.htm">||</a> !WIN32<br/>
<a href="CppInclude.htm">#include</a> "qwt_<a href="CppPointer.htm">point</a>_data.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog),<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout()-&gt;addWidget(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_equilibrium-&gt;setTitle("Equilibrium");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> grid<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> plot:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot_equilibrium,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotGrid * <b><a href="CppConst.htm">const</a></b> grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotGrid;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(196,196,196)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;attach(plot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotZoomer(plot-&gt;canvas());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_equilibrium-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(255,255,255));<br/>
<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low-&gt;attach(ui-&gt;plot_equilibrium);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low-&gt;setPen(<a href="CppQColor.htm">QColor</a>(255,0,0));<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high-&gt;attach(ui-&gt;plot_equilibrium);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high-&gt;setPen(<a href="CppQColor.htm">QColor</a>(0,0,255));<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_parameters_<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on_button_run_clicked()));<br/>
&nbsp;&nbsp;on_button_run_clicked();<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 8 <a href="CppOperatorDivide.htm">/</a> 10,screen.height() * 8 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<br/>
Parameters <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <b><a href="CppThis.htm">this</a></b>-&gt;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;SetParameters(parameters);<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerEquilibriumDialog::on_button_run_clicked()<br/>
{<br/>
&nbsp;&nbsp;Parameters parameters{GetParameters()};<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; thetas; <a href="CppComment.htm">//</a>desiccation stresses<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ns_from_low; <a href="CppComment.htm">//</a>seagrass equilibrium densities<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ns_from_high; <a href="CppComment.htm">//</a>seagrass equilibrium densities<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppDouble.htm">double</a></b> theta=0.0; theta<a href="CppOperatorLessEqual.htm">&lt;=</a>10.0; theta<a href="CppOperatorPlusAssign.htm">+=</a>1.0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;thetas.push_back(theta);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From low<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters.SetInitialSeagrassDensity(0.1 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>Simulation simulation(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (simulation.GetSeagrassDensities().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ns_from_low.push_back(0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n_end <a href="CppOperatorAssign.htm">=</a> simulation.GetSeagrassDensities().back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ns_from_low.push_back(n_end.value());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>From high<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters.SetInitialSeagrassDensity(1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">Time</a>Simulation simulation(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.Run();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (simulation.GetSeagrassDensities().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ns_from_high.push_back(0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n_end <a href="CppOperatorAssign.htm">=</a> simulation.GetSeagrassDensities().back();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ns_from_high.push_back(n_end.value());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_low-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;thetas[0],&amp;ns_from_low[0],ns_from_low.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_curve_equilbrium_from_high-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;thetas[0],&amp;ns_from_high[0],ns_from_high.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;plot_equilibrium-&gt;replot();<br/>
<br/>
}<br/>
<a href="CppComment.htm">*/</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> *);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_about_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_quit_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_<a href="CppTime.htm">time</a>_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_start_spatial_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownermenudialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQKeyEvent.htm">QKeyEvent</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtAboutDialog.htm">qtaboutdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerspatialplotdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerequilibriumdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downermenudialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::keyPressEvent(<a href="CppQKeyEvent.htm">QKeyEvent</a> * event)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (event-&gt;key() <a href="CppOperatorEqual.htm">==</a> <a href="CppQt.htm">Qt</a>::Key_Escape) close();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_about_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a <a href="CppOperatorAssign.htm">=</a> <a href="CppRibi.htm">ribi</a>::mb::MenuDialog().GetAbout();<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<a href="CppQtAboutDialog.htm">QtAboutDialog</a> d(a);<br/>
&nbsp;&nbsp;d.setStyleSheet(<b><a href="CppThis.htm">this</a></b>-&gt;styleSheet());<br/>
&nbsp;&nbsp;d.setWindowIcon(<b><a href="CppThis.htm">this</a></b>-&gt;windowIcon());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;hide();<br/>
&nbsp;&nbsp;d.exec();<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;show();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_quit_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;close();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::MenuDialog().GetAbout();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog();<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_start_<a href="CppTime.htm">time</a>_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog d;<br/>
&nbsp;&nbsp;ShowChild(&amp;d);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerMenuDialog::on_button_start_spatial_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog d;<br/>
&nbsp;&nbsp;ShowChild(&amp;d);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERPARAMETERSWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERPARAMETERSWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_load_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_save_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtpoisoning<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtseagrasscolonisation<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtseagrassgrowth<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtsulfideconsumption<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtsulfidedetoxification<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtsulfidediffusion<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_qtsulfideproduction<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERPARAMETERSWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtseagrasscolonisation<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtseagrassgrowth<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtsulfideconsumption<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtsulfidedetoxification<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtsulfidediffusion<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtsulfideproduction<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>),<br/>
&nbsp;&nbsp;m_qtpoisoning<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>},<br/>
&nbsp;&nbsp;m_qtseagrasscolonisation<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>},<br/>
&nbsp;&nbsp;m_qtseagrassgrowth<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>},<br/>
&nbsp;&nbsp;m_qtsulfideconsumption<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>},<br/>
&nbsp;&nbsp;m_qtsulfidedetoxification<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>},<br/>
&nbsp;&nbsp;m_qtsulfidediffusion<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>},<br/>
&nbsp;&nbsp;m_qtsulfideproduction<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Layout <a href="CppOperatorAssign.htm">=</a> QGridLayout;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Layout * <b><a href="CppConst.htm">const</a></b> my_layout{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Layout*&gt;(ui-&gt;page_poisoning-&gt;layout())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtpoisoning<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Layout <a href="CppOperatorAssign.htm">=</a> QGridLayout;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Layout * <b><a href="CppConst.htm">const</a></b> my_layout{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Layout*&gt;(ui-&gt;page_seagrass_colonisation-&gt;layout())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtseagrasscolonisation<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Layout <a href="CppOperatorAssign.htm">=</a> QGridLayout;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Layout * <b><a href="CppConst.htm">const</a></b> my_layout{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppDynamic_cast.htm">dynamic_cast</a></b>&lt;Layout*&gt;(ui-&gt;page_seagrass_growth-&gt;layout())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtseagrassgrowth<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> my_layout{ui-&gt;page_sulfide_consumption-&gt;layout()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtsulfideconsumption<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> my_layout{ui-&gt;page_sulfide_detoxification-&gt;layout()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtsulfidedetoxification<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> my_layout{ui-&gt;page_sulfide_diffusion-&gt;layout()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtsulfidediffusion<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> my_layout{ui-&gt;page_sulfide_production-&gt;layout()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_qtsulfideproduction<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_spatial_delta_t,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_spatial_height,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_spatial_width,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_<a href="CppTime.htm">time</a>plot_delta_t,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_n_<a href="CppTime.htm">time</a>steps,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_initial_loripes_density,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_initial_seagrass_density,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_initial_sulfide_concentration,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtpoisoning<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtseagrasscolonisation<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtseagrassgrowth<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtsulfideconsumption<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtsulfidedetoxification<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtsulfidediffusion<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_qtsulfideproduction<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::Parameters <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::GetParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::mole;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::cubic_meter;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppBoostUnits.htm">boost::units</a>::si::seconds;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_spatial_delta_t-&gt;value() * seconds,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_spatial_height-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_spatial_width-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_<a href="CppTime.htm">time</a>plot_delta_t-&gt;value() * seconds,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_initial_loripes_density-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_initial_seagrass_density-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_initial_sulfide_concentration-&gt;value() * mole <a href="CppOperatorDivide.htm">/</a> cubic_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtpoisoning<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtseagrasscolonisation<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtseagrassgrowth<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtsulfideconsumption<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtsulfidedetoxification<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtsulfidediffusion<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtsulfideproduction<a href="CppWidget.htm">widget</a>-&gt;Get<a href="CppFunction.htm">Function</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_spatial_delta_t-&gt;setValue(parameters.GetSpatialDeltaT().value());<br/>
&nbsp;&nbsp;ui-&gt;box_spatial_height-&gt;setValue(parameters.GetSpatialHeight());<br/>
&nbsp;&nbsp;ui-&gt;box_spatial_width-&gt;setValue(parameters.GetSpatialWidth());<br/>
&nbsp;&nbsp;ui-&gt;box_<a href="CppTime.htm">time</a>plot_delta_t-&gt;setValue(parameters.<a href="CppGetTime.htm">GetTime</a>plotDeltaT().value());<br/>
&nbsp;&nbsp;ui-&gt;box_n_<a href="CppTime.htm">time</a>steps-&gt;setValue(parameters.GetNumberOf<a href="CppTime.htm">Time</a>steps());<br/>
&nbsp;&nbsp;ui-&gt;box_initial_loripes_density-&gt;setValue(parameters.GetInitialLoripesDensity().value());<br/>
&nbsp;&nbsp;ui-&gt;box_initial_seagrass_density-&gt;setValue(parameters.GetInitialSeagrassDensity().value());<br/>
&nbsp;&nbsp;ui-&gt;box_initial_sulfide_concentration-&gt;setValue(parameters.GetInitialSulfideConcentration().value());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtpoisoning<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetPoisoning<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtseagrasscolonisation<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetSeagrassColonisation<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtseagrassgrowth<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetSeagrassGrowth<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtsulfideconsumption<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetSulfideConsumption<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtsulfidedetoxification<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetSulfideDetoxification<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtsulfidediffusion<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetSulfideDiffusion<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_qtsulfideproduction<a href="CppWidget.htm">widget</a>-&gt;Set<a href="CppFunction.htm">Function</a>(parameters.GetSulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::on_button_save_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a>Dialog::getSaveFileName().toStdString()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (filename.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdOfstream.htm">std::ofstream</a> f(filename);<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::on_button_load_clicked()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQFile.htm">QFile</a>Dialog::getOpenFileName().toStdString()<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (filename.empty()) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename);<br/>
&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;f <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> parameters;<br/>
&nbsp;&nbsp;SetParameters(parameters);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerparameterswidget_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> p <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> q <a href="CppOperatorAssign.htm">=</a> d.GetParameters();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerspatialplotdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerspatialplotdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERSPATIALPLOTDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERSPATIALPLOTDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrasssystem.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerspatialsimulation.h"<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SpatialSimulation;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> StartRun();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Next<a href="CppTime.htm">Time</a>step();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Simulation <a href="CppOperatorAssign.htm">=</a> SpatialSimulation;<br/>
<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_parameters_<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_seagrass_<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_sulfide_<a href="CppWidget.htm">widget</a>;<br/>
&nbsp;&nbsp;<a href="CppQTimer.htm">QTimer</a> * <b><a href="CppConst.htm">const</a></b> m_<a href="CppTime.htm">time</a>r;<br/>
&nbsp;&nbsp;<a href="CppStdUnique_ptr.htm">std::unique_ptr</a>&lt;Simulation&gt; m_simulation;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> DisplayGrid();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERSPATIALPLOTDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerspatialplotdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerspatialplotdialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerspatialplotdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerspatial<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downerspatialplotdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerspatialsimulation.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrassgrowth<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog),<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>},<br/>
&nbsp;&nbsp;m_seagrass_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>(10,10)},<br/>
&nbsp;&nbsp;m_sulfide_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>(10,10)},<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r{<b><a href="CppNew.htm">new</a></b> <a href="CppQTimer.htm">QTimer</a>(<b><a href="CppThis.htm">this</a></b>)},<br/>
&nbsp;&nbsp;m_simulation{<b><a href="CppNullptr.htm">nullptr</a></b>}<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> my_layout <a href="CppOperatorAssign.htm">=</a> ui-&gt;<a href="CppWidget.htm">widget</a>_left-&gt;layout();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>m_parameters_<a href="CppWidget.htm">widget</a>-&gt;Hide<a href="CppTime.htm">Time</a>plot();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> my_layout <a href="CppOperatorAssign.htm">=</a> ui-&gt;<a href="CppWidget.htm">widget</a>_mid-&gt;layout();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_seagrass_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> my_layout <a href="CppOperatorAssign.htm">=</a> ui-&gt;<a href="CppWidget.htm">widget</a>_right-&gt;layout();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(my_layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;my_layout-&gt;addWidget(m_sulfide_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_parameters_<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(StartRun()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_<a href="CppTime.htm">time</a>r,<a href="CppSignalMacro.htm">SIGNAL</a>(<a href="CppTime.htm">time</a>out()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(Next<a href="CppTime.htm">Time</a>step()));<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 9 <a href="CppOperatorDivide.htm">/</a> 10,screen.height() * 9 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;StartRun();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog::DisplayGrid()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parameters <a href="CppOperatorAssign.htm">=</a> GetParameters();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> seagrass_growth_function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;SeagrassStressedLogisticGrowth&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters.GetSeagrassGrowth<a href="CppFunction.htm">Function</a>()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(seagrass_growth_function);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> k <a href="CppOperatorAssign.htm">=</a> seagrass_growth_function-&gt;GetCarryingCapacity();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> max_s <a href="CppOperatorAssign.htm">=</a> 1.0 * <a href="CppBoostUnits.htm">boost::units</a>::si::mole_per_cubic_meter;<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_simulation);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> grid <a href="CppOperatorAssign.htm">=</a> m_simulation-&gt;GetGrid();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(grid.size())};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(grid[0].size())};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; line <a href="CppOperatorAssign.htm">=</a> grid[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; cell <a href="CppOperatorAssign.htm">=</a> line[x];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Seagrass<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> n <a href="CppOperatorAssign.htm">=</a> cell.GetSeagrassDensity();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> g <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(255.0 * n <a href="CppOperatorDivide.htm">/</a> k);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (g &lt; 0) g <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (g &gt; 255) g <a href="CppOperatorAssign.htm">=</a> 255;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_seagrass_<a href="CppWidget.htm">widget</a>-&gt;SetPixel(x,y,qRgb(0,g,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sulfide<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> s <a href="CppOperatorAssign.htm">=</a> cell.GetSulfideConcentration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> r <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(255.0 * s <a href="CppOperatorDivide.htm">/</a> max_s);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r &lt; 0) r <a href="CppOperatorAssign.htm">=</a> 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (r &gt; 255) r <a href="CppOperatorAssign.htm">=</a> 255;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_sulfide_<a href="CppWidget.htm">widget</a>-&gt;SetPixel(x,y,qRgb(r,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;m_seagrass_<a href="CppWidget.htm">widget</a>-&gt;update();<br/>
&nbsp;&nbsp;m_sulfide_<a href="CppWidget.htm">widget</a>-&gt;update();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::Parameters <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog::GetParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog::Next<a href="CppTime.htm">Time</a>step()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parameters <a href="CppOperatorAssign.htm">=</a> GetParameters();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> dt <a href="CppOperatorAssign.htm">=</a> parameters.GetSpatialDeltaT();<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_simulation);<br/>
&nbsp;&nbsp;m_simulation-&gt;Change(dt);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Kill some random patch<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> w <a href="CppOperatorAssign.htm">=</a> parameters.GetSpatialWidth();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> h <a href="CppOperatorAssign.htm">=</a> parameters.GetSpatialHeight();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_simulation-&gt;KillSeagrass(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> w,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdRand.htm">std::rand</a>() <a href="CppOperatorModulus.htm">%</a> h<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;DisplayGrid();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;SetParameters(parameters);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatialPlotDialog::StartRun()<br/>
{<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;stop();<br/>
&nbsp;&nbsp;m_seagrass_<a href="CppWidget.htm">widget</a>-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;m_sulfide_<a href="CppWidget.htm">widget</a>-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parameters <a href="CppOperatorAssign.htm">=</a> GetParameters();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parameters <a href="CppOperatorAssign.htm">=</a> GetParameters();<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> w{parameters.GetSpatialWidth()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> h{parameters.GetSpatialHeight()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_seagrass_<a href="CppWidget.htm">widget</a>-&gt;SetResolution(w,h);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_sulfide_<a href="CppWidget.htm">widget</a>-&gt;SetResolution(w,h);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_seagrass_<a href="CppWidget.htm">widget</a>-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_sulfide_<a href="CppWidget.htm">widget</a>-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;m_simulation <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::make_unique&lt;Simulation&gt;(parameters);<br/>
<br/>
&nbsp;&nbsp;DisplayGrid();<br/>
<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;setInterval(1);<br/>
&nbsp;&nbsp;m_<a href="CppTime.htm">time</a>r-&gt;start();<br/>
<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerspatialwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerspatialwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERSPATIALWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERSPATIALWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQImage.htm">QImage</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQImage.htm">QImage</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> 600,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> 400,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetPixel(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <a href="CppQColor.htm">QColor</a> color);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetResolution(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height);<br/>
<br/>
<b><a href="CppProtected.htm">protected</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *);<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a> *ui;<br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> m_image;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERSPATIALWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownerspatialwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownerspatialwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerspatial<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQImage.htm">QImage</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPixmap.htm">QPixmap</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downerspatial<a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height,<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a> *parent<br/>
)<br/>
&nbsp;&nbsp;: <a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_image(width,height,<a href="CppQImage.htm">QImage</a>::Format_RGB32)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>::SetPixel(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y, <b><a href="CppConst.htm">const</a></b> <a href="CppQColor.htm">QColor</a> color)<br/>
{<br/>
&nbsp;&nbsp;m_image.setPixel(x,y,color.rgb());<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>::SetResolution(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width, <b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height)<br/>
{<br/>
&nbsp;&nbsp;m_image <a href="CppOperatorAssign.htm">=</a> <a href="CppQImage.htm">QImage</a>(width,height,<a href="CppQImage.htm">QImage</a>::Format_RGB32);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdownerSpatial<a href="CppWidget.htm">Widget</a>::paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;rect(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQPixmap.htm">QPixmap</a>::fromImage(m_image)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTMUTUALISMBREAKDOWNERTIMEPLOTDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTMUTUALISMBREAKDOWNERTIMEPLOTDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog();<br/>
&nbsp;&nbsp;Parameters GetParameters() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_run_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_seagrass_density;<br/>
&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotCurve * <b><a href="CppConst.htm">const</a></b> m_curve_sulfide_concentration;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a> * <b><a href="CppConst.htm">const</a></b> m_parameters_<a href="CppWidget.htm">widget</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTMUTUALISMBREAKDOWNERTIMEPLOTDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>Dialog&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;QGridLayout&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_zoomer.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_grid.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot.h&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;qwt_plot_curve.h&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>simulation.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downerparameters<a href="CppWidget.htm">widget</a>.h"<br/>
<a href="CppPreIf.htm">#if</a> QWT_VERSION <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0x060100 <a href="CppOperatorLogicalOr.htm">||</a> !WIN32<br/>
<a href="CppInclude.htm">#include</a> "qwt_<a href="CppPointer.htm">point</a>_data.h"<br/>
<a href="CppEndif.htm">#endif</a><br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> ::<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog),<br/>
&nbsp;&nbsp;m_curve_seagrass_density(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration(<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotCurve),<br/>
&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>MutualismBreakdownerParameters<a href="CppWidget.htm">Widget</a>}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Parameters <a href="CppWidget.htm">widget</a><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;<a href="CppWidget.htm">widget</a>-&gt;layout()-&gt;addWidget(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;}<br/>
<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_seagrass_density-&gt;setTitle("Seagrass density");<br/>
&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration-&gt;setTitle("Sulfide concentration");<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> grid<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> plot:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot_seagrass_density,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQwt.htm">Qwt</a>PlotGrid * <b><a href="CppConst.htm">const</a></b> grid <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotGrid;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(128,128,128)));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;grid-&gt;attach(plot);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a>PlotZoomer(plot-&gt;canvas());<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_seagrass_density-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(226,255,226));<br/>
&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration-&gt;set<a href="CppCanvas.htm">Canvas</a>Background(<a href="CppQColor.htm">QColor</a>(255,226,226));<br/>
<br/>
&nbsp;&nbsp;m_curve_seagrass_density-&gt;attach(ui-&gt;plot_seagrass_density);<br/>
&nbsp;&nbsp;m_curve_seagrass_density-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_seagrass_density-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(0,255,0)));<br/>
<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration-&gt;attach(ui-&gt;plot_sulfide_concentration);<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration-&gt;setStyle(<a href="CppQwt.htm">Qwt</a>PlotCurve::Lines);<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration-&gt;setPen(<a href="CppQPen.htm">QPen</a>(<a href="CppQColor.htm">QColor</a>(255,0,0)));<br/>
<br/>
&nbsp;&nbsp;on_button_run_clicked();<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(m_parameters_<a href="CppWidget.htm">widget</a>,<a href="CppSignalMacro.htm">SIGNAL</a>(signal_parameters_changed()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on_button_run_clicked()));<br/>
<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 9 <a href="CppOperatorDivide.htm">/</a> 10,screen.height() * 9 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::~<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::Parameters <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::GetParameters() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_parameters_<a href="CppWidget.htm">widget</a>-&gt;GetParameters();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::SetParameters(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_parameters_<a href="CppWidget.htm">widget</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters_<a href="CppWidget.htm">widget</a>-&gt;SetParameters(parameters);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b>(<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::on_button_run_clicked()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;plot_seagrass_density-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration-&gt;setEnabled(<b><a href="CppFalse.htm">false</a></b>);<br/>
&nbsp;&nbsp;<b><a href="CppTry.htm">try</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parameters <a href="CppOperatorAssign.htm">=</a> GetParameters();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppCatch.htm">catch</a></b> (<a href="CppStdLogic_error.htm">std::logic_error</a>&amp; e)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> e.what() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;ui-&gt;plot_seagrass_density-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration-&gt;setEnabled(<b><a href="CppTrue.htm">true</a></b>);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parameters <a href="CppOperatorAssign.htm">=</a> GetParameters();<br/>
&nbsp;&nbsp;<a href="CppStdClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
&nbsp;&nbsp;<a href="CppTime.htm">Time</a>Simulation simulation(parameters);<br/>
&nbsp;&nbsp;simulation.Run();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;&amp; <a href="CppTime.htm">time</a>series{simulation.<a href="CppGetTime.htm">GetTime</a>Series()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; seagrass_densities_with_unit <a href="CppOperatorAssign.htm">=</a> simulation.GetSeagrassDensities();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; sulfide_concentrations_with_unit <a href="CppOperatorAssign.htm">=</a> simulation.GetSulfideConcentrations();<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; seagrass_densities;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(seagrass_densities_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(seagrass_densities_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(seagrass_densities),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; d){ <b><a href="CppReturn.htm">return</a></b> d.value(); }<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; sulfide_concentrations;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(sulfide_concentrations_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(sulfide_concentrations_with_unit),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(sulfide_concentrations),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; d){ <b><a href="CppReturn.htm">return</a></b> d.value(); }<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;m_curve_seagrass_density-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;<a href="CppTime.htm">time</a>series[0],&amp;seagrass_densities[0],seagrass_densities.size())<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;m_curve_sulfide_concentration-&gt;setData(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppQwt.htm">Qwt</a><a href="CppPoint.htm">Point</a><a href="CppArray.htm">Array</a>Data(&amp;<a href="CppTime.htm">time</a>series[0],&amp;sulfide_concentrations[0],sulfide_concentrations.size())<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;ui-&gt;plot_seagrass_density-&gt;replot();<br/>
&nbsp;&nbsp;ui-&gt;plot_sulfide_concentration-&gt;replot();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtmutualismbreakdownertimeplotdialog_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "qtmutualism<b><a href="CppBreak.htm">break</a></b>downer<a href="CppTime.htm">time</a>plotdialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>MutualismBreakdowner<a href="CppTime.htm">Time</a>PlotDialog d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.SetParameters(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.GetParameters() <a href="CppOperatorNotEqual.htm">!=</a> parameters)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d.GetParameters() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetParameters() <a href="CppOperatorEqual.htm">==</a> parameters);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtpoisoningfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtpoisoningfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTPOISONINGFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTPOISONINGFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Poisoning<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTPOISONINGFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtpoisoningfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtpoisoningfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerpoisoning<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_a,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_b,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_max,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::mb::Poisoning<a href="CppFunction.htm">Function</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;InvertedExponentialPoisoning&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_a-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_b-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_max-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Poisoning<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;InvertedExponentialPoisoning&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_a-&gt;setValue(iec-&gt;m_a);<br/>
&nbsp;&nbsp;ui-&gt;box_b-&gt;setValue(iec-&gt;m_b);<br/>
&nbsp;&nbsp;ui-&gt;box_max-&gt;setValue(iec-&gt;m_max);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtpoisoningfunctionwidget_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtpoisoningfunctionwidget_test.cpp" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<a href="CppInclude.htm">#include</a> "qtpoisoning<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerpoisoning<a href="CppFunction.htm">function</a>.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>;<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Poisoning<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters parameters;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.GetPoisoning<a href="CppFunction.htm">Function</a>());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> f <a href="CppOperatorAssign.htm">=</a> parameters.GetPoisoning<a href="CppFunction.htm">Function</a>();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.Set<a href="CppFunction.htm">Function</a>(f);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (d.Get<a href="CppFunction.htm">Function</a>()-&gt;ToStr() <a href="CppOperatorNotEqual.htm">!=</a> f-&gt;ToStr())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> d.Get<a href="CppFunction.htm">Function</a>()-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> f-&gt;ToStr() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.Get<a href="CppFunction.htm">Function</a>()-&gt;ToStr() <a href="CppOperatorEqual.htm">==</a> f-&gt;ToStr());<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtseagrasscolonisationfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtseagrasscolonisationfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSEAGRASSCOLONISATIONFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTSEAGRASSCOLONISATIONFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassColonisation<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt;&amp; f);<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSEAGRASSCOLONISATIONFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtseagrasscolonisationfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtseagrasscolonisationfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtseagrasscolonisation<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrasscolonisation<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtseagrasscolonisation<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_r,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_a,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::mb::SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;SeagrassInvertedExponential&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_a-&gt;value(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_r-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassColonisation<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassColonisation<a href="CppFunction.htm">Function</a>&gt;&amp; f)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;SeagrassInvertedExponential&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_a-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iec-&gt;GetAlpha()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;box_r-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iec-&gt;GetGrowthRate().value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtseagrassgrowthfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtseagrassgrowthfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSEAGRASSGROWTHFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTSEAGRASSGROWTHFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SeagrassGrowth<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt;&amp; f);<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSEAGRASSGROWTHFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtseagrassgrowthfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtseagrassgrowthfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtseagrassgrowth<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downerseagrassgrowth<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtseagrassgrowth<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_seagrass_carrying_capacity,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_seagrass_growth_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_seagrass_stress_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::mb::SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;SeagrassStressedLogisticGrowth&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_seagrass_carrying_capacity-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::species_per_square_meter,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_seagrass_growth_rate-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_seagrass_stress_rate-&gt;value() * <a href="CppBoostUnits.htm">boost::units</a>::si::per_second<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SeagrassGrowth<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SeagrassGrowth<a href="CppFunction.htm">Function</a>&gt;&amp; f<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;SeagrassStressedLogisticGrowth&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_seagrass_growth_rate-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iec-&gt;GetGrowthRate().value()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;box_seagrass_carrying_capacity-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iec-&gt;GetCarryingCapacity().value()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;ui-&gt;box_seagrass_stress_rate-&gt;setValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;iec-&gt;GetStressRate().value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtsulfideconsumptionfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtsulfideconsumptionfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSULFIDECONSUMPTIONFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTSULFIDECONSUMPTIONFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideConsumption<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSULFIDECONSUMPTIONFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtsulfideconsumptionfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtsulfideconsumptionfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtsulfideconsumption<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideconsumption<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtsulfideconsumption<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_a,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::mb::SulfideConsumption<a href="CppFunction.htm">Function</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearConsumption&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_a-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideConsumption<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideConsumption<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;LinearConsumption&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_a-&gt;setValue(iec-&gt;m_a);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtsulfidedetoxificationfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtsulfidedetoxificationfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSULFIDEDETOXIFICATIONFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTSULFIDEDETOXIFICATIONFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideDetoxification<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSULFIDEDETOXIFICATIONFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtsulfidedetoxificationfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtsulfidedetoxificationfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtsulfidedetoxification<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidedetoxification<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtsulfidedetoxification<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_a,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::mb::SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfideDetoxification&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_a-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDetoxification<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDetoxification<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;LinearSulfideDetoxification&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_a-&gt;setValue(iec-&gt;m_a);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtsulfidediffusionfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtsulfidediffusionfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSULFIDEDIFFUSIONFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTSULFIDEDIFFUSIONFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SulfideDiffusion<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSULFIDEDIFFUSIONFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtsulfidediffusionfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtsulfidediffusionfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtsulfidediffusion<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfidediffusion<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtsulfidediffusion<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_a,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::mb::SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfideDiffusion&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_a-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>SulfideDiffusion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::mb::SulfideDiffusion<a href="CppFunction.htm">Function</a>&gt;&amp; f<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;LinearSulfideDiffusion&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_a-&gt;setValue(iec-&gt;m_a);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtsulfideproductionfunctionwidget.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtsulfideproductionfunctionwidget.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSULFIDEPRODUCTIONFUNCTIONWIDGET_H<br/>
<a href="CppDefine.htm">#define</a> QTSULFIDEPRODUCTIONFUNCTIONWIDGET_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMemoryH.htm">memory</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>;<br/>
}<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> mb {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>();<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt; Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> signal_parameters_changed() <b><a href="CppConst.htm">const</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a> *ui;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnAnyChange();<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> mb<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSULFIDEPRODUCTIONFUNCTIONWIDGET_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/qtsulfideproductionfunctionwidget.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/qtsulfideproductionfunctionwidget.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtsulfideproduction<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "mutualism<b><a href="CppBreak.htm">break</a></b>downersulfideproduction<a href="CppFunction.htm">function</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtsulfideproduction<a href="CppFunction.htm">function</a><a href="CppWidget.htm">widget</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>)<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_a,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnAnyChange()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::~<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<a href="CppRibi.htm">ribi</a>::mb::Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt;<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Get<a href="CppFunction.htm">Function</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppStdMake_shared.htm">std::make_shared</a>&lt;LinearSulfide<a href="CppProduct.htm">Product</a>ion&gt;(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_a-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::OnAnyChange()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> signal_parameters_changed();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::mb::<a href="CppQt.htm">Qt</a>Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a><a href="CppWidget.htm">Widget</a>::Set<a href="CppFunction.htm">Function</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Sulfide<a href="CppProduct.htm">Product</a>ion<a href="CppFunction.htm">Function</a>&gt;&amp; f) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iec <a href="CppOperatorAssign.htm">=</a> <a href="CppStd.htm">std</a>::<a href="CppDynamic_pointer_cast.htm">dynamic_pointer_cast</a>&lt;LinearSulfide<a href="CppProduct.htm">Product</a>ion&gt;(f);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(iec);<br/>
&nbsp;&nbsp;ui-&gt;box_a-&gt;setValue(iec-&gt;m_a);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolMutualismBreakdowner/crosscompiletowindows.sh</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolMutualismBreakdowner/crosscompiletowindows.sh" border = "1"><tr><td><code>
#!/bin/sh<br/>
#From http://richelbilderbeek.nl/CppQtCrosscompileToWindowsExample15.htm<br/>
i686-w64-mingw32.static-qmake-qt5 ToolMutualismBreakdownerDesktop.pro<br/>
make<br/>
echo "Done"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
