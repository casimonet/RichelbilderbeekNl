<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>FisherWrighter</title>
  <meta name="description" content="C++ FisherWrighter"/>
  <meta name="keywords" content="C++ FisherWrighter "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolFisherWrighter.htm">FisherWrighter</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ToolFisherWrighter-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolFisherWrighter/ToolFisherWrighterConsole.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/ToolFisherWrighterConsole.pro" border = "1"><tr><td><code>
include(../../<a href="CppConsoleApplication.htm">ConsoleApplication</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>All.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppCounter.htm">CppCounter</a>/<a href="CppCounter.htm">CppCounter</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppDnaSequence.htm">CppDnaSequence</a>/<a href="CppDnaSequence.htm">CppDnaSequence</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppNewickUtils.htm">CppNewickUtils</a>/<a href="CppNewickUtils.htm">CppNewickUtils</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppPedigree.htm">CppPedigree</a>/<a href="CppPedigree.htm">CppPedigree</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppPhylogenyR.htm">CppPhylogenyR</a>/<a href="CppPhylogenyR.htm">CppPhylogenyR</a>.pri)<br/>
<br/>
include(ToolFisherWrighterConsole.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += <a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolFisherWrighter/ToolFisherWrighterDesktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/ToolFisherWrighterDesktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>NoWeffcpp.pri)<br/>
<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>All.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralDesktop.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Rinside.pri)<br/>
<br/>
#Specific<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppBeast.htm">CppBeast</a>/<a href="CppBeast.htm">CppBeast</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppContainer.htm">CppContainer</a>/<a href="CppContainer.htm">CppContainer</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppCounter.htm">CppCounter</a>/<a href="CppCounter.htm">CppCounter</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppDnaSequence.htm">CppDnaSequence</a>/<a href="CppDnaSequence.htm">CppDnaSequence</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppDnaR.htm">CppDnaR</a>/<a href="CppDnaR.htm">CppDnaR</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppFastaFile.htm">CppFastaFile</a>/<a href="CppFastaFile.htm">CppFastaFile</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a>/<a href="CppFuzzy_equal_to.htm">CppFuzzy_equal_to</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppNewickUtils.htm">CppNewickUtils</a>/<a href="CppNewickUtils.htm">CppNewickUtils</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppPedigree.htm">CppPedigree</a>/<a href="CppPedigree.htm">CppPedigree</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppPhylogenyR.htm">CppPhylogenyR</a>/<a href="CppPhylogenyR.htm">CppPhylogenyR</a>.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppRibiRinside/CppRibiRinside.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppQtBeastDisplay/CppQtBeastDisplay.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppQtNewickDisplay/CppQtNewickDisplay.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppQtDnaSequencesDisplay/CppQtDnaSequencesDisplay.pri)<br/>
include(ToolFisherWrighterDesktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += ../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/ToolFisherWrighterConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/ToolFisherWrighterConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterdna.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterdna_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrightergeneration.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrightergeneration_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterhelper.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterindividual.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterindividual_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterparameters.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterparameters_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrightersimulation.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrightersimulation_test.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrightermenudialog.cpp<br/>
<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterdna.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrightergeneration.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterhelper.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterindividual.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrighterparameters.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrightersimulation.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/fisherwrightermenudialog.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/ToolFisherWrighterDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/ToolFisherWrighterDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/ToolFisherWrighterConsole.pri)<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/qtfisherwrighter<a href="CppMain.htm">main</a>dialog.ui<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/qtfisherwrighter<a href="CppMain.htm">main</a>dialog.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolFisherWrighter/qtfisherwrighter<a href="CppMain.htm">main</a>dialog.h<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterdna.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterdna.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> DNA_H<br/>
<a href="CppDefine.htm">#define</a> DNA_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppRandomH.htm">random</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fw {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Dna<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Put in your own sequence<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Dna(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a>&amp; rnd_engine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; sequence<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Creates random DNA sequence<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Dna(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a>&amp; rnd_engine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length<br/>
&nbsp;&nbsp;) : Dna(mutation_rate,rnd_engine,CreateRandomDna(dna_length,rnd_engine)) {}<br/>
<br/>
&nbsp;&nbsp;Dna CreateOffspring() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetMutationRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_mutation_rate; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a>&amp; GetRndEngine() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_rnd_engine; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; GetSequence() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_sequence; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_mutation_rate;<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a>&amp; m_rnd_engine;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> m_sequence;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be <b><a href="CppStatic.htm">static</a></b>, because <b><a href="CppThis.htm">this</a></b> is used in the <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppChar.htm">char</a></b> CreateRandomBasePair(<a href="CppStdMt19937.htm">std::mt19937</a>&amp; rnd_engine) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppChar.htm">char</a></b> CreateRandomBasePair() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> CreateRandomDna(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Must be <b><a href="CppStatic.htm">static</a></b>, because <b><a href="CppThis.htm">this</a></b> is used in the <a href="CppConstructor.htm">constructor</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdString.htm">std::string</a> CreateRandomDna(<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length,<a href="CppStdMt19937.htm">std::mt19937</a>&amp; rnd_engine) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetRandomFraction() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppComment.htm">///</a>Checks <b><a href="CppIf.htm">if</a></b> different DNA have the same attributes (DNA and mutation rate)<br/>
<a href="CppComment.htm">///</a>This does not take the <a href="CppRandomNumber.htm">random number</a> generator into accoun<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Dna&amp; lhs, <b><a href="CppConst.htm">const</a></b> Dna&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Dna&amp; lhs, <b><a href="CppConst.htm">const</a></b> Dna&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fw<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> DNA_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterdna.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterdna.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrighterdna.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Dna::Dna(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate,<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a>&amp; rnd_engine,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; sequence<br/>
)<br/>
&nbsp;&nbsp;: m_mutation_rate{mutation_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rnd_engine{rnd_engine},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_sequence{sequence}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Dna <a href="CppRibi.htm">ribi</a>::fw::Dna::CreateOffspring() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Go through all nucleotides,<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>overwrite with a random base pair by chance<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>(note: the might result in an A being overwritten by an A)<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> next_sequence{m_sequence};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> sz{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(next_sequence.size())};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>sz; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p{GetRandomFraction()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (p &lt; m_mutation_rate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(i &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(next_sequence.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c{CreateRandomBasePair()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_sequence[i] <a href="CppOperatorAssign.htm">=</a> c;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna offspring(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rnd_engine,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;next_sequence<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> offspring;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppChar.htm">char</a></b> <a href="CppRibi.htm">ribi</a>::fw::Dna::CreateRandomBasePair(<a href="CppStdMt19937.htm">std::mt19937</a>&amp; rnd_engine) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdUniform_int_distribution.htm">std::uniform_int_distribution</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; d(0,3);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> i{d(rnd_engine)};<br/>
&nbsp;&nbsp;<b><a href="CppSwitch.htm">switch</a></b> (i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 0: <b><a href="CppReturn.htm">return</a></b> 'A';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 1: <b><a href="CppReturn.htm">return</a></b> 'C';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 2: <b><a href="CppReturn.htm">return</a></b> 'G';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppCase.htm">case</a></b> 3: <b><a href="CppReturn.htm">return</a></b> 'T';<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>("Dna::CreateRandomBasePair: should not get here");<br/>
}<br/>
<br/>
<b><a href="CppChar.htm">char</a></b> <a href="CppRibi.htm">ribi</a>::fw::Dna::CreateRandomBasePair() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> CreateRandomBasePair(m_rnd_engine);<br/>
}<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fw::Dna::CreateRandomDna(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length,<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a>&amp; rnd_engine<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dna_length <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> s(dna_length,0);<br/>
&nbsp;&nbsp;<a href="CppStdGenerate.htm">std::generate</a>(<a href="CppStdBegin.htm">std::begin</a>(s),<a href="CppStdEnd.htm">std::end</a>(s),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;rnd_engine]() { <b><a href="CppReturn.htm">return</a></b> Dna::CreateRandomBasePair(rnd_engine); }<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fw::Dna::CreateRandomDna(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> CreateRandomDna(dna_length,m_rnd_engine);<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppRibi.htm">ribi</a>::fw::Dna::GetRandomFraction() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Can use <b><a href="CppStatic.htm">static</a></b> here? <a href="CppAdd.htm">Add</a>ed to Dna::Test<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUniform_real_distribution.htm">std::uniform_real_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; d(0.0,1.0);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>The random value x gets drawn here<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f{d(m_rnd_engine)};<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> f;<br/>
}<br/>
<br/>
<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Dna&amp; lhs, <b><a href="CppConst.htm">const</a></b> Dna&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetSequence() <a href="CppOperatorEqual.htm">==</a> rhs.GetSequence() <a href="CppComment.htm">//</a>Sequence first, because that is expected to vary more<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetMutationRate() <a href="CppOperatorEqual.htm">==</a> rhs.GetMutationRate()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Dna&amp; lhs, <b><a href="CppConst.htm">const</a></b> Dna&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterdna_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterdna_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrighterdna.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::Dna::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Do distributions change when being worked on?<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUniform_real_distribution.htm">std::uniform_real_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; a(0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdUniform_real_distribution.htm">std::uniform_real_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; b(0.0,1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x{a(rnd_engine)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorLessEqual.htm">&lt;=</a> 1.0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create random DNA<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{3};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna(mutation_rate,rnd_engine,dna_length);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dna_length <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(dna.GetSequence().size()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{100};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna1(mutation_rate,rnd_engine1,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna2(mutation_rate,rnd_engine2,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dna1 <a href="CppOperatorEqual.htm">==</a> dna2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{69};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{100};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna1(mutation_rate,rnd_engine1,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna2(mutation_rate,rnd_engine2,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dna1 <a href="CppOperatorNotEqual.htm">!=</a> dna2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateOffspring with equal RNGs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{100};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna1(mutation_rate,rnd_engine1,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna2(mutation_rate,rnd_engine2,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna kid1{dna1.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna kid2{dna2.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid1 <a href="CppOperatorEqual.htm">==</a> kid2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna kid3{kid1.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna kid4{kid2.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid3 <a href="CppOperatorEqual.htm">==</a> kid4);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateOffspring with different RNGs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{69};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{100};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna1(mutation_rate,rnd_engine1,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna2(mutation_rate,rnd_engine2,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna kid1{dna1.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna kid2{dna2.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid1 <a href="CppOperatorNotEqual.htm">!=</a> kid2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetRandomFraction of DNA with same RNGs should be identical<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{100};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna1(mutation_rate,rnd_engine1,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna2(mutation_rate,rnd_engine2,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f1{dna1.GetRandomFraction()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f2{dna2.GetRandomFraction()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f1 <a href="CppOperatorEqual.htm">==</a> f2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetRandomFraction of offspring DNA with same RNGs should be identical<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{100};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna1(mutation_rate,rnd_engine1,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna2(mutation_rate,rnd_engine2,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna kid1{dna1.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna kid2{dna2.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid1 <a href="CppOperatorEqual.htm">==</a> kid2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f1{kid1.GetRandomFraction()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f2{kid2.GetRandomFraction()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(f1 <a href="CppOperatorEqual.htm">==</a> f2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateRandomBasepair<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.9};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{100};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna1(mutation_rate,rnd_engine1,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Dna dna2(mutation_rate,rnd_engine2,dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>100; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> c{dna1.CreateRandomBasePair()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppChar.htm">char</a></b> d{dna2.CreateRandomBasePair()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(c <a href="CppOperatorEqual.htm">==</a> d);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrightergeneration.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrightergeneration.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> GENERATION_H<br/>
<a href="CppDefine.htm">#define</a> GENERATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterindividual.h"<br/>
<a href="CppInclude.htm">#include</a> "dnasequence.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fw {<br/>
<br/>
<a href="CppComment.htm">//</a>Just a collection of Individuals<br/>
<b><a href="CppStruct.htm">struct</a></b> Generation<br/>
{<br/>
&nbsp;&nbsp;Generation(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt;&amp; individuals);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppBool.htm">bool</a></b> empty() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_individuals.empty(); }<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt;&amp; GetIndividuals() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_individuals; }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt;&amp; GetIndividuals() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_individuals; }<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt; GetSequences() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt;::<b><a href="CppSize_t.htm">size_t</a></b>ype size() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_individuals.size(); }<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual&amp; <b><a href="CppOperator.htm">operator</a></b>[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;Individual&amp; <b><a href="CppOperator.htm">operator</a></b>[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt; m_individuals;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Generation&amp; lhs, <b><a href="CppConst.htm">const</a></b> Generation&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fw<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> GENERATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrightergeneration.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrightergeneration.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrightergeneration.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Generation::Generation(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt;&amp; individuals)<br/>
&nbsp;&nbsp;: m_individuals{individuals}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt; <a href="CppRibi.htm">ribi</a>::fw::Generation::GetSequences() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt; alignments;<br/>
&nbsp;&nbsp;<a href="CppStdTransform.htm">std::transform</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(m_individuals),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(m_individuals),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(alignments),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[](<b><a href="CppConst.htm">const</a></b> Individual&amp; i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> description <a href="CppOperatorAssign.htm">=</a> <a href="CppStdTo_string.htm">std::to_string</a>(i.GetIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppStdStoi.htm">std::stoi</a>(description) <a href="CppOperatorEqual.htm">==</a> i.GetIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::DnaSequence(description,i.GetDna().GetSequence());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> alignments;<br/>
}<br/>
<br/>
<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::fw::Individual&amp; <a href="CppRibi.htm">ribi</a>::fw::Generation::<b><a href="CppOperator.htm">operator</a></b>[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_individuals.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_individuals[index];<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Individual&amp; <a href="CppRibi.htm">ribi</a>::fw::Generation::<b><a href="CppOperator.htm">operator</a></b>[](<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_individuals.size()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_individuals[index];<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Generation&amp; lhs, <b><a href="CppConst.htm">const</a></b> Generation&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;lhs.GetIndividuals() <a href="CppOperatorEqual.htm">==</a> rhs.GetIndividuals()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrightergeneration_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrightergeneration_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrightergeneration.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::Generation::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested {<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b> on empty vector<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt; v;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt; w;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Generation a(v);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Generation b(w);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterhelper.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterhelper.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> HELPER_H<br/>
<a href="CppDefine.htm">#define</a> HELPER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppMapH.htm">map</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fw {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Helper<br/>
{<br/>
&nbsp;&nbsp;Helper() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppContainer.htm">Container</a>ToStr(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; s, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator <a href="CppOperatorAssign.htm">=</a> " ") <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt; CreateSortedTally(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> CreateTally(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetFileBasename.htm">GetFileBasename</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> <a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>(filename); }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Most concise<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Can deal with <a href="CppWindows.htm">Windows</a> filenames as well<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> <a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fw<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> HELPER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterhelper.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterhelper.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrighterhelper.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/filesystem.hpp&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppBoostXpressive.htm">xpressive</a>/<a href="CppBoostXpressive.htm">xpressive</a>.hpp&gt;<br/>
<br/>
<b><a href="CppTemplate.htm">template</a></b> &lt;<b><a href="CppClass.htm">class</a></b> <a href="CppContainer.htm">Container</a>&gt;<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppContainer.htm">Container</a>ToStrImpl(<b><a href="CppConst.htm">const</a></b> <a href="CppContainer.htm">Container</a>&amp; c, <b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;<a href="CppStdCopy.htm">std::copy</a>(c.begin(),c.end(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdOstream_iterator.htm">std::ostream_iterator</a>&lt;<b><a href="CppTypename.htm">typename</a></b> <a href="CppContainer.htm">Container</a>::value_type&gt;(s,seperator.c_str()));<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> s.str();<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Helper::Helper() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fw::Helper::<a href="CppContainer.htm">Container</a>ToStr(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; s,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; seperator<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppContainer.htm">Container</a>ToStrImpl(s,seperator);<br/>
}<br/>
<br/>
<br/>
<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt; <a href="CppRibi.htm">ribi</a>::fw::Helper::CreateSortedTally(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdMap.htm">std::map</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b>&gt; m;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m.find(s) <a href="CppOperatorEqual.htm">==</a> m.end())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m[s] <a href="CppOperatorAssign.htm">=</a> 1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m[s];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> <a href="CppRibi.htm">ribi</a>::fw::Helper::CreateTally(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; v<br/>
) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> w;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; s: v)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> iter <a href="CppOperatorAssign.htm">=</a> <a href="CppStdFind_if.htm">std::find_if</a>(<a href="CppStdBegin.htm">std::begin</a>(w),<a href="CppStdEnd.htm">std::end</a>(w),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[s](<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; p) { <b><a href="CppReturn.htm">return</a></b> p.first <a href="CppOperatorEqual.htm">==</a> s; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (iter <a href="CppOperatorEqual.htm">==</a> <a href="CppStdEnd.htm">std::end</a>(w))<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w.push_back(<a href="CppStdMake_pair.htm">std::make_pair</a>(s,1));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>((*iter).second);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> w;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fw::Helper::<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppBoostFilesystem.htm">boost::filesystem</a>::basename(filename);<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fw::Helper::<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename) <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a> rex<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> <a href="CppBoostXpressive.htm">boost::xpressive</a>::s<a href="CppRegex.htm">regex</a>::<a href="CppCompile.htm">compile</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"((.*)(/|\\\\))?([0-9A-Za-z_]*)((\\.)([A-Za-z]*))?" );<br/>
&nbsp;&nbsp;<a href="CppBoostXpressive.htm">boost::xpressive</a>::smatch what;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b>( <a href="CppBoostXpressive.htm">boost::xpressive</a>::<a href="CppRegex.htm">regex</a>_match( filename, what, rex ) )<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> what[4];<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "";<br/>
}<br/>
<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::Helper::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested {<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateTally<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "A"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m{Helper().CreateTally(v)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[0].first <a href="CppOperatorEqual.htm">==</a> "A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[0].second <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "A", "A" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m{Helper().CreateTally(v)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[0].first <a href="CppOperatorEqual.htm">==</a> "A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[0].second <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "A", "B" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m{Helper().CreateTally(v)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[0].first <a href="CppOperatorEqual.htm">==</a> "A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[0].second <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[1].first <a href="CppOperatorEqual.htm">==</a> "B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[1].second <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; v <a href="CppOperatorAssign.htm">=</a> { "B", "A", "B" };<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdPair.htm">std::pair</a>&lt;<a href="CppStdString.htm">std::string</a>,<b><a href="CppInt.htm">int</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a> m{Helper().CreateTally(v)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m.size() <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[0].first <a href="CppOperatorEqual.htm">==</a> "B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[0].second <a href="CppOperatorEqual.htm">==</a> 2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[1].first <a href="CppOperatorEqual.htm">==</a> "A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m[1].second <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("test_output.fas") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("test_output"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("test_output_0.fas") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("test_output_0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a>Filesystem("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>(""));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("test_output.fas") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("test_output"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("test_output_0.fas") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("test_output_0"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("MyFolder/MyFolder/tmp") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("MyFolder/MyFolder/tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(Helper().<a href="CppGetFileBasename.htm">GetFileBasename</a><a href="CppBoost.htm">Boost</a><a href="CppBoostXpressive.htm">Xpressive</a>("MyFolder/MyFolder\\tmp.txt") <a href="CppOperatorEqual.htm">==</a> <a href="CppStdString.htm">std::string</a>("tmp"));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>ShowPhylogeny<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterindividual.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterindividual.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> INDIVIDUAL_H<br/>
<a href="CppDefine.htm">#define</a> INDIVIDUAL_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppRandomH.htm">random</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterdna.h"<br/>
<a href="CppInclude.htm">#include</a> "pedigree.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> { <b><a href="CppStruct.htm">struct</a></b> <a href="CppCounter.htm">Counter</a>; }<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fw {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Individual<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pedigree can only be created by parent <b><a href="CppUsing.htm">using</a></b> CreateOffspring<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateOffspring creates a <a href="CppStdShared_ptr.htm">std::shared_ptr</a><br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Must use <a href="CppStdShared_ptr.htm">std::shared_ptr</a>, due to use of <a href="CppStdWeak_ptr.htm">std::weak_ptr</a><br/>
&nbsp;&nbsp;Individual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna&amp; dna,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Pedigree&gt;&amp; pedigree,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a>&amp; <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;Individual CreateOffspring(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name <a href="CppOperatorAssign.htm">=</a> "") <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna&amp; GetDna() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dna; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetIndex() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_index; }<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Pedigree&gt; GetPedigree() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_pedigree; }<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Pedigree&gt; GetPedigree() <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_pedigree; }<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a>&amp; m_<a href="CppCounter.htm">counter</a>;<br/>
<br/>
&nbsp;&nbsp;Dna m_dna; <a href="CppComment.htm">//</a>Non-<b><a href="CppConst.htm">const</a></b>, because RNG is passed on<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppOperatorDivide.htm">/</a> Unique index as <b><a href="CppLong.htm">long</a></b> as there are less than (2^32)/2 Individuals<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_index;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Pedigree&gt; m_pedigree;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<br/>
<a href="CppComment.htm">///</a>Checks <b><a href="CppIf.htm">if</a></b> different individuals have the same attributes (e.g. DNA)<br/>
<a href="CppComment.htm">///</a>This does not take the index of the Individuals into account, as<br/>
<a href="CppComment.htm">///</a>these are all (semi)unique<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs, <b><a href="CppConst.htm">const</a></b> Individual&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs, <b><a href="CppConst.htm">const</a></b> Individual&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fw<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> INDIVIDUAL_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterindividual.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterindividual.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrighterindividual.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppCounter.htm">counter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterdna.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterparameters.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Individual::Individual(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna&amp; dna,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Pedigree&gt;&amp; pedigree,<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a>&amp; <a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;: m_<a href="CppCounter.htm">counter</a>{<a href="CppCounter.htm">counter</a>},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dna{dna},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_index{<a href="CppCounter.htm">counter</a>.Get()}, <a href="CppComment.htm">//</a>Use the previous value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pedigree{pedigree}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_pedigree);<br/>
<br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a><a href="CppCounter.htm">counter</a>;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Individual <a href="CppRibi.htm">ribi</a>::fw::Individual::CreateOffspring(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;Individual kid(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dna.CreateOffspring(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pedigree-&gt;CreateOffspring(name),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (name.empty())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> index <a href="CppOperatorAssign.htm">=</a> kid.GetIndex();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (index <a href="CppOperatorNotEqual.htm">!=</a> 0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name <a href="CppOperatorPlusAssign.htm">+=</a> <a href="CppStdString.htm">std::string</a>(1,'A' <a href="CppOperatorPlus.htm">+</a> (index <a href="CppOperatorModulus.htm">%</a> 26));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index <a href="CppOperatorDivideAssign.htm">/=</a> 26;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;kid.SetName(name);<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> kid;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::Individual::SetName(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; name) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;m_pedigree-&gt;SetName(name);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs, <b><a href="CppConst.htm">const</a></b> Individual&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> lhs.GetDna() <a href="CppOperatorEqual.htm">==</a> rhs.GetDna();<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Individual&amp; lhs, <b><a href="CppConst.htm">const</a></b> Individual&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterindividual_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterindividual_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrighterindividual.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppCounter.htm">counter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "dnasequence.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterdna.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterparameters.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::Individual::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested {<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> <a href="CppRibi.htm">ribi</a>::DnaSequence;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate1{0.123};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate2{0.123};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DnaSequence sequence1("description","ACGTACGTACGT");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DnaSequence sequence2("description","ACGTACGTACGT");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mutation_rate1 <a href="CppOperatorEqual.htm">==</a> mutation_rate2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rnd_engine1 <a href="CppOperatorEqual.htm">==</a> rnd_engine2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sequence1 <a href="CppOperatorEqual.htm">==</a> sequence2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna1(mutation_rate1,rnd_engine1,sequence1.GetSequence());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna2(mutation_rate2,rnd_engine2,sequence2.GetSequence());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pedigree1 <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pedigree2 <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dna1 <a href="CppOperatorEqual.htm">==</a> dna2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*pedigree1 <a href="CppOperatorEqual.htm">==</a> *pedigree2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sequence1 <a href="CppOperatorEqual.htm">==</a> sequence2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCounter.htm">counter</a>1 <a href="CppOperatorEqual.htm">==</a> <a href="CppCounter.htm">counter</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual a(dna1,pedigree1,<a href="CppCounter.htm">counter</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual b(dna2,pedigree2,<a href="CppCounter.htm">counter</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a <a href="CppOperatorEqual.htm">==</a> b);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>GetIndex<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.123};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna(mutation_rate,rnd_engine,"ACGTACGTACGT");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pedigree <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual a(dna,pedigree,<a href="CppCounter.htm">counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual b(dna,pedigree,<a href="CppCounter.htm">counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.GetIndex() <a href="CppOperatorEqual.htm">==</a> a.GetIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(b.GetIndex() <a href="CppOperatorEqual.htm">==</a> b.GetIndex());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(a.GetIndex() <a href="CppOperatorNotEqual.htm">!=</a> b.GetIndex());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{10000};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{100};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.0};<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(dna_length,mutation_rate,n_generations,1,42);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Pedigree can be formed, 1 kid<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;Pedigree&gt; parent_pedigree{Pedigree::Create("X")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual parent(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dna(mutation_rate,rnd_engine,dna_length),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent_pedigree,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual kid{parent.CreateOffspring("A")};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid.GetPedigree()-&gt;GetParent().lock());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid.GetPedigree()-&gt;GetParent().lock() <a href="CppOperatorEqual.htm">==</a> parent_pedigree);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parent_pedigree-&gt;To<a href="CppNewick.htm">Newick</a>() <a href="CppOperatorEqual.htm">==</a> kid.GetPedigree()-&gt;GetParent().lock()-&gt;To<a href="CppNewick.htm">Newick</a>());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>-A<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>X<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>-B<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> root_pedigree <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual root(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dna(mutation_rate,rnd_engine,dna_length),root_pedigree,<a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual a{root.CreateOffspring("A")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual b{root.CreateOffspring("B")};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> expected{"(A:1,B:1);"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> found{root.GetPedigree()-&gt;To<a href="CppNewick.htm">Newick</a>()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (found <a href="CppOperatorNotEqual.htm">!=</a> expected) { <a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> found <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(found <a href="CppOperatorEqual.htm">==</a> expected);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Three branches of <b><a href="CppShort.htm">short</a></b> length<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>-C<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>-A<br/>
&nbsp;&nbsp;&nbsp;&nbsp; | |<br/>
&nbsp;&nbsp; <a href="CppOperatorDecrement.htm">--</a>X <a href="CppOperatorPlus.htm">+</a>-D<br/>
&nbsp;&nbsp;&nbsp;&nbsp; |<br/>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppOperatorPlus.htm">+</a>-B-E<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> root_pedigree <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual root(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dna(mutation_rate,rnd_engine,dna_length),root_pedigree,<a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> a <a href="CppOperatorAssign.htm">=</a> root.CreateOffspring("A");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppAuto.htm">auto</a></b> b <a href="CppOperatorAssign.htm">=</a> root.CreateOffspring("B");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> c <a href="CppOperatorAssign.htm">=</a> a.CreateOffspring("C");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> d <a href="CppOperatorAssign.htm">=</a> a.CreateOffspring("D");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> e <a href="CppOperatorAssign.htm">=</a> b.CreateOffspring("E");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> expected{"((C:1,D:1):1,E:2);"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> found{root.GetPedigree()-&gt;To<a href="CppNewick.htm">Newick</a>()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (found <a href="CppOperatorNotEqual.htm">!=</a> expected) { <a href="CppStdCerr.htm">std::cerr</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> found <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(found <a href="CppOperatorEqual.htm">==</a> expected);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateOffspring with same RNGs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate1{0.123};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate2{0.123};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DnaSequence sequence1("description","ACGTACGTACGT");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DnaSequence sequence2("description","ACGTACGTACGT");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mutation_rate1 <a href="CppOperatorEqual.htm">==</a> mutation_rate2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rnd_engine1 <a href="CppOperatorEqual.htm">==</a> rnd_engine2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sequence1 <a href="CppOperatorEqual.htm">==</a> sequence2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna1(mutation_rate1,rnd_engine1,sequence1.GetSequence());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna2(mutation_rate2,rnd_engine2,sequence2.GetSequence());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pedigree1 <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pedigree2 <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dna1 <a href="CppOperatorEqual.htm">==</a> dna2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*pedigree1 <a href="CppOperatorEqual.htm">==</a> *pedigree2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sequence1 <a href="CppOperatorEqual.htm">==</a> sequence2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCounter.htm">counter</a>1 <a href="CppOperatorEqual.htm">==</a> <a href="CppCounter.htm">counter</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual parent1(dna1,pedigree1,<a href="CppCounter.htm">counter</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual parent2(dna2,pedigree2,<a href="CppCounter.htm">counter</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parent1 <a href="CppOperatorEqual.htm">==</a> parent2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual kid1{parent1.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual kid2{parent2.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid1 <a href="CppOperatorEqual.htm">==</a> kid2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual kid3{kid1.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual kid4{kid2.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid3 <a href="CppOperatorEqual.htm">==</a> kid4);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>CreateOffspring with different RNGs<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate1{0.123};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate2{0.123};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine2{69};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DnaSequence sequence1("description","ACGTACGTACGT");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> DnaSequence sequence2("description","ACGTACGTACGT");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(mutation_rate1 <a href="CppOperatorEqual.htm">==</a> mutation_rate2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(rnd_engine1 <a href="CppOperatorNotEqual.htm">!=</a> rnd_engine2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sequence1 <a href="CppOperatorEqual.htm">==</a> sequence2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna1(mutation_rate1,rnd_engine1,sequence1.GetSequence());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Dna dna2(mutation_rate2,rnd_engine2,sequence2.GetSequence());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pedigree1 <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> pedigree2 <a href="CppOperatorAssign.htm">=</a> Pedigree::Create("X");<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(dna1 <a href="CppOperatorEqual.htm">==</a> dna2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(*pedigree1 <a href="CppOperatorEqual.htm">==</a> *pedigree2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(sequence1 <a href="CppOperatorEqual.htm">==</a> sequence2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(<a href="CppCounter.htm">counter</a>1 <a href="CppOperatorEqual.htm">==</a> <a href="CppCounter.htm">counter</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual parent1(dna1,pedigree1,<a href="CppCounter.htm">counter</a>1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual parent2(dna2,pedigree2,<a href="CppCounter.htm">counter</a>2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parent1 <a href="CppOperatorEqual.htm">==</a> parent2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual kid1{parent1.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual kid2{parent2.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid1 <a href="CppOperatorNotEqual.htm">!=</a> kid2);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrightermenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrightermenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> FISHERWRIGHTERMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> FISHERWRIGHTERMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> "menudialog.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fw {<br/>
<br/>
<a href="CppComment.htm">///</a>GUI independent FisherWrighter menu dialog<br/>
<b><a href="CppStruct.htm">struct</a></b> MenuDialog <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> ::<a href="CppRibi.htm">ribi</a>::MenuDialog<br/>
{<br/>
&nbsp;&nbsp;MenuDialog();<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;Help GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fw<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> FISHERWRIGHTERMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrightermenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrightermenudialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrightermenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppContainer.htm">container</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRichelBilderbeekProgram.htm">richelbilderbeekprogram</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "beast.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppCounter.htm">counter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "dna_r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_rinside.h"<br/>
<a href="CppInclude.htm">#include</a> "phylogeny_r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppNewick.htm">newick</a>utils.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::MenuDialog::MenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::fw::MenuDialog::ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"TODO");<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::fw::MenuDialog::GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"FisherWrighter",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"does a Fisher-Wright simulation",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"on the 13th of June 2015",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-2015",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>FisherWrighter.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("BeastR <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRibi.htm">ribi</a>::Beast().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppContainer.htm">Container</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRibi.htm">ribi</a>::<a href="CppContainer.htm">Container</a>().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppCounter.htm">Counter</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a>().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("DnaR <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRibi.htm">ribi</a>::DnaR().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppFileIo.htm">FileIo</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a>().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppNewick.htm">Newick</a>Utils <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRibi.htm">ribi</a>::<a href="CppNewick.htm">Newick</a>Utils().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("PhylogenyR <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRibi.htm">ribi</a>::PhylogenyR().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Rinside <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppRibi.htm">ribi</a>::Rinside().Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppTrace.htm">Trace</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppTrace.htm">Trace</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Help <a href="CppRibi.htm">ribi</a>::fw::MenuDialog::GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::Help(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileTitle(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileDescription(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; <a href="CppRibi.htm">ribi</a>::fw::MenuDialog::GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ProgramFisherWrighter<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fw::MenuDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::fw::MenuDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-06-13: <a href="CppVersion.htm">version</a> 1.0: started <a href="CppVersion.htm">version</a>ing",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::MenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;MenuDialog().GetAbout();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterparameters.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterparameters.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> PARAMETERS_H<br/>
<a href="CppDefine.htm">#define</a> PARAMETERS_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fw {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Parameters<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Factory <a href="CppMemberFunction.htm">member function</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> Parameters CreateParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create parameters from scratch<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetDnaLength() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_dna_length; }<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> GetMutationRate() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_mutation_rate; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetNumberOfGenerations() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_n_generations; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetPopSize() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_pop_size; }<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetSeed() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_seed; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_dna_length;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> m_mutation_rate;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_n_generations;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_pop_size;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> m_seed;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fw<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> PARAMETERS_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterparameters.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterparameters.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrighterparameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStdexceptH.htm">stdexcept</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Parameters::Parameters(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed<br/>
)<br/>
&nbsp;&nbsp;:<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_dna_length{dna_length},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_mutation_rate{mutation_rate},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_n_generations{n_generations},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_pop_size{pop_size},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_seed{seed}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_dna_length &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Parameters::Parameters: DNA length must be positive, DNA length given: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_dna_length<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_n_generations &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Parameters::Parameters: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "number of generations must be positive, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "number of generations supplied: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_n_generations<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_pop_size &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Parameters::Parameters: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "population size must be positive, "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "population size supplied: "<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> m_pop_size<br/>
&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_seed &lt; 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdStringstream.htm">std::stringstream</a> s;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;s <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Parameters::Parameters: cannot create Parameters with seed &lt; 0";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThrow.htm">throw</a></b> <a href="CppStdLogic_error.htm">std::logic_error</a>(s.str().c_str());<br/>
&nbsp;&nbsp;}<br/>
<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Parameters <a href="CppRibi.htm">ribi</a>::fw::Parameters::CreateParameters(<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a>&amp; filename)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> dna_length_str{""};<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> dna_length{0};<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> mutation_rate_str{""};<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> mutation_rate{0.0};<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> n_generations_str{""};<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> n_generations{0};<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> pop_size_str{""};<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> pop_size{0};<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> seed_str{""};<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> seed{0};<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdIfstream.htm">std::ifstream</a> f(filename.c_str());<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>TODO: <a href="CppAdd.htm">Add</a> safety is file has wrong format<br/>
&nbsp;&nbsp;f<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> dna_length_str <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> dna_length<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> mutation_rate_str <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> mutation_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> n_generations_str <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> n_generations<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> pop_size_str <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> pop_size<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamIn.htm">&gt;&gt;</a> seed_str <a href="CppOperatorStreamIn.htm">&gt;&gt;</a> seed<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seed<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> parameters;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdOstream.htm">std::ostream</a>&amp; <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorStreamOut.htm">operator&lt;&lt;</a></b>(<a href="CppStdOstream.htm">std::ostream</a>&amp; os, <b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters)<br/>
{<br/>
&nbsp;&nbsp;os<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "dna_length " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetDnaLength() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "mutation_rate " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetMutationRate() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "n_generations " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetNumberOfGenerations() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "pop_size " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetPopSize() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "seed " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> parameters.GetSeed() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n'<br/>
&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> os;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetDnaLength() <a href="CppOperatorEqual.htm">==</a> rhs.GetDnaLength()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetMutationRate() <a href="CppOperatorEqual.htm">==</a> rhs.GetMutationRate()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetNumberOfGenerations() <a href="CppOperatorEqual.htm">==</a> rhs.GetNumberOfGenerations()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetPopSize() <a href="CppOperatorEqual.htm">==</a> rhs.GetPopSize()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetSeed() <a href="CppOperatorEqual.htm">==</a> rhs.GetSeed()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Parameters&amp; lhs, <b><a href="CppConst.htm">const</a></b> Parameters&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrighterparameters_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrighterparameters_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrighterparameters.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::Parameters::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested {<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Test recovery of parameters<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{3495};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.34758};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{63223};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{2376};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{234};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetDnaLength() <a href="CppOperatorEqual.htm">==</a> dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetMutationRate() <a href="CppOperatorEqual.htm">==</a> mutation_rate);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetNumberOfGenerations() <a href="CppOperatorEqual.htm">==</a> n_generations);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetPopSize() <a href="CppOperatorEqual.htm">==</a> pop_size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetSeed() <a href="CppOperatorEqual.htm">==</a> seed);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{345};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.34758};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{63223};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{2376};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{43};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters original(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename{"tmp.txt"};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{ <a href="CppStdOfstream.htm">std::ofstream</a> f(filename.c_str()); f <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> original; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(Parameters::CreateParameters(filename));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetDnaLength() <a href="CppOperatorEqual.htm">==</a> dna_length);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetMutationRate() <a href="CppOperatorEqual.htm">==</a> mutation_rate);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetNumberOfGenerations() <a href="CppOperatorEqual.htm">==</a> n_generations);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetPopSize() <a href="CppOperatorEqual.htm">==</a> pop_size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p.GetSeed() <a href="CppOperatorEqual.htm">==</a> seed);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorEqual.htm">operator==</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{3495};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.34758};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{63223};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{2376};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{234};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters q(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorEqual.htm">==</a> q);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppOperatorNotEqual.htm">operator!=</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{3495};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.34758};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{63223};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{2376};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{234};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters q(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed <a href="CppOperatorPlus.htm">+</a> 1<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p <a href="CppOperatorNotEqual.htm">!=</a> q);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrightersimulation.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrightersimulation.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SIMULATION_H<br/>
<a href="CppDefine.htm">#define</a> SIMULATION_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppRandomH.htm">random</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppCounter.htm">counter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrightergeneration.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterindividual.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterparameters.h"<br/>
<a href="CppInclude.htm">#include</a> "dnasequence.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fw {<br/>
<br/>
<a href="CppComment.htm">///</a>Fisher-Wright simulation<br/>
<a href="CppComment.htm">///</a>with individuals that only have DNA<br/>
<b><a href="CppStruct.htm">struct</a></b> Simulation<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Use randomly created individuals<br/>
&nbsp;&nbsp;Simulation(<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters);<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> GetPedigree() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Obtain the sequences of the current (most recent) simulation<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Equivalent to simulation.GetGenerations().back().GetSequences()<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt; GetCurrentSequences() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Generation&gt;&amp; GetGenerations() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_generations; }<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; GetParameters() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> { <b><a href="CppReturn.htm">return</a></b> m_parameters; }<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Go to the next generation<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> NextGeneration() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> m_<a href="CppCounter.htm">counter</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Generation&gt; m_generations;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters m_parameters;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/<a href="CppRandomNumber.htm">Random number</a> generator engine<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> m_rnd_engine;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Put in your own individuals<br/>
&nbsp;&nbsp;Simulation(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Generation&amp; generation<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Create initial population of individuals with random DNA sequences<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Non-<b><a href="CppConst.htm">const</a></b>, because <a href="CppRandomNumber.htm">random numbers</a> are used<br/>
&nbsp;&nbsp;Generation CreateNextGeneration(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Generation&amp; current_generation<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;Parameters&gt; CreateTestParameters() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Simulation&amp; lhs, <b><a href="CppConst.htm">const</a></b> Simulation&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<b><a href="CppBool.htm">bool</a></b> <b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Simulation&amp; lhs, <b><a href="CppConst.htm">const</a></b> Simulation&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fw<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SIMULATION_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrightersimulation.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrightersimulation.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrightersimulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppAlgorithmH.htm">algorithm</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIteratorH.htm">iterator</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/numeric/conversion/cast.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterdna.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterindividual.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Simulation::Simulation(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Generation&amp; first_generation<br/>
)<br/>
&nbsp;&nbsp;: m_<a href="CppCounter.htm">counter</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_generations{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rnd_engine{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;(parameters.GetSeed())}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;m_generations.push_back(first_generation);<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Simulation::Simulation(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters&amp; parameters<br/>
)<br/>
&nbsp;&nbsp;: m_<a href="CppCounter.htm">counter</a>{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_generations{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_parameters{parameters},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rnd_engine{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppUnsigned.htm">unsigned</a></b> <b><a href="CppInt.htm">int</a></b>&gt;(parameters.GetSeed())}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create parameters.GetPopSize() individuals<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a> with DNA length of parameters.GetDnaLength()<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt; v;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{parameters.GetDnaLength()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{parameters.GetMutationRate()};<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a>&amp; rnd_engine{m_rnd_engine};<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a>&amp; <a href="CppCounter.htm">counter</a>{m_<a href="CppCounter.htm">counter</a>};<br/>
&nbsp;&nbsp;<a href="CppStdGenerate_n.htm">std::generate_n</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBack_inserter.htm">std::back_inserter</a>(v),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;parameters.GetPopSize(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;[&amp;<a href="CppCounter.htm">counter</a>,dna_length,mutation_rate,&amp;rnd_engine]()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> Individual(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dna(mutation_rate,rnd_engine,dna_length),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pedigree::Create(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppCounter.htm">counter</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Generation first_generation(v);<br/>
<br/>
&nbsp;&nbsp;m_generations.push_back(first_generation);<br/>
}<br/>
<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::Generation <a href="CppRibi.htm">ribi</a>::fw::Simulation::CreateNextGeneration(<br/>
&nbsp;&nbsp;Generation&amp; current_generation<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt; individuals;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n{m_parameters.GetPopSize()};<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdUniform_int_distribution.htm">std::uniform_int_distribution</a>&lt;<b><a href="CppInt.htm">int</a></b>&gt; d(0,n-1); <a href="CppComment.htm">//</a>-1 because uniform_int_distribution uses symmetric range<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> index{d(m_rnd_engine)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(index &lt; <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(current_generation.size()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Individual&amp; parent{current_generation[index]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual kid{parent.CreateOffspring()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;individuals.push_back(kid);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Generation next_generation(individuals);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> next_generation;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::fw::Parameters&gt; <a href="CppRibi.htm">ribi</a>::fw::Simulation::CreateTestParameters() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Parameters&gt; v;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>0: shortest interesting simulation<br/>
&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,&nbsp;&nbsp; <a href="CppComment.htm">//</a>dna_length<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, <a href="CppComment.htm">//</a>mutation_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,&nbsp;&nbsp; <a href="CppComment.htm">//</a>n_generations<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,&nbsp;&nbsp; <a href="CppComment.htm">//</a>pop_size<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp; <a href="CppComment.htm">//</a>seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Bash at simulation by adding zero-length parameters<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>8; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &amp; 1, <a href="CppComment.htm">//</a>dna_length<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,&nbsp;&nbsp; <a href="CppComment.htm">//</a>mutation_rate<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &amp; 2, <a href="CppComment.htm">//</a>n_generations<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i &amp; 4, <a href="CppComment.htm">//</a>pop_size<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp; <a href="CppComment.htm">//</a>seed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt; <a href="CppRibi.htm">ribi</a>::fw::Simulation::GetCurrentSequences() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> GetGenerations().back().GetSequences();<br/>
}<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::fw::Simulation::GetPedigree() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Take the first individual from the first generation<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;m_generations.empty()) <b><a href="CppReturn.htm">return</a></b> "";<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<b><a href="CppThis.htm">this</a></b>-&gt;m_generations.back().empty()) <b><a href="CppReturn.htm">return</a></b> "";<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Pedigree&gt; pedigree <a href="CppOperatorAssign.htm">=</a> m_generations.back().GetIndividuals()[0].GetPedigree();<br/>
&nbsp;&nbsp;<b><a href="CppWhile.htm">while</a></b> (1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdShared_ptr.htm">std::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Pedigree&gt; parent <a href="CppOperatorAssign.htm">=</a> pedigree-&gt;GetParent().lock();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!parent) <b><a href="CppBreak.htm">break</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pedigree <a href="CppOperatorAssign.htm">=</a> parent;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> pedigree-&gt;To<a href="CppNewick.htm">Newick</a>();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::Simulation::NextGeneration() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_generations.empty());<br/>
&nbsp;&nbsp;m_generations.push_back(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;CreateNextGeneration(m_generations.back())<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorEqual.htm">operator==</a></b>(<b><a href="CppConst.htm">const</a></b> Simulation&amp; lhs, <b><a href="CppConst.htm">const</a></b> Simulation&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lhs.GetParameters() <a href="CppOperatorEqual.htm">==</a> rhs.GetParameters()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> lhs.GetGenerations() <a href="CppOperatorEqual.htm">==</a> rhs.GetGenerations()<br/>
&nbsp;&nbsp;;<br/>
}<br/>
<br/>
<b><a href="CppBool.htm">bool</a></b> <a href="CppRibi.htm">ribi</a>::fw::<b><a href="CppOperatorNotEqual.htm">operator!=</a></b>(<b><a href="CppConst.htm">const</a></b> Simulation&amp; lhs, <b><a href="CppConst.htm">const</a></b> Simulation&amp; rhs) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> !(lhs <a href="CppOperatorEqual.htm">==</a> rhs);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/fisherwrightersimulation_test.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/fisherwrightersimulation_test.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "fisherwrightersimulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::Simulation::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppFalse.htm">false</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If <a href="CppRandomNumber.htm">random number</a> generator seed is equal, simulations should yield equal results<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.5};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(dna_length,mutation_rate,n_generations,pop_size,seed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation s(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation t(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parent1 <a href="CppOperatorAssign.htm">=</a> s.GetGenerations().front().GetIndividuals()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parent2 <a href="CppOperatorAssign.htm">=</a> t.GetGenerations().front().GetIndividuals()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parent1 <a href="CppOperatorEqual.htm">==</a> parent2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parent1.GetDna() <a href="CppOperatorEqual.htm">==</a> parent2.GetDna());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parent1.GetDna().GetSequence() <a href="CppOperatorEqual.htm">==</a> parent2.GetDna().GetSequence());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=1; i<a href="CppOperatorNotEqual.htm">!=</a>n_generations; <a href="CppOperatorIncrement.htm">++</a>i) <a href="CppComment.htm">//</a>Start at 1, because initial generation is already present<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.NextGeneration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.NextGeneration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{10};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{10};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{10};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed1{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed2{35};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(dna_length,mutation_rate,n_generations,pop_size,seed1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters q(dna_length,mutation_rate,n_generations,pop_size,seed2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation s(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation t(q);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_generations; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s.NextGeneration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.NextGeneration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorNotEqual.htm">!=</a> t);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> rnd_engine;<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> parameters: CreateTestParameters())<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Run simulation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation simulation(parameters);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{parameters.GetNumberOfGenerations()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_generations; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.NextGeneration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Sample the alignments<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppRibi.htm">ribi</a>::DnaSequence&gt; alignments{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;simulation.GetCurrentSequences()<br/>
&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(parameters.GetPopSize() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(alignments.size()));<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>If mutation rate is zero, a population of one individuals remains the same<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{10000};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{100};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(dna_length,mutation_rate,n_generations,1,42);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppCounter.htm">Counter</a> <a href="CppCounter.htm">counter</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Individual i(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dna(mutation_rate,rnd_engine,dna_length),Pedigree::Create(),<a href="CppCounter.htm">counter</a>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;Individual&gt; is;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is.push_back(i);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Simulation s(p,is);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_generations; <a href="CppOperatorIncrement.htm">++</a>i) { s.NextGeneration(); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.GetGenerations().back().GetIndividuals() <a href="CppOperatorEqual.htm">==</a> is);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Simulations should be equal at <a href="CppConstructor.htm">construct</a>ion from same parameters<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{10};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{42};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters p(dna_length,mutation_rate,n_generations,pop_size,seed);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Simulation s(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Simulation t(p);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.GetGenerations().size() <a href="CppOperatorEqual.htm">==</a> 1); <a href="CppComment.htm">//</a>Initial generation is present<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetGenerations().size() <a href="CppOperatorEqual.htm">==</a> 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.GetGenerations().front().GetIndividuals().size() <a href="CppOperatorEqual.htm">==</a> pop_size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(t.GetGenerations().front().GetIndividuals().size() <a href="CppOperatorEqual.htm">==</a> pop_size);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> kid1 <a href="CppOperatorAssign.htm">=</a> s.GetGenerations().front().GetIndividuals()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> kid2 <a href="CppOperatorAssign.htm">=</a> t.GetGenerations().front().GetIndividuals()[0];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid1 <a href="CppOperatorEqual.htm">==</a> kid1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid2 <a href="CppOperatorEqual.htm">==</a> kid2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid1.GetDna() <a href="CppOperatorEqual.htm">==</a> kid2.GetDna());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(kid1 <a href="CppOperatorEqual.htm">==</a> kid2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s.GetGenerations() <a href="CppOperatorEqual.htm">==</a> t.GetGenerations());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(s <a href="CppOperatorEqual.htm">==</a> t);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/main.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/main.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppFstreamH.htm">fstream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQFile.htm">QFile</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "helper.h"<br/>
<a href="CppInclude.htm">#include</a> "parameters.h"<br/>
<a href="CppInclude.htm">#include</a> "simulation.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppNewick.htm">newick</a>utils.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>1) Read parameters from file<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{10};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{0.01};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{10};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{1000};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{42};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Parameters parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seed<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>2) Run simulation<br/>
&nbsp;&nbsp;Simulation simulation(parameters);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Loop n_generations<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{parameters.GetNumberOfGenerations()};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_generations; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;simulation.NextGeneration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!simulation.GetCurrentSequences().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only show the sequence of the first individual<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> simulation.GetCurrentSequences()[0].GetSequence() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> pedigree{simulation.GetPedigree()};<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display as <a href="CppNewick.htm">newick</a><br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> pedigree <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> <a href="CppStdEndl.htm">std::endl</a>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display as phylogeny<br/>
&nbsp;&nbsp;<a href="CppNewick.htm">Newick</a>Utils().Display(pedigree);<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/qtfisherwrightermaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/qtfisherwrightermaindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTFISHERWRIGHTERMAINDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTFISHERWRIGHTERMAINDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDialog.htm">QDialog</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "fisherwrighterparameters.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>FisherWrighterMainDialog;<br/>
}<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a><a href="CppNewick.htm">Newick</a>Display;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>DnaSequencesDisplay;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>BeastDisplay;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<b><a href="CppNamespace.htm">namespace</a></b> fw {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>FisherWrighterMainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppQDialog.htm">QDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>FisherWrighterMainDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_run_clicked();<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> on_button_run_next_clicked();<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog *ui;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Displays the result of the BEAST analysis<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>BeastDisplay * <b><a href="CppConst.htm">const</a></b> m_beast_display;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Displays the resulting DnaSequences<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>DnaSequencesDisplay * <b><a href="CppConst.htm">const</a></b> m_dna_sequences_display;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>/Displays the resulting <a href="CppNewick.htm">Newick</a><br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppNewick.htm">Newick</a>Display * <b><a href="CppConst.htm">const</a></b> m_<a href="CppNewick.htm">newick</a>_display;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ReadNumberOfGenerations() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> fw<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTFISHERWRIGHTERMAINDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/qtfisherwrightermaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/qtfisherwrightermaindialog.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtfisherwrightermaindialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppSstreamH.htm">sstream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppNewick.htm">newick</a>utils.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtfisherwrightermaindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrightermenudialog.h"<br/>
<a href="CppInclude.htm">#include</a> "fisherwrightersimulation.h"<br/>
<a href="CppInclude.htm">#include</a> "phylogeny_r.h"<br/>
<a href="CppInclude.htm">#include</a> "qtdnasequencesdisplay.h"<br/>
<a href="CppInclude.htm">#include</a> "qtbea<a href="CppStd.htm">std</a>isplay.h"<br/>
<a href="CppInclude.htm">#include</a> "qt<a href="CppNewick.htm">newick</a>display.h"<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;<a href="CppQDialog.htm">QDialog</a>(parent),<br/>
&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog),<br/>
&nbsp;&nbsp;m_beast_display{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>BeastDisplay(<b><a href="CppThis.htm">this</a></b>)},<br/>
&nbsp;&nbsp;m_dna_sequences_display{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>DnaSequencesDisplay(<b><a href="CppThis.htm">this</a></b>)},<br/>
&nbsp;&nbsp;m_<a href="CppNewick.htm">newick</a>_display{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a><a href="CppNewick.htm">Newick</a>Display(<b><a href="CppThis.htm">this</a></b>)}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;area_results-&gt;layout());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(ui-&gt;results-&gt;layout());<br/>
&nbsp;&nbsp;ui-&gt;results-&gt;layout()-&gt;addWidget(m_dna_sequences_display);<br/>
&nbsp;&nbsp;ui-&gt;results-&gt;layout()-&gt;addWidget(m_beast_display);<br/>
&nbsp;&nbsp;ui-&gt;results-&gt;layout()-&gt;addWidget(m_<a href="CppNewick.htm">newick</a>_display);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put the dialog in the screen center<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 8 <a href="CppOperatorDivide.htm">/</a> 10, screen.height() * 8 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppQTimer.htm">QTimer</a>::singleShot(1000,<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(on_button_run_clicked()));<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::fw::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog::~<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog::on_button_run_clicked()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>1) Read parameters from file<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> dna_length{<b><a href="CppThis.htm">this</a></b>-&gt;ui-&gt;box_dna_length-&gt;value()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> mutation_rate{ui-&gt;box_mutation_rate-&gt;value()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{ReadNumberOfGenerations()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> pop_size{ui-&gt;box_pop_size-&gt;value()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> seed{ui-&gt;box_seed-&gt;value()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::fw::Parameters parameters(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;dna_length,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;mutation_rate,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;n_generations,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;pop_size,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;seed<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>2) Run simulation<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::fw::Simulation simulation(parameters);<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Loop n_generations<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{ReadNumberOfGenerations()};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n_generations; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;simulation.NextGeneration();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (!simulation.GetCurrentSequences().empty())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Only show the sequence of the first individual<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> i <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> ": " <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> simulation.GetCurrentSequences()[0].GetSequence() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> <a href="CppNewick.htm">newick</a>{simulation.GetPedigree()};<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_beast_display-&gt;Analyze(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;simulation.GetCurrentSequences(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;box_mcmc_chainlength-&gt;value()<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;repaint();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_dna_sequences_display-&gt;SetDnaSequences(simulation.GetCurrentSequences());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;repaint();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Display <a href="CppNewick.htm">newick</a><br/>
&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;m_<a href="CppNewick.htm">newick</a>_display-&gt;Set<a href="CppNewick.htm">Newick</a>(<a href="CppNewick.htm">newick</a>);<br/>
<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::fw::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog::ReadNumberOfGenerations() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n_generations{ui-&gt;box_n_generation-&gt;value()};<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> n_generations;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog::on_button_run_next_clicked()<br/>
{<br/>
&nbsp;&nbsp;ui-&gt;box_seed-&gt;setValue(ui-&gt;box_seed-&gt;value() <a href="CppOperatorPlus.htm">+</a> 1);<br/>
&nbsp;&nbsp;ui-&gt;button_run-&gt;click();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::fw::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::fw::MenuDialog();<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolFisherWrighter/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolFisherWrighter/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;future&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtfisherwrightermaindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "beast.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppCounter.htm">counter</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "dna_r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRibi.htm">ribi</a>_rinside.h"<br/>
<a href="CppInclude.htm">#include</a> "phylogeny_r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppNewick.htm">newick</a>utils.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::fw::<a href="CppQt.htm">Qt</a>FisherWrighterMainDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
