<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>SpeciesOfTheRings</title>
  <meta name="description" content="C++ SpeciesOfTheRings"/>
  <meta name="keywords" content="C++ SpeciesOfTheRings "/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>(<a href="Cpp.htm">C++</a>) <a href="ToolSpeciesOfTheRings.htm">SpeciesOfTheRings</a></h1>
<p>&nbsp;</p>
<!-- No CodeToHtmlInfo about this class with page name ToolSpeciesOfTheRings-->
<h2>Technical facts</h2>
<p>&nbsp;</p>
<p><a href="CppOs.htm">Operating system(s) or programming environment(s)</a></p>
<ul>
  <li><img src="PicLubuntu.png" alt="Lubuntu"/> <a href="CppLubuntu.htm">Lubuntu</a> 15.04 (vivid)</li>
</ul>
<p><a href="CppIde.htm">IDE(s)</a>:</p>
<ul>
  <li><img src="PicQtCreator.png" alt="Qt Creator"/> <a href="CppQtCreator.htm">Qt Creator</a> 3.1.1</li>
</ul>
<p><a href="CppQtProjectType.htm">Project type</a>:</p>
<ul>
  <li><img src="PicConsole.png" alt="console"/> <a href="CppConsoleApplication.htm">Console application</a></li>
</ul>
<p><a href="CppStandard.htm">C++ standard</a>:</p>
<ul>
  <li><img src="PicCpp98.png" alt="C++98"/> <a href="Cpp98.htm">C++98</a></li>
</ul>
<p><a href="CppCompiler.htm">Compiler(s)</a>:</p>
<ul>
  <li><a href="CppGpp.htm">G++</a> 4.9.2</li>
</ul>
<p><a href="CppLibrary.htm">Libraries</a> used:</p>
<ul>
  <li><img src="PicStl.png" alt="STL"/> <a href="CppStl.htm">STL</a>: GNU ISO C++ Library, version 4.9.2</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppQtProjectFile.htm">Qt project file</a>: ./ToolSpeciesOfTheRings/ToolSpeciesOfTheRingsDesktop.pro</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/ToolSpeciesOfTheRingsDesktop.pro" border = "1"><tr><td><code>
include(../../<a href="CppDesktopApplication.htm">DesktopApplication</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/<a href="CppBoost.htm">Boost</a>.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralConsole.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/GeneralDesktop.pri)<br/>
include(../../<a href="CppLibrary.htm">Libraries</a>/Rinside.pri)<br/>
<br/>
include(../../<a href="CppClass.htm">Classes</a>/<a href="CppHistogram.htm">CppHistogram</a>R/<a href="CppHistogram.htm">CppHistogram</a>R.pri)<br/>
include(../../<a href="CppClass.htm">Classes</a>/CppRibiRinside/CppRibiRinside.pri)<br/>
<br/>
include(ToolSpeciesOfTheRingsDesktop.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += qt<a href="CppMain.htm">main</a>.cpp<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/ToolSpeciesOfTheRingsConsole.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/ToolSpeciesOfTheRingsConsole.pri" border = "1"><tr><td><code>
<a href="CppQmakeIncludepath.htm">INCLUDEPATH</a> += ../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/speciesoftheringsmenudialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;space.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;species.cpp<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/speciesoftheringsmenudialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;space.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;species.h<br/>
<br/>
<a href="CppQmakeOther_files.htm">OTHER_FILES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/Licence.txt<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/ToolSpeciesOfTheRingsDesktop.pri</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/ToolSpeciesOfTheRingsDesktop.pri" border = "1"><tr><td><code>
include(../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/ToolSpeciesOfTheRingsConsole.pri)<br/>
<br/>
<a href="CppQmakeSources.htm">SOURCES</a> += \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/qtspeciesoftherings<a href="CppMain.htm">main</a>dialog.cpp \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/qtfractionimage.cpp \<br/>
<br/>
<a href="CppQmakeHeaders.htm">HEADERS</a>&nbsp;&nbsp;+=&nbsp;&nbsp;\<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/qtspeciesoftherings<a href="CppMain.htm">main</a>dialog.h \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/qtfractionimage.h<br/>
<br/>
<a href="CppFORMS.htm">FORMS</a>&nbsp;&nbsp;&nbsp;&nbsp;+= \<br/>
&nbsp;&nbsp;&nbsp;&nbsp;../../<a href="Tools.htm">Tools</a>/ToolSpeciesOfTheRings/qtspeciesoftherings<a href="CppMain.htm">main</a>dialog.ui<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/qtfractionimage.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/qtfractionimage.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTFRACTIONIMAGE_H<br/>
<a href="CppDefine.htm">#define</a> QTFRACTIONIMAGE_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQWidget.htm">QWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQImage.htm">QImage</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "species.h"<br/>
<a href="CppInclude.htm">#include</a> "space.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>FractionImage : <b><a href="CppPublic.htm">public</a></b> <a href="CppQWidget.htm">QWidget</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> TraitGrid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesGrid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Species<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpatialGrid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Space<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>FractionImage(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> GetMinValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpatialGrid&amp; spatial_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrid&amp; species_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TraitGrid&amp; trait_grid<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> GetMaxValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpatialGrid&amp; spatial_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrid&amp; species_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TraitGrid&amp; trait_grid<br/>
&nbsp;&nbsp;) <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppDouble.htm">double</a></b> Map(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_min,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_max,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_range_min,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_range_max<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Set(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpatialGrid&amp; spatial_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrid&amp; species_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TraitGrid&amp; trait_grid<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;<a href="CppQImage.htm">QImage</a> m_image;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTFRACTIONIMAGE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/qtfractionimage.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/qtfractionimage.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "qtfractionimage.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQImage.htm">QImage</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQPainter.htm">QPainter</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppQt.htm">Qt</a>FractionImage::GetMinValue(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>FractionImage::SpatialGrid&amp; spatial_grid,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>FractionImage::SpeciesGrid&amp; species_grid,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>FractionImage::TraitGrid&amp; trait_grid<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> min_value{<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::max()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(trait_grid.size())};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(trait_grid[0].size())};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (spatial_grid[y][x] <a href="CppOperatorEqual.htm">==</a> Space::Mountain) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (species_grid[y][x] <a href="CppOperatorEqual.htm">==</a> Species::Absent) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min_value <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMin.htm">std::min</a>(min_value,trait_grid[y][x]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> min_value;<br/>
}<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppQt.htm">Qt</a>FractionImage::GetMaxValue(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>FractionImage::SpatialGrid&amp; spatial_grid,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>FractionImage::SpeciesGrid&amp; species_grid,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>FractionImage::TraitGrid&amp; trait_grid<br/>
) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDouble.htm">double</a></b> max_value{<a href="CppStdNumeric_limits.htm">std::numeric_limits</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;::min()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(trait_grid.size())};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(trait_grid[0].size())};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (spatial_grid[y][x] <a href="CppOperatorEqual.htm">==</a> Space::Mountain) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (species_grid[y][x] <a href="CppOperatorEqual.htm">==</a> Species::Absent) <b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max_value <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMax.htm">std::max</a>(max_value,trait_grid[y][x]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> max_value;<br/>
}<br/>
<br/>
<br/>
<b><a href="CppDouble.htm">double</a></b> <a href="CppQt.htm">Qt</a>FractionImage::Map(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_min,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> x_max,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_range_min,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_range_max<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (x_min <a href="CppOperatorEqual.htm">==</a> x_max) <b><a href="CppReturn.htm">return</a></b> 0.5 * (new_range_min <a href="CppOperatorPlus.htm">+</a> new_range_max);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x_min &lt; x_max);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> x_min);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorLessEqual.htm">&lt;=</a> x_max);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> cur_range{x_max <a href="CppOperatorMinus.htm">-</a> x_min};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> f{ (x <a href="CppOperatorMinus.htm">-</a> x_min) <a href="CppOperatorDivide.htm">/</a> cur_range};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_range{new_range_max <a href="CppOperatorMinus.htm">-</a> new_range_min};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> y{new_range_min <a href="CppOperatorPlus.htm">+</a> (f * new_range)};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> new_range_min);<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorLessEqual.htm">&lt;=</a> new_range_max);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> y;<br/>
<br/>
}<br/>
<br/>
<br/>
<a href="CppQt.htm">Qt</a>FractionImage::<a href="CppQt.htm">Qt</a>FractionImage(<a href="CppQWidget.htm">QWidget</a> *parent) :<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQWidget.htm">QWidget</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_image{}<br/>
{<br/>
&nbsp;&nbsp;m_image <a href="CppOperatorAssign.htm">=</a> <a href="CppQImage.htm">QImage</a>(100,100,<a href="CppQImage.htm">QImage</a>::Format::Format_RGB32);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>FractionImage::GetHeight() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_image.height();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppQt.htm">Qt</a>FractionImage::GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_image.width();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>FractionImage::paintEvent(<a href="CppQPaintEvent.htm">QPaintEvent</a> *)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQPainter.htm">QPainter</a> painter(<b><a href="CppThis.htm">this</a></b>);<br/>
&nbsp;&nbsp;painter.drawPixmap(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;0,0,<b><a href="CppThis.htm">this</a></b>-&gt;width(),<b><a href="CppThis.htm">this</a></b>-&gt;height(),<a href="CppQPixmap.htm">QPixmap</a>::fromImage(m_image)<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>FractionImage::Set(<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpatialGrid&amp; spatial_grid,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrid&amp; species_grid,<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TraitGrid&amp; trait_grid<br/>
)<br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(trait_grid.size() <a href="CppOperatorEqual.htm">==</a> spatial_grid.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(trait_grid[0].size() <a href="CppOperatorEqual.htm">==</a> spatial_grid[0].size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (GetHeight() <a href="CppOperatorNotEqual.htm">!=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(trait_grid.size())<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalOr.htm">||</a> GetWidth() <a href="CppOperatorNotEqual.htm">!=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(trait_grid[0].size()))<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!trait_grid.empty());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_height <a href="CppOperatorAssign.htm">=</a> trait_grid.size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_width <a href="CppOperatorAssign.htm">=</a> trait_grid[0].size();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_image <a href="CppOperatorAssign.htm">=</a> <a href="CppQImage.htm">QImage</a>(new_width,new_height,<a href="CppQImage.htm">QImage</a>::Format::Format_RGB32);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetHeight() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(trait_grid.size()));<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(GetWidth() <a href="CppOperatorEqual.htm">==</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(trait_grid[0].size()));<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> height <a href="CppOperatorAssign.htm">=</a> GetHeight();<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> width&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetWidth();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> min_value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetMinValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spatial_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;species_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trait_grid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> max_value<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> GetMaxValue(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spatial_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;species_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trait_grid<br/>
&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y{0}; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(y &lt; height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; species_line <a href="CppOperatorAssign.htm">=</a> species_grid[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; spatial_line <a href="CppOperatorAssign.htm">=</a> spatial_grid[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b>&amp; trait_line <a href="CppOperatorAssign.htm">=</a> trait_grid[y];<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x{0}; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x <a href="CppOperatorGreaterEqual.htm">&gt;=</a> 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(x &lt; width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (spatial_line[x] <a href="CppOperatorEqual.htm">==</a> Space::Mountain)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_image.setPixel(x,y,qRgb(0,0,0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (species_line[x] <a href="CppOperatorEqual.htm">==</a> Species::Absent)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_image.setPixel(x,y,qRgb(128,128,128));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> trait_value{trait_line[x]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> color_angle{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map(trait_value,min_value,max_value,0.0,270.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQColor.htm">QColor</a> color;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color.setHsv(color_angle,254,254);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> r,g,b;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color.getRgb(&amp;r,&amp;g,&amp;b);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_image.setPixel(x,y,qRgb(r,g,b));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;repaint();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/qtmain.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/qtmain.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "qtspeciesoftheringsmaindialog.h"<br/>
<a href="CppInclude.htm">#include</a> "histogram_r.h"<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQApplication.htm">QApplication</a>&gt;<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>(<b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a>, <b><a href="CppChar.htm">char</a></b> *<a href="CppArgc.htm">argv</a>[])<br/>
{<br/>
&nbsp;&nbsp;<a href="CppQApplication.htm">QApplication</a> a(<a href="CppArgc.htm">argc</a>, <a href="CppArgc.htm">argv</a>);<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::HistogramR();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog w;<br/>
&nbsp;&nbsp;w.show();<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a.exec();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/qtspeciesoftheringsmaindialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/qtspeciesoftheringsmaindialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTSPECIESOFTHERINGSMAINDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> QTSPECIESOFTHERINGSMAINDIALOG_H<br/>
<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppQtHideAndShowDialog.htm">qthideandshowdialog</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "species.h"<br/>
<a href="CppInclude.htm">#include</a> "space.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> Ui {<br/>
&nbsp;&nbsp;<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog;<br/>
}<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>FractionImage;<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppQt.htm">Qt</a>SimTopPredatorPreyParameters<a href="CppWidget.htm">Widget</a>;<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog : <b><a href="CppPublic.htm">public</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> Parameters<a href="CppWidget.htm">Widget</a> <a href="CppOperatorAssign.htm">=</a> <a href="CppQt.htm">Qt</a>SimTopPredatorPreyParameters<a href="CppWidget.htm">Widget</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> TraitGrid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b><a href="CppOperatorStreamIn.htm">&gt;&gt;</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpeciesGrid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Species<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>;<br/>
&nbsp;&nbsp;<b><a href="CppUsing.htm">using</a></b> SpatialGrid <a href="CppOperatorAssign.htm">=</a> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdVector.htm">std::vector</a>&lt;Space<a href="CppOperatorStreamIn.htm">&gt;&gt;</a>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppExplicit.htm">explicit</a></b> <a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog(<a href="CppQWidget.htm">QWidget</a> *parent <a href="CppOperatorAssign.htm">=</a> 0);<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog&amp; <b><a href="CppOperator.htm">operator</a></b>=(<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog&amp;) <a href="CppOperatorAssign.htm">=</a> <b><a href="CppDelete.htm">delete</a></b>;<br/>
&nbsp;&nbsp;~<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog();<br/>
<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetHeight() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog *ui;<br/>
&nbsp;&nbsp;<a href="CppStdNormal_distribution.htm">std::normal_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_normal_distribution;<br/>
&nbsp;&nbsp;<a href="CppStdUniform_real_distribution.htm">std::uniform_real_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; m_uniform_distribution;<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>FractionImage * <b><a href="CppConst.htm">const</a></b> m_qtgrid;<br/>
&nbsp;&nbsp;<a href="CppStdMt19937.htm">std::mt19937</a> m_rng_engine;<br/>
&nbsp;&nbsp;SpatialGrid m_spatial_grid;<br/>
&nbsp;&nbsp;SpeciesGrid m_species_grid;<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> m_t;<br/>
&nbsp;&nbsp;TraitGrid m_trait_grid;<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; CollectTraits() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Display();<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
<b><a href="CppPrivate.htm">private</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnParametersChanged() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> On<a href="CppTime.htm">Time</a>r() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> QTSPECIESOFTHERINGSMAINDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/qtspeciesoftheringsmaindialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/qtspeciesoftheringsmaindialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-but-set-parameter"<br/>
<a href="CppInclude.htm">#include</a> "qtspeciesoftheringsmaindialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQHBoxLayout.htm">QHBoxLayout</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQDesktopWidget.htm">QDesktopWidget</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQTimer.htm">QTimer</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtfractionimage.h"<br/>
<a href="CppInclude.htm">#include</a> "histogram_r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppFileIo.htm">fileio</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "ui_qtspeciesoftheringsmaindialog.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog(<a href="CppQWidget.htm">QWidget</a> *parent)<br/>
 :&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppQtHideAndShowDialog.htm">QtHideAndShowDialog</a>(parent),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui(<b><a href="CppNew.htm">new</a></b> <a href="CppUi.htm">Ui</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_normal_distribution(0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_uniform_distribution(0.0,1.0),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtgrid{<b><a href="CppNew.htm">new</a></b> <a href="CppQt.htm">Qt</a>FractionImage},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_rng_engine{0}, <a href="CppComment.htm">//</a>41 and 42 show nice ring<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_species_grid{},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_t{0},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_trait_grid{}<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
&nbsp;&nbsp;ui-&gt;setupUi(<b><a href="CppThis.htm">this</a></b>);<br/>
<br/>
&nbsp;&nbsp;{<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!ui-&gt;<a href="CppWidget.htm">widget</a>_right-&gt;layout());<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQLayout.htm">QLayout</a> * <b><a href="CppConst.htm">const</a></b> layout <a href="CppOperatorAssign.htm">=</a> <b><a href="CppNew.htm">new</a></b> <a href="CppQHBoxLayout.htm">QHBoxLayout</a>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;ui-&gt;<a href="CppWidget.htm">widget</a>_right-&gt;setLayout(layout);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;layout-&gt;addWidget(m_qtgrid);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_qtgrid-&gt;setMinimumSize(200,200);<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_height,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnParametersChanged()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_width,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnParametersChanged()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_rng_seed,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnParametersChanged()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_mutation_rate,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnParametersChanged()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_distance_halflife,<a href="CppSignalMacro.htm">SIGNAL</a>(valueChanged(<b><a href="CppDouble.htm">double</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnParametersChanged()));<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(ui-&gt;box_grid_type,<a href="CppSignalMacro.htm">SIGNAL</a>(currentIndexChanged(<b><a href="CppInt.htm">int</a></b>)),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(OnParametersChanged()));<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Put dialog at screen center<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQRect.htm">QRect</a> screen <a href="CppOperatorAssign.htm">=</a> <a href="CppQApplication.htm">QApplication</a>::desktop()-&gt;screenGeometry();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;setGeometry(0,0,screen.width() * 9 <a href="CppOperatorDivide.htm">/</a> 10,screen.height() * 9 <a href="CppOperatorDivide.htm">/</a> 10);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;move( screen.center() <a href="CppOperatorMinus.htm">-</a> <b><a href="CppThis.htm">this</a></b>-&gt;rect().center() );<br/>
&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;OnParametersChanged();<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Start the <a href="CppTime.htm">time</a>r<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQTimer.htm">QTimer</a> * <b><a href="CppConst.htm">const</a></b> <a href="CppTime.htm">time</a>r{<b><a href="CppNew.htm">new</a></b> <a href="CppQTimer.htm">QTimer</a>(<b><a href="CppThis.htm">this</a></b>)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(<a href="CppTime.htm">time</a>r,<a href="CppSignalMacro.htm">SIGNAL</a>(<a href="CppTime.htm">time</a>out()),<b><a href="CppThis.htm">this</a></b>,<a href="CppSLOT.htm">SLOT</a>(On<a href="CppTime.htm">Time</a>r()));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>r-&gt;setInterval(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppTime.htm">time</a>r-&gt;start();<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::~<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog()<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppDelete.htm">delete</a></b> ui;<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::CollectTraits() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_spatial_grid.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_spatial_grid.size() <a href="CppOperatorEqual.htm">==</a> m_species_grid.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_spatial_grid.size() <a href="CppOperatorEqual.htm">==</a> m_trait_grid.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_spatial_grid[0].size() <a href="CppOperatorEqual.htm">==</a> m_species_grid[0].size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_spatial_grid[0].size() <a href="CppOperatorEqual.htm">==</a> m_trait_grid[0].size());<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_spatial_grid.size())};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(m_spatial_grid[0].size())};<br/>
<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; v;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_spatial_grid[y][x] <a href="CppOperatorEqual.htm">==</a> Space::Land<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_species_grid[y][x] <a href="CppOperatorEqual.htm">==</a> Species::Present<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push_back(m_trait_grid[y][x]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> v;<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::Display()<br/>
{<br/>
&nbsp;&nbsp;m_qtgrid-&gt;Set(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_species_grid,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_trait_grid<br/>
&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppAuto.htm">auto</a></b> traits <a href="CppOperatorAssign.htm">=</a> CollectTraits();<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::<a href="CppFileIo.htm">fileio</a>::<a href="CppFileIo.htm">FileIo</a> f;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppStdString.htm">std::string</a> filename <a href="CppOperatorAssign.htm">=</a> f.GetTempFileName(".png");<br/>
&nbsp;&nbsp;<a href="CppRibi.htm">ribi</a>::HistogramR().ToHistogram(traits,filename,<a href="CppRibi.htm">ribi</a>::HistogramR::GraphicsFormat::png);<br/>
&nbsp;&nbsp;ui-&gt;image_histogram-&gt;setPixmap(<a href="CppQPixmap.htm">QPixmap</a>(filename.c_str()));<br/>
&nbsp;&nbsp;f.<a href="CppDeleteFile.htm">DeleteFile</a>(filename);<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::GetHeight() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_spatial_grid.size() <a href="CppOperatorEqual.htm">==</a> m_trait_grid.size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_species_grid.size() <a href="CppOperatorEqual.htm">==</a> m_trait_grid.size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_spatial_grid.size();<br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::GetWidth() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!m_trait_grid.empty());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_spatial_grid[0].size() <a href="CppOperatorEqual.htm">==</a> m_trait_grid[0].size());<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(m_species_grid[0].size() <a href="CppOperatorEqual.htm">==</a> m_trait_grid[0].size());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> m_spatial_grid[0].size();<br/>
}<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::OnParametersChanged() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_height-&gt;value() <a href="CppOperatorPlus.htm">+</a> 2;<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width <a href="CppOperatorAssign.htm">=</a> ui-&gt;box_width-&gt;value();<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> trait_mutation{ui-&gt;box_mutation_rate-&gt;value()};<br/>
&nbsp;&nbsp;m_rng_engine <a href="CppOperatorAssign.htm">=</a> <a href="CppStdMt19937.htm">std::mt19937</a>(ui-&gt;box_rng_seed-&gt;value());<br/>
&nbsp;&nbsp;m_normal_distribution <a href="CppOperatorAssign.htm">=</a> <a href="CppStdNormal_distribution.htm">std::normal_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(0.0,trait_mutation);<br/>
&nbsp;&nbsp;m_uniform_distribution <a href="CppOperatorAssign.htm">=</a> <a href="CppStdUniform_real_distribution.htm">std::uniform_real_distribution</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(0.0,1.0);<br/>
<br/>
&nbsp;&nbsp;m_spatial_grid <a href="CppOperatorAssign.htm">=</a> SpatialGrid(height,<a href="CppStdVector.htm">std::vector</a>&lt;Space&gt;(width,Space::Land));<br/>
&nbsp;&nbsp;m_species_grid <a href="CppOperatorAssign.htm">=</a> SpeciesGrid(height,<a href="CppStdVector.htm">std::vector</a>&lt;Species&gt;(width,Species::Absent));<br/>
&nbsp;&nbsp;m_trait_grid <a href="CppOperatorAssign.htm">=</a> TraitGrid(height,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width,0.0));<br/>
&nbsp;&nbsp;m_t <a href="CppOperatorAssign.htm">=</a> 0;<br/>
<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> mountain<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ui-&gt;box_grid_type-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Square with mountain")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_from{width * 1 <a href="CppOperatorDivide.htm">/</a> 4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_to{width * 3 <a href="CppOperatorDivide.htm">/</a> 4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_from{height * 1 <a href="CppOperatorDivide.htm">/</a> 4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_to{height * 3 <a href="CppOperatorDivide.htm">/</a> 4};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Wall around<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid[y][0] <a href="CppOperatorAssign.htm">=</a> Space::Mountain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid[y][width <a href="CppOperatorMinus.htm">-</a> 1] <a href="CppOperatorAssign.htm">=</a> Space::Mountain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid[0][x] <a href="CppOperatorAssign.htm">=</a> Space::Mountain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid[height <a href="CppOperatorMinus.htm">-</a> 1][x] <a href="CppOperatorAssign.htm">=</a> Space::Mountain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mountain at center<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=y_from; y<a href="CppOperatorNotEqual.htm">!=</a>y_to; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=x_from; x<a href="CppOperatorNotEqual.htm">!=</a>x_to; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid[y][x] <a href="CppOperatorAssign.htm">=</a> Space::Mountain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> some species<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_species_grid[height <a href="CppOperatorDivide.htm">/</a> 5][width <a href="CppOperatorDivide.htm">/</a> 2] <a href="CppOperatorAssign.htm">=</a> Species::Present;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b> <b><a href="CppIf.htm">if</a></b> (ui-&gt;box_grid_type-&gt;currentText() <a href="CppOperatorEqual.htm">==</a> "Torus")<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> walls at top and bottom<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid[0][x] <a href="CppOperatorAssign.htm">=</a> Space::Mountain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid[height <a href="CppOperatorMinus.htm">-</a> 1][x] <a href="CppOperatorAssign.htm">=</a> Space::Mountain;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> some species<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_species_grid[height <a href="CppOperatorDivide.htm">/</a> 2][width <a href="CppOperatorDivide.htm">/</a> 4] <a href="CppOperatorAssign.htm">=</a> Species::Present;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(!"Should not get here");<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> some variance<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fy{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(y) * 0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> fx{<b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(x) * 0.1};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z{<a href="CppStdSin.htm">std::sin</a>(fx)+cos(fy)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z{m_normal_distribution(m_rng_engine)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> z{0.0};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_trait_grid[y][x] <a href="CppOperatorAssign.htm">=</a> z;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;Display();<br/>
}<br/>
<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::On<a href="CppTime.htm">Time</a>r() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance_halflife{ui-&gt;box_distance_halflife-&gt;value()};<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a><a href="CppAdd.htm">Add</a> mountain<br/>
&nbsp;&nbsp;<a href="CppComment.htm">/*</a><br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_t <a href="CppOperatorModulus.htm">%</a> 10 <a href="CppOperatorEqual.htm">==</a> 0)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> n{<a href="CppStdMin.htm">std::min</a>(m_t <a href="CppOperatorDivide.htm">/</a> 10,GetWidth() <a href="CppOperatorDivide.htm">/</a> 2)};<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> i=0; i<a href="CppOperatorNotEqual.htm">!=</a>n; <a href="CppOperatorIncrement.htm">++</a>i)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_spatial_grid[GetHeight() <a href="CppOperatorDivide.htm">/</a> 2][-(n/2) <a href="CppOperatorPlus.htm">+</a> i <a href="CppOperatorPlus.htm">+</a> (GetWidth() <a href="CppOperatorDivide.htm">/</a> 2)]<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorAssign.htm">=</a> Space::Mountain<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppComment.htm">*/</a><br/>
&nbsp;&nbsp;<a href="CppOperatorIncrement.htm">++</a>m_t;<br/>
<br/>
&nbsp;&nbsp;TraitGrid new_traits(m_trait_grid);<br/>
&nbsp;&nbsp;SpeciesGrid new_species(m_species_grid);<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height{GetHeight()};<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width{GetWidth()};<br/>
&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> y=0; y<a href="CppOperatorNotEqual.htm">!=</a>height; <a href="CppOperatorIncrement.htm">++</a>y)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppFor.htm">for</a></b> (<b><a href="CppInt.htm">int</a></b> x=0; x<a href="CppOperatorNotEqual.htm">!=</a>width; <a href="CppOperatorIncrement.htm">++</a>x)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_spatial_grid[y][x] <a href="CppOperatorEqual.htm">==</a> Space::Mountain) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Collect the neightbours<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt; ts;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_above{(y <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorPlus.htm">+</a> height) <a href="CppOperatorModulus.htm">%</a> height};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> y_below{(y <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorPlus.htm">+</a> height) <a href="CppOperatorModulus.htm">%</a> height};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_left{ (x <a href="CppOperatorMinus.htm">-</a> 1 <a href="CppOperatorPlus.htm">+</a> width) <a href="CppOperatorModulus.htm">%</a> width};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> x_right{(x <a href="CppOperatorPlus.htm">+</a> 1 <a href="CppOperatorPlus.htm">+</a> width) <a href="CppOperatorModulus.htm">%</a> width};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_spatial_grid[y_above][x] <a href="CppOperatorEqual.htm">==</a> Space::Land<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_species_grid[y_above][x] <a href="CppOperatorEqual.htm">==</a> Species::Present) { ts.push_back( m_trait_grid[y_above][x]); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_spatial_grid[y][x_right] <a href="CppOperatorEqual.htm">==</a> Space::Land<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_species_grid[y][x_right] <a href="CppOperatorEqual.htm">==</a> Species::Present) { ts.push_back( m_trait_grid[y][x_right]); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_spatial_grid[y_below][x] <a href="CppOperatorEqual.htm">==</a> Space::Land<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_species_grid[y_below][x] <a href="CppOperatorEqual.htm">==</a> Species::Present) { ts.push_back( m_trait_grid[y_below][x]); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_spatial_grid[y][x_left ] <a href="CppOperatorEqual.htm">==</a> Space::Land<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorLogicalAnd.htm">&amp;&amp;</a> m_species_grid[y][x_left ] <a href="CppOperatorEqual.htm">==</a> Species::Present) { ts.push_back( m_trait_grid[y][x_left]); }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (ts.empty()) <b><a href="CppContinue.htm">continue</a></b>;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStd.htm">std</a>::shuffle(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdBegin.htm">std::begin</a>(ts),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdEnd.htm">std::end</a>(ts),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_rng_engine<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Colonization?<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (m_species_grid[y][x] <a href="CppOperatorEqual.htm">==</a> Species::Absent)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_traits[y][x] <a href="CppOperatorAssign.htm">=</a> ts[0] <a href="CppOperatorPlus.htm">+</a> m_normal_distribution(m_rng_engine);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_species[y][x] <a href="CppOperatorAssign.htm">=</a> Species::Present;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppContinue.htm">continue</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Species was present<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> <b><a href="CppThis.htm">this</a></b>_trait{m_trait_grid[y][x]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> neighbour_trait{ts[0]};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> distance{<a href="CppStdAbs.htm">std::abs</a>(<b><a href="CppThis.htm">this</a></b>_trait <a href="CppOperatorMinus.htm">-</a> neighbour_trait)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> p_mate{<a href="CppStdExp.htm">std::exp</a>(-distance*distance_halflife)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> r{m_uniform_distribution(m_rng_engine)};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (r &lt; p_mate)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Mating takes place<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppDouble.htm">double</a></b> new_trait{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((<b><a href="CppThis.htm">this</a></b>_trait <a href="CppOperatorPlus.htm">+</a> neighbour_trait) <a href="CppOperatorDivide.htm">/</a> 2.0)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppOperatorPlus.htm">+</a> m_normal_distribution(m_rng_engine)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_traits[y][x] <a href="CppOperatorAssign.htm">=</a> new_trait;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppElse.htm">else</a></b><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>No mating, only mutation<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_traits[y][x]<a href="CppOperatorPlusAssign.htm">+=</a>m_normal_distribution(m_rng_engine);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_trait_grid,new_traits);<br/>
&nbsp;&nbsp;<a href="CppStdSwap.htm">std::swap</a>(m_species_grid,new_species);<br/>
&nbsp;&nbsp;Display();<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::<a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_height{d.GetHeight()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_height{cur_height * 2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetHeight() <a href="CppOperatorEqual.htm">==</a> cur_height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_height-&gt;setValue(new_height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d.GetHeight() <a href="CppOperatorMinus.htm">-</a> new_height) &lt; 3); <a href="CppComment.htm">//</a>Walls<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <a href="CppQt.htm">Qt</a>SpeciesOfTheRingsMainDialog d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> cur_width{d.GetWidth()};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> new_width{cur_width * 2};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetWidth() <a href="CppOperatorEqual.htm">==</a> cur_width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.ui-&gt;box_width-&gt;setValue(new_width);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(abs(d.GetWidth() <a href="CppOperatorMinus.htm">-</a> new_width) &lt; 3); <a href="CppComment.htm">//</a>Walls<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> width{123};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> height{234};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>FractionImage d;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpatialGrid v(height,<a href="CppStdVector.htm">std::vector</a>&lt;Space&gt;(width,Space::Land));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> SpeciesGrid w(height,<a href="CppStdVector.htm">std::vector</a>&lt;Species&gt;(width,Species::Present));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> TraitGrid x(height,<a href="CppStdVector.htm">std::vector</a>&lt;<b><a href="CppDouble.htm">double</a></b>&gt;(width,0.0));<br/>
&nbsp;&nbsp;&nbsp;&nbsp;d.Set(v,w,x);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetHeight() <a href="CppOperatorEqual.htm">==</a> height);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(d.GetWidth() <a href="CppOperatorEqual.htm">==</a> width);<br/>
&nbsp;&nbsp;}<br/>
}<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/space.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/space.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SPACE_H<br/>
<a href="CppDefine.htm">#define</a> SPACE_H<br/>
<br/>
<b><a href="CppEnumClass.htm">enum class</a></b> Space { Mountain, Land };<br/>
<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SPACE_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/space.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/space.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "space.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/species.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/species.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SPECIES_H<br/>
<a href="CppDefine.htm">#define</a> SPECIES_H<br/>
<br/>
<b><a href="CppEnum.htm">enum</a></b> Species { Present, Absent };<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SPECIES_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/species.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/species.cpp" border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "species.h"<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/speciesoftheringsmenudialog.h</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/speciesoftheringsmenudialog.h" border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> SIMTOPPREDATORPREYMENUDIALOG_H<br/>
<a href="CppDefine.htm">#define</a> SIMTOPPREDATORPREYMENUDIALOG_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppStringH.htm">string</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppVectorH.htm">vector</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppAbout.htm">about</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "help.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRichelBilderbeekProgram.htm">richelbilderbeekprogram</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "menudialog.h"<br/>
<br/>
<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a> {<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> SpeciesOfTheRingsMenuDialog <b><a href="CppFinal.htm">final</a></b> : <b><a href="CppPublic.htm">public</a></b> MenuDialog<br/>
{<br/>
&nbsp;&nbsp;SpeciesOfTheRingsMenuDialog();<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;Help GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> Program&gt; GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdString.htm">std::string</a> Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
&nbsp;&nbsp;<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<b><a href="CppPrivate.htm">private</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppInt.htm">int</a></b> ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b> <b><a href="CppOverride.htm">override</a></b>;<br/>
<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppVoid.htm">void</a></b> Test() <b><a href="CppNoexcept.htm">noexcept</a></b>;<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
<br/>
};<br/>
<br/>
} <a href="CppComment.htm">//</a>~<b><a href="CppNamespace.htm">namespace</a></b> <a href="CppRibi.htm">ribi</a><br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppComment.htm">//</a> SIMTOPPREDATORPREYMENUDIALOG_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>./ToolSpeciesOfTheRings/speciesoftheringsmenudialog.cpp</h2>
<p>&nbsp;</p>
<!-- start of code -->
<table summary="./ToolSpeciesOfTheRings/speciesoftheringsmenudialog.cpp" border = "1"><tr><td><code>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic push<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "<a href="CppWeffcpp.htm">-Weffc++</a>"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic ignored "-Wunused-local-typedefs"<br/>
<a href="CppInclude.htm">#include</a> "speciesoftheringsmenudialog.h"<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppCassertH.htm">cassert</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<a href="CppLexical_cast.htm">lexical_cast</a>.hpp&gt;<br/>
<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppRichelBilderbeekProgram.htm">richelbilderbeekprogram</a>.h"<br/>
<a href="CppInclude.htm">#include</a> "test<a href="CppTime.htm">time</a>r.h"<br/>
<a href="CppInclude.htm">#include</a> "<a href="CppTrace.htm">trace</a>.h"<br/>
<a href="CppPragma.htm">#pragma</a> GCC diagnostic pop<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::SpeciesOfTheRingsMenuDialog::SpeciesOfTheRingsMenuDialog()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
&nbsp;&nbsp;Test();<br/>
&nbsp;&nbsp;<a href="CppEndif.htm">#endif</a><br/>
}<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppRibi.htm">ribi</a>::SpeciesOfTheRingsMenuDialog::ExecuteSpecific(<b><a href="CppConst.htm">const</a></b> <a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt;&amp; <a href="CppArgc.htm">argv</a>) <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> <b><a href="CppInt.htm">int</a></b> <a href="CppArgc.htm">argc</a> <a href="CppOperatorAssign.htm">=</a> <b><a href="CppStatic_cast.htm">static_cast</a></b>&lt;<b><a href="CppInt.htm">int</a></b>&gt;(<a href="CppArgc.htm">argv</a>.size());<br/>
&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (<a href="CppArgc.htm">argc</a> <a href="CppOperatorEqual.htm">==</a> 1)<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppStdCout.htm">std::cout</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> GetHelp() <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> '\n';<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> 1;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::<a href="CppAbout.htm">About</a> <a href="CppRibi.htm">ribi</a>::SpeciesOfTheRingsMenuDialog::GetAbout() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppAbout.htm">About</a> a(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"Richel Bilderbeek",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"SpeciesOfTheRings",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"simulation ring species",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"the 27th of May 2015",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-2015",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"http://www.richelbilderbeek.nl/<a href="Tools.htm">Tool</a>SpeciesOfTheRings.htm",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;Get<a href="CppVersion.htm">Version</a>History()<br/>
&nbsp;&nbsp;);<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("Test<a href="CppTime.htm">Time</a>r <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> Test<a href="CppTime.htm">Time</a>r::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;a.<a href="CppAdd.htm">Add</a><a href="CppLibrary.htm">Library</a>("<a href="CppTrace.htm">Trace</a> <a href="CppVersion.htm">version</a>: " <a href="CppOperatorPlus.htm">+</a> <a href="CppTrace.htm">Trace</a>::Get<a href="CppVersion.htm">Version</a>());<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> a;<br/>
}<br/>
<br/>
<a href="CppRibi.htm">ribi</a>::Help <a href="CppRibi.htm">ribi</a>::SpeciesOfTheRingsMenuDialog::GetHelp() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> <a href="CppRibi.htm">ribi</a>::Help(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileTitle(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppThis.htm">this</a></b>-&gt;GetAbout().GetFileDescription(),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Help::Option('b',"bin","decimal number to be <a href="CppConvert.htm">convert</a>ed to/from Gray code"),<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>Help::Option('d',"dec","decimal number to be <a href="CppConvert.htm">convert</a>ed to/from Gray code")<br/>
&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>"<a href="ToolGrayCoder.htm">GrayCoder</a> <a href="CppOperatorMinus.htm">-</a>d 123456",<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a>"<a href="ToolGrayCoder.htm">GrayCoder</a> <a href="CppOperatorMinus.htm">-</a>b 010101"<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;);<br/>
}<br/>
<br/>
<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; <a href="CppRibi.htm">ribi</a>::SpeciesOfTheRingsMenuDialog::GetProgram() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<a href="CppBoostShared_ptr.htm">boost::shared_ptr</a>&lt;<b><a href="CppConst.htm">const</a></b> <a href="CppRibi.htm">ribi</a>::Program&gt; p {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppComment.htm">//</a><b><a href="CppNew.htm">new</a></b> <a href="CppRibi.htm">ribi</a>::ProgramSpeciesOfTheRings<br/>
&nbsp;&nbsp;};<br/>
&nbsp;&nbsp;<a href="CppAssert.htm">assert</a>(p);<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> p;<br/>
}<br/>
<br/>
<br/>
<a href="CppStdString.htm">std::string</a> <a href="CppRibi.htm">ribi</a>::SpeciesOfTheRingsMenuDialog::Get<a href="CppVersion.htm">Version</a>() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> "1.0";<br/>
}<br/>
<br/>
<a href="CppStdVector.htm">std::vector</a>&lt;<a href="CppStdString.htm">std::string</a>&gt; <a href="CppRibi.htm">ribi</a>::SpeciesOfTheRingsMenuDialog::Get<a href="CppVersion.htm">Version</a>History() <b><a href="CppConst.htm">const</a></b> <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppReturn.htm">return</a></b> {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;"2015-06-16: <a href="CppVersion.htm">version</a> 1.0: start of <a href="CppVersion.htm">version</a>ing",<br/>
&nbsp;&nbsp;};<br/>
}<br/>
<br/>
<a href="CppIfndef.htm">#ifndef</a> <a href="CppNDEBUG.htm">NDEBUG</a><br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppRibi.htm">ribi</a>::SpeciesOfTheRingsMenuDialog::Test() <b><a href="CppNoexcept.htm">noexcept</a></b><br/>
{<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppStatic.htm">static</a></b> <b><a href="CppBool.htm">bool</a></b> is_tested{<b><a href="CppFalse.htm">false</a></b>};<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppIf.htm">if</a></b> (is_tested) <b><a href="CppReturn.htm">return</a></b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;is_tested <a href="CppOperatorAssign.htm">=</a> <b><a href="CppTrue.htm">true</a></b>;<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<b><a href="CppConst.htm">const</a></b> Test<a href="CppTime.htm">Time</a>r test_<a href="CppTime.htm">time</a>r(<a href="Cpp__func__.htm">__func__</a>,__<a href="CppCfile.htm">FILE</a>__,1.0);<br/>
}<br/>
<a href="CppEndif.htm">#endif</a><br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
<p>This page has been created by the <a href="Tools.htm">tool</a> <a href="ToolCodeToHtml.htm">CodeToHtml</a></p>
</body>
</html>
