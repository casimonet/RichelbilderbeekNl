#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a6paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation landscape
\suppress_date false
\use_refstyle 1
\backgroundcolor #000000
\fontcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Advanced C++, Day 3
\end_layout

\begin_layout Author
(C) Rich√®l Bilderbeek 
\begin_inset Graphics
	filename CC-BY-NC-SA.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Today
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Goal
\end_layout

\begin_layout Itemize
Decide where to go from here
\end_layout

\begin_deeper
\begin_layout Itemize
See some literature: what part of C++ fits me best? 
\end_layout

\begin_layout Itemize
Gain some experience with STL containers and algorithms
\end_layout

\begin_layout Itemize
Getting to know the top-5-[something]s
\end_layout

\begin_layout Itemize
Intro to COM
\end_layout

\begin_layout Itemize
Intro to regex
\end_layout

\begin_layout Itemize
(Working with streams)
\end_layout

\begin_layout Itemize
How to extend an existing architecture?
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Planning
\end_layout

\begin_layout Itemize
Runtime speed and the STL
\end_layout

\begin_deeper
\begin_layout Itemize
Intermezzo's: 
\end_layout

\begin_deeper
\begin_layout Itemize
Boost
\end_layout

\begin_layout Itemize
top-5-[something]s
\end_layout

\begin_layout Itemize
COM
\end_layout

\begin_layout Itemize
Regexes
\end_layout

\begin_layout Itemize
(Streams)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Programming in the future tense
\end_layout

\begin_layout Itemize
Epilogue
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Runtime speed and the STL
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Runtime speed and the STL
\end_layout

\begin_layout Itemize
See CppLectureStlAndRunTimeSpeed.lyx
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Programming in the future tense
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Programming in the future tense
\end_layout

\begin_layout Itemize
What will programmers always need to face?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Programming in the future tense
\end_layout

\begin_layout Itemize
What will programmers always need to face?
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Change
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Change
\end_layout

\begin_layout Itemize
Extending functionality
\end_layout

\begin_layout Itemize
Unpredictable what
\end_layout

\begin_layout Itemize
Projects can collapse under their own weight
\end_layout

\begin_layout Itemize
Question: How to deal with it?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Top DO's
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in order of importance, personal ordering
\end_layout

\end_inset


\end_layout

\begin_layout Quotation
The best code I wrote with backspace
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Unknown
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
(when in a team) prefer using each others' strengths
\end_layout

\begin_layout Enumerate
Reduce the size of your project: use libraries
\end_layout

\begin_deeper
\begin_layout Enumerate
Less maintenance
\end_layout

\begin_layout Enumerate
Less debugging
\end_layout

\begin_layout Enumerate
Better performance
\end_layout

\end_deeper
\begin_layout Enumerate
Never predict the future: only supply what is requested today
\end_layout

\begin_layout Enumerate
Encapsulate the change, and only the change.
 Do this using a scalable architecture: Design Patterns
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Joy
\end_layout

\begin_layout Itemize
Start and finish fun projects
\end_layout

\begin_layout Itemize
Visit a Hackerspace or CoderDojo
\end_layout

\begin_layout Itemize
Collaborate online
\end_layout

\begin_layout Itemize
Write articles
\end_layout

\begin_layout Itemize
Teach
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Epilogue
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Epilogue
\end_layout

\begin_layout Itemize
Topics covered, among others:
\end_layout

\begin_deeper
\begin_layout Itemize
The 4 domains of C++, focus on STL and algorithms
\end_layout

\begin_layout Itemize
Code intent & correct code
\end_layout

\begin_layout Itemize
Compile-time speed
\end_layout

\begin_layout Itemize
Run-time speed
\end_layout

\begin_layout Itemize
COM
\end_layout

\begin_layout Itemize
Regex
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Epilogue
\end_layout

\begin_layout Itemize
C++ is huge
\end_layout

\begin_deeper
\begin_layout Itemize
Do not expect to be a guru
\end_layout

\begin_layout Itemize
There will be dragons
\end_layout

\end_deeper
\begin_layout Itemize
No practice = no use
\end_layout

\begin_layout Itemize
Program for humans first, computers second
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
EOF
\end_layout

\end_body
\end_document
