#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a6paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation landscape
\suppress_date false
\use_refstyle 1
\backgroundcolor #000000
\fontcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Advanced C++, Day 2
\end_layout

\begin_layout Author
(C) Rich√®l Bilderbeek 
\begin_inset Graphics
	filename CC-BY-NC-SA.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Today
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Goal
\end_layout

\begin_layout Itemize
Compile-time speed
\end_layout

\begin_layout Itemize
Run-time speed
\end_layout

\begin_layout Itemize
Choosing the correct container
\end_layout

\begin_layout Itemize
Choosing the correct algorithm
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Planning
\end_layout

\begin_layout Itemize
From NAG to C++
\end_layout

\begin_layout Itemize
Compile-time speed
\end_layout

\begin_layout Itemize
Run-time speed in general
\end_layout

\begin_layout Itemize
(Run-time speed and the STL)
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Go!
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Warming up
\end_layout

\begin_layout Itemize
Lecture: From NAG to C++
\end_layout

\begin_layout Itemize
Lecture: Compile-time speed
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Itemize
What is the difference between compile-time and run-time polymorphism?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
Compile-time polymorphism: selecting a (member) function by using type selection
\end_layout

\begin_layout Itemize
Run-time polymorphism: selecting a member function by using inheritance
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Question
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Herb Sutter.
 Exceptional C++.
 Item 23, page 84, guideline: 'Avoid public virtual functions; prefer using
 the Template Method pattern instead'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//Never use switch,
\end_layout

\begin_layout Plain Layout

//try a more scalable strategy instead
\end_layout

\begin_layout Plain Layout

//Person must not have virtual member functions
\end_layout

\begin_layout Plain Layout

//in the interface (Sutter, Exceptional C++, Item 23)
\end_layout

\begin_layout Plain Layout

//Put every class in its own .h and .cpp file
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  const Person happy(/* */);
\end_layout

\begin_layout Plain Layout

  const Person grumpy(/* */);
\end_layout

\begin_layout Plain Layout

  happy.SayHello(); //Should display 'Hi!'
\end_layout

\begin_layout Plain Layout

  grumpy.SayHello(); //Should display '(mumble) hi'
\end_layout

\begin_layout Plain Layout

  happy.SayBye(); //Should display 'Bye!'
\end_layout

\begin_layout Plain Layout

  grumpy.SayBye(); //Should display '(mumble) bye'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Answer introduction
\end_layout

\begin_layout Itemize
The way to say hello must be a Strategy Design Pattern, e.g.
 SayHelloStrategy
\end_layout

\begin_layout Itemize
The way to bye hello must be a Strategy Design Pattern, e.g.
 SayByeStrategy
\end_layout

\begin_layout Itemize
A Person must have a Strategy to say hello
\end_layout

\begin_layout Itemize
A Person must have a Strategy to say bye
\end_layout

\begin_layout Itemize
Full answer at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.richelbilderbeek.nl/CppStrategyDesignPatternExampleHeadFirst.htm
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//Get the main to work (C++11: fix the compile error)
\end_layout

\begin_layout Plain Layout

//Put every class in its own .h and .cpp file
\end_layout

\begin_layout Plain Layout

//C++98: In strategy.h write 'enum Policy { A, B };'
\end_layout

\begin_layout Plain Layout

//C++11: In strategy.h write 'enum class Policy { A, B };'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  const Strategy<A> x; 
\end_layout

\begin_layout Plain Layout

  const Strategy<B> y;
\end_layout

\begin_layout Plain Layout

  x.DoIt(); //Displays 'Did it the A way'
\end_layout

\begin_layout Plain Layout

  y.DoIt(); //Displays 'Did it the B way'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
strategy.cpp will be empty: cannot do forward declarations on templated member
 functions (yet?)
\end_layout

\begin_layout Itemize
See 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.richelbilderbeek.nl/CppCtStrategyDesignPatternExampleDoIt.htm
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Itemize
What is the difference between compile-time and run-time polymorphism?
\end_layout

\begin_deeper
\begin_layout Itemize
compile-time speed?
\end_layout

\begin_layout Itemize
run-time speed?
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
Compile-time polymorphism
\end_layout

\begin_deeper
\begin_layout Itemize
Slower to compile
\end_layout

\begin_layout Itemize
Faster to run: no virtual function calls
\end_layout

\end_deeper
\begin_layout Itemize
Run-time polymorphism
\end_layout

\begin_deeper
\begin_layout Itemize
Faster to compile
\end_layout

\begin_layout Itemize
Slower to run: virtual function calls
\end_layout

\end_deeper
\begin_layout Itemize
These two techniques are orthagonally related
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Run-time speed
\end_layout

\begin_layout Itemize
Lecture: Improve run-time speed in general
\end_layout

\begin_layout Itemize
Lecture: STL and run-time speed
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Exerise
\end_layout

\begin_layout Itemize
Every person has an GUID, a 32 digit number, which is created at random
 (and is therefore assumed to be unique)
\end_layout

\begin_layout Itemize
Task: GUID creation
\end_layout

\begin_layout Itemize
Every person has a name
\end_layout

\begin_layout Itemize
When a person log in, he/she receives a GUID
\end_layout

\begin_layout Itemize
Persons can be searched for from their GUIDs only
\end_layout

\begin_layout Itemize
The GUID and the person's info is removed when the person quits the current
 session
\end_layout

\begin_layout Itemize
Task: Management of persons
\end_layout

\begin_layout Itemize
Task: testing and profiling
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
EOF
\end_layout

\end_body
\end_document
