#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a6paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation landscape
\suppress_date false
\use_refstyle 1
\backgroundcolor #000000
\fontcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Improve compile-time speed
\end_layout

\begin_layout Author
(C) Rich√®l Bilderbeek 
\begin_inset Graphics
	filename CC-BY-NC-SA.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Itemize
Given a project:
\end_layout

\begin_deeper
\begin_layout Itemize
with X header (.h) files 
\end_layout

\begin_layout Itemize
with Y implementation (.cpp) files
\end_layout

\begin_layout Itemize
in which every .cpp #includes each .h
\end_layout

\begin_layout Itemize
in which every .h #includes each other .h
\end_layout

\end_deeper
\begin_layout Itemize
How often is each .h file compiled?
\end_layout

\begin_layout Itemize
How often is each .cpp file compiled?
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
Every .h file is compiled Y (the number of implementation files) times
\end_layout

\begin_layout Itemize
Every .cpp file is compiled once
\end_layout

\begin_layout Itemize
Conclusion: keep every .h file as simple to compile as possible
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//derived.h (MUST BE CORRECTED!)
\end_layout

\begin_layout Plain Layout

#include <cmath>
\end_layout

\begin_layout Plain Layout

#include <iostream>
\end_layout

\begin_layout Plain Layout

#include "base.h"
\end_layout

\begin_layout Plain Layout

#include "a.h"
\end_layout

\begin_layout Plain Layout

#include "b.h"
\end_layout

\begin_layout Plain Layout

#include "c.h"
\end_layout

\begin_layout Plain Layout

struct Derived: public Base {
\end_layout

\begin_layout Plain Layout

  A  m_a; 
\end_layout

\begin_layout Plain Layout

  B* m_b;
\end_layout

\begin_layout Plain Layout

  C& m_c;
\end_layout

\begin_layout Plain Layout

  double Sqrt() const;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

std::ostream& operator<<(
\end_layout

\begin_layout Plain Layout

  std::ostream& os, const Derived& myclass);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
Add #include guards
\end_layout

\begin_layout Itemize
Always write internal #include guards
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter and Andrei Alexandrescu.
 C++ coding standards: 101 rules, guidelines, and best practices.
 Chapter 24
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
(never write external #include guards
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter and Andrei Alexandrescu.
 C++ coding standards: 101 rules, guidelines, and best practices.
 Chapter 24
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
Remove #include <cmath>: no mathematical function is called
\end_layout

\begin_layout Itemize
Never #include unnecessary headers
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter.
 Exceptional C++.
 Item 26
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
Do not #include <iostream>, #include <iosfwd> instead
\end_layout

\begin_layout Itemize
Prefer to #include <iosfwd> when a forward declaration of a stream will
 suffice
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter.
 Exceptional C++.
 Item 26
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
Add forward declarations for 'B * m_b' and 'C& m_c'
\end_layout

\begin_layout Itemize
Remove their header file #includes
\end_layout

\begin_layout Itemize
Never #include a header file when a forward declaration will suffice
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter.
 Exceptional C++.
 Item 26
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//derived.h
\end_layout

\begin_layout Plain Layout

#ifndef DERIVED_H
\end_layout

\begin_layout Plain Layout

#define DERIVED_H
\end_layout

\begin_layout Plain Layout

#include <iosfwd>
\end_layout

\begin_layout Plain Layout

#include "base.h"
\end_layout

\begin_layout Plain Layout

#include "a.h"
\end_layout

\begin_layout Plain Layout

struct B; 
\end_layout

\begin_layout Plain Layout

struct C;
\end_layout

\begin_layout Plain Layout

struct Derived: public Base {
\end_layout

\begin_layout Plain Layout

  A m_a; B* m_b; C& m_c;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

std::ostream& operator<<(
\end_layout

\begin_layout Plain Layout

  std::ostream& os, const Derived& myclass);
\end_layout

\begin_layout Plain Layout

#endif //~DERIVED_H
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Advice
\end_layout

\begin_layout Itemize
Keep a header file as simple to compile as possible
\end_layout

\begin_layout Itemize
Always write internal #include guards
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter and Andrei Alexandrescu.
 C++ coding standards: 101 rules, guidelines, and best practices.
 Chapter 24
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Never #include unnecessary headers
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter.
 Exceptional C++.
 Item 26
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Prefer to #include <iosfwd> when a forward declaration of a stream will
 suffice
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter.
 Exceptional C++.
 Item 26
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Never #include a header file when a forward declaration will suffice
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter.
 Exceptional C++.
 Item 26
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
For widely used classes, prefer to use the compiler-firewall idiom (Pimpl
 idiom)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter, Andrei Alexandrescu.
 C++ coding standards: 101 rules, guidelines, and best practices.
 Item 43
\end_layout

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
?Meyers, More Effective C++
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Never inherit when composition is sufficient
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
?Meyers, More Effective C++
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
EOF
\end_layout

\end_body
\end_document
