#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a6paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation landscape
\suppress_date false
\use_refstyle 1
\backgroundcolor #000000
\fontcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Regexes
\end_layout

\begin_layout Author
(C) Rich√®l Bilderbeek 
\begin_inset Graphics
	filename CC-BY-NC-SA.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Itemize
Introduction
\end_layout

\begin_layout Itemize
What is a regex?
\end_layout

\begin_layout Itemize
Using regexes
\end_layout

\begin_layout Itemize
Conclusion
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Goal
\end_layout

\begin_layout Itemize
Understand when you might want to use a regex tool/library
\end_layout

\begin_layout Itemize
Obtain an idea how to use such a tool in practice
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
What is a regex?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Definition
\end_layout

\begin_layout Itemize
'In computing, a regular expression is a specific pattern that provides
 concise and flexible means to "match" (specify and recognize) strings of
 text'
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Regular_expression
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Example: a Dutch postal code consist of four characters, a space and two
 uppercase characters, for example '1234 AB'
\end_layout

\begin_deeper
\begin_layout Itemize
Can be implemented with a for-loop
\end_layout

\begin_layout Itemize
Regexes are more efficient to solve this type of problem
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Example regexes
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
using Boost.Regex
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
non-idiot-proof versions
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
My nickname
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(B|b)ilderbikkel
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Find out what I like
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

I like (.*)
\backslash
.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name of alcoholic beverage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

whisk(e)?y
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Request for help
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

h(e)+lp!
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++ filename
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

.*
\backslash
.(h|hpp|c|cpp)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dutch postal code #1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout


\backslash
d
\backslash
d
\backslash
d
\backslash
d
\backslash
s[A-Z][A-Z]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dutch postal code #2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout


\backslash
d{4}
\backslash
s[A-Z]{2}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IP address
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout


\backslash
d{1,3}
\backslash
.
\backslash
d{1,3}
\backslash
.
\backslash
d{1,3}
\backslash
.
\backslash
d{1,3}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

http://(www
\backslash
.)?(
\backslash
w*
\backslash
.)+
\backslash
w*
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Regex operations
\end_layout

\begin_layout Itemize
Searching
\end_layout

\begin_layout Itemize
Replacing
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sed "s/from/to/" test.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Using regexes
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Universality of regexes
\end_layout

\begin_layout Itemize
Different tools might use a different syntax
\end_layout

\begin_layout Itemize
Different libraries might use a different syntax
\end_layout

\begin_layout Itemize
Different library implementations might use a different syntax
\end_layout

\begin_layout Itemize
Syntaxes similar
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Options to work with regexes
\end_layout

\begin_layout Itemize
Using command-line tools
\end_layout

\begin_layout Itemize
(Using shell scripts)
\end_layout

\begin_layout Itemize
Using C++ regex libraries
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Command line from command line
\end_layout

\begin_layout Itemize
Finding:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

egrep "[0-9]{4}
\backslash
s?[A-Z][A-Z]" myfile.txt
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Displays:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1234 AB 
\end_layout

\begin_layout Plain Layout

1234AB 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Replacing:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sed "s/from/to/" myfile.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Command line from C++
\end_layout

\begin_layout Itemize
Calling egrep from C++
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <cstdlib>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  std::system("egrep "
\end_layout

\begin_layout Plain Layout

    "
\backslash
"[0-9]{4}
\backslash

\backslash
s?[A-Z][A-Z]
\backslash
"" 
\end_layout

\begin_layout Plain Layout

    "myfile.txt");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
C++ regex libraries
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TR1 (Visual Studio)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std::tr1::regex
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TR1 (GCC)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(never implemented)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Boost
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boost::regex
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std::regex
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
QRegExp
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++/CLI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System::Text::RegularExpressions::Regex
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Finding an exact match
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <cassert>
\end_layout

\begin_layout Plain Layout

#include <string> 
\end_layout

\begin_layout Plain Layout

#include <boost/regex.hpp>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout

  const boost::regex r("
\backslash

\backslash
d{4}
\backslash

\backslash
s[A-Z]{2}");
\end_layout

\begin_layout Plain Layout

  assert(boost::regex_match("1234 AB",r));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Finding a match within
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <cassert>
\end_layout

\begin_layout Plain Layout

#include <string> 
\end_layout

\begin_layout Plain Layout

#include <boost/regex.hpp>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout

  const boost::regex r("
\backslash

\backslash
d{4}
\backslash

\backslash
s[A-Z]{2}");
\end_layout

\begin_layout Plain Layout

  assert(!boost::regex_match( "Is 1234 AB valid?",r));
\end_layout

\begin_layout Plain Layout

  assert( boost::regex_search("Is 1234 AB valid?",r));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Iterate over matches
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <cassert>
\end_layout

\begin_layout Plain Layout

#include <string>
\end_layout

\begin_layout Plain Layout

#include <boost/regex.hpp>
\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

  const std::string s = "(1) 1234 AB (2) 2345 BC (3)";
\end_layout

\begin_layout Plain Layout

  const boost::regex r("
\backslash

\backslash
d{4} [A-Z]{2}");
\end_layout

\begin_layout Plain Layout

  boost::sregex_iterator i(s.begin(),s.end(),r);
\end_layout

\begin_layout Plain Layout

  assert(i != boost::sregex_iterator());
\end_layout

\begin_layout Plain Layout

  assert(i->str()=="1234 AB");
\end_layout

\begin_layout Plain Layout

  ++i;
\end_layout

\begin_layout Plain Layout

  assert(i != boost::sregex_iterator());
\end_layout

\begin_layout Plain Layout

  assert(i->str()=="2345 BC");
\end_layout

\begin_layout Plain Layout

  ++i;
\end_layout

\begin_layout Plain Layout

  assert(i == boost::sregex_iterator());
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Replacing
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <cassert> 
\end_layout

\begin_layout Plain Layout

#include <string> 
\end_layout

\begin_layout Plain Layout

#include <boost/regex.hpp>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() 
\end_layout

\begin_layout Plain Layout

{   
\end_layout

\begin_layout Plain Layout

  const std::string str = "The zip code 1234AB is correct";
\end_layout

\begin_layout Plain Layout

  const boost::regex regex("(
\backslash

\backslash
d{4})()([A-Z]{2})");
\end_layout

\begin_layout Plain Layout

  const std::string fix("($1) ($3)");
\end_layout

\begin_layout Plain Layout

  const std::string s
\end_layout

\begin_layout Plain Layout

    = boost::regex_replace(str, regex, fix,
\end_layout

\begin_layout Plain Layout

        boost::match_default | boost::format_all);
\end_layout

\begin_layout Plain Layout

  assert(s == "The zip code 1234 AB is correct"); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Itemize
Regexes are very powerful tools
\end_layout

\begin_layout Itemize
Be aware that no two implementations are exactly different
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
EOF
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_body
\end_document
