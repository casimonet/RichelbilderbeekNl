#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a6paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation landscape
\suppress_date false
\use_refstyle 1
\backgroundcolor #000000
\fontcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
COM from C++, history and now
\end_layout

\begin_layout Author
(C) Rich√®l Bilderbeek 
\begin_inset Graphics
	filename CC-BY-NC-SA.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Itemize
Disclaimer
\end_layout

\begin_layout Itemize
Initial situation
\end_layout

\begin_layout Itemize
Problem
\end_layout

\begin_layout Itemize
Solution
\end_layout

\begin_layout Itemize
COM currently
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Goal
\end_layout

\begin_layout Itemize
Review COM's history
\end_layout

\begin_layout Itemize
Review COM from a modern C++ perspective
\end_layout

\begin_layout Itemize
Remove most unfamiliarity with COM
\end_layout

\begin_layout Itemize
Not a COM tutorial
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Disclaimer
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Disclaimer
\end_layout

\begin_layout Itemize
I took great care in telling the truth in all of the following
\end_layout

\begin_layout Itemize
Yet, all of the following may be false
\end_layout

\begin_layout Itemize
Please correct me if I am wrong
\end_layout

\begin_layout Itemize
MSDN appears to be an excellent reference, but I could not find a single
 online COM tutorial that was correct C or C++
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Initial situation
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
1993
\end_layout

\begin_layout Itemize
Win16 API used in Windows 3.1
\end_layout

\begin_layout Itemize
Win32 API in development (would ship with Windows 95
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
in 1995
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
Dynamic Data Exchange (DDE) used for interprocess communication, for example
 copy and paste
\end_layout

\begin_layout Itemize
C dominates in both API's
\end_layout

\begin_layout Itemize
C++ young: available since 1983, but without Standard
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Problem
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Problem
\end_layout

\begin_layout Itemize
Complexity barrier was getting closer
\end_layout

\begin_deeper
\begin_layout Itemize
C coding standards matured
\end_layout

\begin_layout Itemize
Could C++ help?
\end_layout

\end_deeper
\begin_layout Itemize
Language neutral communication between programs desired
\end_layout

\begin_deeper
\begin_layout Itemize
Programmer A calls COM object B from Visual Basic
\end_layout

\begin_layout Itemize
COM object B was written in C
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
pun intended
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Windows code was big, re-use of possibly-suboptimal interface preferred
 over rewrite
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Solution
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
COM
\end_layout

\begin_layout Itemize
Component Object Model
\end_layout

\begin_layout Itemize
Allows compiling of functions to a DLL from any language
\end_layout

\begin_layout Itemize
Makes these functions in DLL callable from any language
\end_layout

\begin_layout Itemize
Still in use, predecessor of, among others, DCOM, COM+, .NET
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Common interface
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DLL functions callable from any language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDL
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Interface Definition Language
\end_layout

\end_inset

 interface between any language and DLL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C interface between IDL and C++
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++ implementation of C interface
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
IDL
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
BSTR = Binary String, a string that has its size stored first, text after
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import "myclass.h","unknwn.idl"; 
\end_layout

\begin_layout Plain Layout

[
\end_layout

\begin_layout Plain Layout

  object,
\end_layout

\begin_layout Plain Layout

  uuid(12345678-90ab-cdef-1234-567890abcdef),
\end_layout

\begin_layout Plain Layout

] interface IMyClass : IUnknown
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  HRESULT SayHello();
\end_layout

\begin_layout Plain Layout

  HRESULT Swap([in,out] int * x, [in,out] int * y);
\end_layout

\begin_layout Plain Layout

  HRESULT IsPassword(
\end_layout

\begin_layout Plain Layout

    [in] char * s, [out] int * is_password); 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
C interface declaration
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <windows.h>
\end_layout

\begin_layout Plain Layout

interface IMyClass : public IUnknown 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  public:
\end_layout

\begin_layout Plain Layout

  HRESULT STDMETHODCALLTYPE QueryInterface(
\end_layout

\begin_layout Plain Layout

    REFIID riid, PVOID * object);
\end_layout

\begin_layout Plain Layout

  ULONG STDMETHODCALLTYPE AddRef();
\end_layout

\begin_layout Plain Layout

  ULONG STDMETHODCALLTYPE Release();
\end_layout

\begin_layout Plain Layout

  HRESULT SayHello();
\end_layout

\begin_layout Plain Layout

  HRESULT Swap(int * x, int * y);
\end_layout

\begin_layout Plain Layout

  HRESULT IsPassword(char * s, int * is_password); 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
C-like interface: reference counting
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ULONG STDMETHODCALLTYPE IMyClass::AddRef() 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

  return reference_count++;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ULONG STDMETHODCALLTYPE IMyClass::Release() 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  --reference_count;
\end_layout

\begin_layout Plain Layout

  if (reference_count == 0) delete this;
\end_layout

\begin_layout Plain Layout

  return reference_count;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
C-like interface: dynamic_cast
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

HRESULT STDMETHODCALLTYPE IMyClass::QueryInterface(
\end_layout

\begin_layout Plain Layout

  REFIID riid, PVOID * object) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  if ( riid == IID_IMyClass)
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    *object = this;
\end_layout

\begin_layout Plain Layout

    this->AddRef();
\end_layout

\begin_layout Plain Layout

    return NO_ERROR;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else  
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    *object = 0;
\end_layout

\begin_layout Plain Layout

    return E_NOINTERFACE;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
C-like interface: custom functions
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

HRESULT IMyClass::SayHello() {
\end_layout

\begin_layout Plain Layout

  std::cout << "Hello
\backslash
n";
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

HRESULT IMyClass::Swap(int * x, int * y) {
\end_layout

\begin_layout Plain Layout

  const int tmp = *x;
\end_layout

\begin_layout Plain Layout

  *x = *y;
\end_layout

\begin_layout Plain Layout

  *y = tmp;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

HRESULT IMyClass::IsPassword(
\end_layout

\begin_layout Plain Layout

  char * s, int * is_password) {
\end_layout

\begin_layout Plain Layout

  *is_password 
\end_layout

\begin_layout Plain Layout

    = MyClass::IsPassword(std::string(s));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
C you need
\end_layout

\begin_layout Itemize
Win32 API uses Hungarian notation heavily
\end_layout

\begin_layout Itemize
Hungarian notation is useful in C, but to be avoided in C++
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Bjarne Stroustrup's C++ glossary: 'Hungarian notation - [...] It is totally
 unsuitable for C++ where it complicates maintenance and gets in the way
 of abstraction'
\end_layout

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Herb Sutter, Andrei Alexandrescu.
 C++ coding standards.
 Item 0, example 3: 'Therefore, no C++ coding standard should require Hungarian
 notation, though a C++ coding standard might legitimately choose to ban
 it
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HRESULT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Result (error message)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unsigned long
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PVOID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointer to void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
void *
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PVOID *
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pointer to pointer to void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
void **
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REFIID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reference to IID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IID *
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interface ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GUID
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GUID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Globally Unique Identifier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a C-style struct
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ULONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unsigned long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unsigned long
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
C you need
\end_layout

\begin_layout Itemize
Instead of std::string: 'char*' or 'wchar_t*'
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
2-byte unicode string
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
'wchar_t*' is used often as a return type
\end_layout

\begin_layout Itemize
Instead of (derived) class: 'void*'
\end_layout

\begin_layout Itemize
Work with std::
\bar under
w
\bar default
string, std::
\bar under
w
\bar default
cout, 
\bar under
wcs
\bar default
strlen, etc.
 instead
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::wcout << L"my_class says: " 
\end_layout

\begin_layout Plain Layout

  << my_coclass->SayHello() << L"
\backslash
n";
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
EOF
\end_layout

\end_body
\end_document
