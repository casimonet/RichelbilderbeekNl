#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a6paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation landscape
\suppress_date false
\use_refstyle 1
\backgroundcolor #000000
\fontcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Improve run-time speed
\end_layout

\begin_layout Author
(C) Rich√®l Bilderbeek 
\begin_inset Graphics
	filename CC-BY-NC-SA.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
Introductory questions
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Itemize
A programmer reports: 'I have found something inefficient and I have changed
 the code'
\end_layout

\begin_layout Itemize
What is the chance this changes run-time speed?
\end_layout

\begin_layout Itemize
What is the chance this improves run-time speed?
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
What is the chance this changes run-time speed?
\end_layout

\begin_deeper
\begin_layout Itemize
20% or less
\end_layout

\begin_layout Itemize
80% of runtime is spent in 20% of the code
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, More Effective C++, item 16
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
What is the chance this improves run-time speed?
\end_layout

\begin_deeper
\begin_layout Itemize
Unknown, might be worse, might be better
\end_layout

\begin_layout Itemize
Programmers have lousy intuition about run-time speed
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, More Effective C++, item 16
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//CLEVERGUY: I unwound the loop
\end_layout

\begin_layout Plain Layout

//in this known-to-be speed-critical section
\end_layout

\begin_layout Plain Layout

DoSomething(0);
\end_layout

\begin_layout Plain Layout

DoSomething(1);
\end_layout

\begin_layout Plain Layout

DoSomething(2);
\end_layout

\begin_layout Plain Layout

//CLEVERGUY: Just look how inefficient this was B-)
\end_layout

\begin_layout Plain Layout

//for (int i=0; i!=3; ++i) DoSomething(i);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Itemize
Compilers do a lot of optimizations for you
\end_layout

\begin_layout Itemize
You can assume loop unwinding is supported
\end_layout

\begin_layout Itemize
Correctness, simplicity, and clarity comes first
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sutter & Alexandrescu, C++ Coding Standards, Item 6
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Phonebook
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  //Assume always m_persons.size() == m_phonenumbers.size()
\end_layout

\begin_layout Plain Layout

  std::vector<Person> m_persons;
\end_layout

\begin_layout Plain Layout

  std::vector<int> m_phonenumbers;
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
A Phonebook can be assumed to have many lookups.
 In an unsorted std::vector, this has O(n).
 In an ordered map, this has O(log (n))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Phonebook
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  //LUT = Look Up Table
\end_layout

\begin_layout Plain Layout

  std::map<Person,int> m_lut;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

template <class ReturnType, class ContainerType>
\end_layout

\begin_layout Plain Layout

const ReturnType Sum(const ContainerType& v)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  assert(v.size() != 0);
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Not every container (e.g.
 std::list) known its size: size() then has O(n).
 empty() has O(1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

template <class ReturnType, class ContainerType>
\end_layout

\begin_layout Plain Layout

const ReturnType Sum(const ContainerType& v)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  assert(!v.empty());
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct MyClass
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  MyClass(const std::string s) 
\end_layout

\begin_layout Plain Layout

  { 
\end_layout

\begin_layout Plain Layout

    m_s = s; sm_cnt++; 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  std::string m_s;
\end_layout

\begin_layout Plain Layout

  static int sm_cnt;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct MyClass
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  MyClass(const std::string& s) 
\end_layout

\begin_layout Plain Layout

  : m_s(s) 
\end_layout

\begin_layout Plain Layout

  { 
\end_layout

\begin_layout Plain Layout

    ++sm_cnt; 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  std::string m_s;
\end_layout

\begin_layout Plain Layout

  static int sm_cnt;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int DivideByTen(const int x)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  int result = 0;
\end_layout

\begin_layout Plain Layout

  asm
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

     mov ecx,eax
\end_layout

\begin_layout Plain Layout

     mov ecx, dword ptr[x]
\end_layout

\begin_layout Plain Layout

     sar eax,1
\end_layout

\begin_layout Plain Layout

     /* ...
 */
\end_layout

\begin_layout Plain Layout

     add eax,ecx
\end_layout

\begin_layout Plain Layout

     sar eax,3
\end_layout

\begin_layout Plain Layout

     mov dword ptr[result], eax
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  return result;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Don't optimize prematurely
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int DivideByTen(const int x)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  return x / 10;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//Re-use counters, instead of recreating them every time
\end_layout

\begin_layout Plain Layout

int i = 0; int j = 0; const int sz = 10;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  for(i=0; i!=sz; ++i)
\end_layout

\begin_layout Plain Layout

    for (j=0; j!=sz; ++j)
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

  for(i=0; i!=sz; ++i)
\end_layout

\begin_layout Plain Layout

    for (j=0; j!=sz; ++j)
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Minimize global and shared data
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  const int sz = 10;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  for(int i=0; i!=sz; ++i)
\end_layout

\begin_layout Plain Layout

    for (int j=0; j!=sz; ++j)
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

  for(int i=0; i!=sz; ++i)
\end_layout

\begin_layout Plain Layout

    for (int j=0; j!=sz; ++j)
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  //Use my lightning-fast container
\end_layout

\begin_layout Plain Layout

  MyContainer<MyClass> v = /* */;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //Use my advanced sorting algorithm
\end_layout

\begin_layout Plain Layout

  MySort(v);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //Perform my lightning-fast copy
\end_layout

\begin_layout Plain Layout

  MyContainer<MyClass> w = MyCopy(v);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  //Use a lightning-fast container
\end_layout

\begin_layout Plain Layout

  std::vector<MyClass> v( /* */ );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //Use an advanced sorting algorithm
\end_layout

\begin_layout Plain Layout

  std::sort(v.begin(),v.end());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //Perform a lightning-fast copy
\end_layout

\begin_layout Plain Layout

  std::vector<MyClass> w(v);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//MyClass cannot be default-constructed
\end_layout

\begin_layout Plain Layout

std::vector<MyClass> v; 
\end_layout

\begin_layout Plain Layout

const int sz = 100000;
\end_layout

\begin_layout Plain Layout

for (int i=0; i!=sz; ++i) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  v.push_back(MyClass(i));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//MyClass cannot be default-constructed
\end_layout

\begin_layout Plain Layout

std::vector<MyClass> v; 
\end_layout

\begin_layout Plain Layout

const int sz = 100000;
\end_layout

\begin_layout Plain Layout

v.reserve(sz);
\end_layout

\begin_layout Plain Layout

for (int i=0; i!=sz; ++i) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  v.push_back(MyClass(i));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const std::vector<int> GetLowestThree(std::vector<int> v)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  assert(v.size() >= 3)
\end_layout

\begin_layout Plain Layout

  std::sort(v.begin(),v.end());
\end_layout

\begin_layout Plain Layout

  v.resize(3);
\end_layout

\begin_layout Plain Layout

  return v;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

const std::vector<int> GetLowestThree(std::vector<int> v)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  assert(v.size() >= 3)
\end_layout

\begin_layout Plain Layout

  //use std::partial_sort if lowest three must be sorted
\end_layout

\begin_layout Plain Layout

  std::nth_element(v.begin(),v.begin() + 3, v.end());
\end_layout

\begin_layout Plain Layout

  v.resize(3);
\end_layout

\begin_layout Plain Layout

  return v;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  CreateDatabase(); //Load a huge database
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  std::cout << "Please enter an SQL statement
\backslash
n";
\end_layout

\begin_layout Plain Layout

  std::string s; std::cin >> s;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Answer
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  std::thread t(CreateDatabase());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  std::cout << "Please enter an SQL statement
\backslash
n";
\end_layout

\begin_layout Plain Layout

  std::string s; std::cin >> s;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  t.join();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
Main advice
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Overview 1/3
\end_layout

\begin_layout Itemize
Remember the 80-20 rule
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, More Effective C++, item 16
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Programmers have lousy intuition about run-time speed
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, More Effective C++, item 16
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Correctness, simplicity and clarity comes first
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sutter & Alexandrescu, C++ Coding Standards, Item 6
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Know when and how to code for scalability
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sutter & Alexandrescu, C++ Coding Standards, Item 7
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Overview 2/3
\end_layout

\begin_layout Itemize
Don't optimize prematurely
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sutter & Alexandrescu, C++ Coding Standards, Item 8
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Don't pessimize prematurely
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sutter & Alexandrescu, C++ Coding Standards, Item 9
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Minimize global and shared data
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sutter & Alexandrescu, C++ Coding Standards, Item 10
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Choose your library with care
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, More Effective C++, item 23
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Choose your container with care
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, Effective STL, item 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Overview 3/3
\end_layout

\begin_layout Itemize
Make copying cheap and correct for objects in containers
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, Effective STL, item 2
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Choose your algorithm with care
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, Effective STL, items 31
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Understand the legitimate use of custom allocaters
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Meyers, Effective STL, items 31
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
boost::pool
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Consider concurrency
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Sutter & Alexandrescu, C++ Coding Standards, Item 12
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
Details
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Big O
\end_layout

\begin_layout Itemize
Big O notation expresses the run-time cost depending on input size
\end_layout

\begin_layout Itemize
O(1): constant, e.g.
 accessing std::vector element
\end_layout

\begin_layout Itemize
O(n): linear, e.g.
 searching in an unsorted container
\end_layout

\begin_layout Itemize
O(log n): logarithmic, e.g.
 searching in a sorted container
\end_layout

\begin_layout Itemize
O(
\begin_inset Formula $n^{2}$
\end_inset

): quadratic, e.g.
 insertion sort
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://richelbilderbeek.nl/CppInsertionSort.htm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Optimization techniques
\end_layout

\begin_layout Itemize
High
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Fuzzily ordered by yours truly
\end_layout

\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
Improve critical algorithm its Big O
\end_layout

\end_deeper
\begin_layout Itemize
Middle:
\end_layout

\begin_deeper
\begin_layout Itemize
Newer compiler, newer C++ standard, newer library, concurrency
\end_layout

\end_deeper
\begin_layout Itemize
Micro:
\end_layout

\begin_deeper
\begin_layout Itemize
Profile guided optimization, inline, assembler
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Algorithm to improve run-time speed
\end_layout

\begin_layout Itemize
Profile (in release mode!)
\end_layout

\begin_layout Itemize
Find bottleneck
\end_layout

\begin_layout Itemize
Think
\end_layout

\begin_layout Itemize
Change
\end_layout

\begin_layout Itemize
Profile
\end_layout

\begin_layout Itemize
Keep/undo change
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Exercise
\end_layout

\begin_layout Itemize
Write an algorithm focussed on correctly doing X, e.g.
 determine if a number is prime
\end_layout

\begin_layout Itemize
Write one (or more) algorithm to do X faster
\end_layout

\begin_layout Itemize
Profile and determine which is fastest
\end_layout

\begin_layout Itemize
(check on multiple computers)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Chapter
EOF
\end_layout

\end_body
\end_document
