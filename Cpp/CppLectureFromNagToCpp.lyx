#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a6paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation landscape
\suppress_date false
\use_refstyle 1
\backgroundcolor #000000
\fontcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
From NAG to C++
\end_layout

\begin_layout Author
Richel Bilderbeek 
\begin_inset Graphics
	filename /home/richel/Projects/Projects/RichelbilderbeekNl/CC-BY-NC-SA.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
About NAG
\end_layout

\begin_layout Itemize
NAG is a commercial library
\end_layout

\begin_layout Itemize
NAG is developed by the Numerical Algorithms Group
\end_layout

\begin_layout Itemize
For C++ the NAG C library can be used
\end_layout

\begin_layout Itemize
The NAG C library supports multithreading
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Goal
\end_layout

\begin_layout Itemize
How to work with C++ The Right Way?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Itemize
C example from NAG: 'Hello NAG'
\end_layout

\begin_layout Itemize
Initial conversion from C to C++
\end_layout

\begin_layout Itemize
Analyse this initial solution
\end_layout

\begin_layout Itemize
Improve solution
\end_layout

\begin_layout Itemize
Discuss trade-offs in solution
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
From NAG...
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Hello NAG
\end_layout

\begin_layout Itemize
The example following is adapted from 'Essential Introduction to NAG'
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.nag.com/numeric/CL/nagdoc_cl23/html/GENINT/essint.html
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Question: what is the benefit of using NAG in the example?
\begin_inset Note Note
status open

\begin_layout Plain Layout
Supports multithreading
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Example: Hello NAG for C
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* For C compiler */
\end_layout

\begin_layout Plain Layout

#include <nag.h> 
\end_layout

\begin_layout Plain Layout

#include <nag_stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char * s = 0;
\end_layout

\begin_layout Plain Layout

  s = NAG_ALLOC(12,char);
\end_layout

\begin_layout Plain Layout

  if (!s) return 1;
\end_layout

\begin_layout Plain Layout

  strcpy(s, "Hello NAG");
\end_layout

\begin_layout Plain Layout

  puts(s);
\end_layout

\begin_layout Plain Layout

  NAG_FREE(s);
\end_layout

\begin_layout Plain Layout

  return 0; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Example: Hello NAG without NAG
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* For C compiler */
\end_layout

\begin_layout Plain Layout

#include <stdlib.h> 
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

  char * s = 0;
\end_layout

\begin_layout Plain Layout

  s = malloc(22 * sizeof(char)); /* NAG_ALLOC(22,char); */
\end_layout

\begin_layout Plain Layout

  if (!s) return 1;
\end_layout

\begin_layout Plain Layout

  strcpy(s, "Hello NAG without NAG");
\end_layout

\begin_layout Plain Layout

  puts(s);
\end_layout

\begin_layout Plain Layout

  free(s); /* NAG_FREE(s); */
\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Exercise: Hello NAG in C++
\end_layout

\begin_layout Itemize
The best C style is not always the best C++ style
\end_layout

\begin_layout Itemize
Convert the code to the best C++ possible
\end_layout

\begin_layout Itemize
Only care about the operations in the code
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Example: Hello NAG in C++
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* For C++ compiler */
\end_layout

\begin_layout Plain Layout

int main(void) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char * s = 0;
\end_layout

\begin_layout Plain Layout

  s = NAG_ALLOC(32, char)
\end_layout

\begin_layout Plain Layout

  if (!s)
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    /* ...
 */
\end_layout

\begin_layout Plain Layout

    return 1;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  /* ...
 */
\end_layout

\begin_layout Plain Layout

  NAG_FREE(s);
\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
(Initial) correct solution
\end_layout

\begin_layout Itemize
C++ specification that a function takes no arguments
\end_layout

\begin_layout Itemize
C++ comment
\end_layout

\begin_layout Itemize
Const-correct
\end_layout

\begin_layout Itemize
Implicit return
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
(Initial) correct solution 1/4
\end_layout

\begin_layout Itemize
In C: a function that has no arguments has '(void)'
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main(void) {}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In C++: a function that has no arguments has '()'
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main() {}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Benefits
\end_layout

\begin_deeper
\begin_layout Itemize
less typing
\end_layout

\begin_layout Itemize
using preferred syntax
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
(Initial) correct solution 2/4
\end_layout

\begin_layout Itemize
In C: comments only '/* */'
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/* ...
 */
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In C++: comments '/* */' for multi-line and '//' for single-line at end
 of line
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

//...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Benefits
\end_layout

\begin_deeper
\begin_layout Itemize
Connect forget a closing '*/'
\end_layout

\begin_layout Itemize
Single line comment can be enclosed in a multi-line comment
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
(Initial) correct solution 3/4
\end_layout

\begin_layout Itemize
In C: all declarations at beginning of function
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  char * s = 0;
\end_layout

\begin_layout Plain Layout

  s = NAG_ALLOC(32, char);
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In C++: declarations can be postponed until definition
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  char * const s = NAG_ALLOC(32, char);
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Benefits
\end_layout

\begin_deeper
\begin_layout Itemize
No uninitialized variables
\end_layout

\begin_layout Itemize
RAII ('Resource Aquisition Is Initialization') idiom
\end_layout

\begin_layout Itemize
Const-correctness
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
(Initial) correct solution 4/4
\end_layout

\begin_layout Itemize
In C, main must return an int
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  /* ...
 */
\end_layout

\begin_layout Plain Layout

  return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In C++, main implicitly returns zero
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main() { /* */ }
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Benefits
\end_layout

\begin_deeper
\begin_layout Itemize
No needless typing
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
(Initial) correct solution
\end_layout

\begin_layout Itemize
Next slide: result of putting these in
\end_layout

\begin_layout Itemize
Question: can the resulting code be improved?
\end_layout

\begin_deeper
\begin_layout Itemize
Exception safety
\end_layout

\begin_layout Itemize
Scalability
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
(Initial) correct solution code
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <nag.h> 
\end_layout

\begin_layout Plain Layout

#include <nag_stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  char * const s = NAG_ALLOC(32,char);
\end_layout

\begin_layout Plain Layout

  if (!s)
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    //...
\end_layout

\begin_layout Plain Layout

    return 1;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  //...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  NAG_FREE(s);
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
(Initial) correct solution code critique
\end_layout

\begin_layout Itemize
's' is not initialized with an initial value (only allocated memory for
 these)
\end_layout

\begin_layout Itemize
's' cannot hold const chars, because the chars must be set after allocation
 their memory
\end_layout

\begin_layout Itemize
's' has size 32, this might be concluded from an initial value
\end_layout

\begin_layout Itemize
's' will only be freed if the code reaches the NAG_FREE in the end
\end_layout

\begin_layout Itemize
Thrown exceptions must be caught to free the resources
\end_layout

\begin_layout Itemize
Scales badly for more allocations
\end_layout

\begin_layout Itemize
Question: How to solve all this critique?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
...
 to C++
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Resolving the (initial) correct solution code critique
\end_layout

\begin_layout Itemize
Use a class
\end_layout

\begin_layout Itemize
Exercise
\end_layout

\begin_deeper
\begin_layout Itemize
Write a class that 
\end_layout

\begin_deeper
\begin_layout Itemize
has a proper name
\end_layout

\begin_layout Itemize
allocates its resources automatically
\end_layout

\begin_layout Itemize
always has an initial value
\end_layout

\begin_layout Itemize
frees its resources automatically
\end_layout

\end_deeper
\begin_layout Itemize
Use this class in main
\end_layout

\begin_layout Itemize
Initialize it with a text
\end_layout

\end_deeper
\begin_layout Itemize
Do not care about copying behavior (yet)
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Answer outline
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct NagString 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  NagString(const char * const s) { /* ...
 */ }
\end_layout

\begin_layout Plain Layout

  ~NagString() { /* ...
 */ }
\end_layout

\begin_layout Plain Layout

  const char * const m_s; 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  const NagString s("Hello NAG"); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
NagString in detail 1/2
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct NagString 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  explicit NagString(const char * const s) 
\end_layout

\begin_layout Plain Layout

    : m_s(DeepCopy(s)) { }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  ~NagString() {  NAG_FREE(m_s); }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  static const char * DeepCopy(const char * const s) 
\end_layout

\begin_layout Plain Layout

  { 
\end_layout

\begin_layout Plain Layout

    //...
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  const char * const m_s; 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
NagString in detail 2/2
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct NagString 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  static const char * DeepCopy(const char * const s) 
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    if (!s) return 0;
\end_layout

\begin_layout Plain Layout

    //Care about trailing 
\backslash
0
\end_layout

\begin_layout Plain Layout

    char * const t
\end_layout

\begin_layout Plain Layout

      = NAG_ALLOC(std::strlen(s) + 1,char);
\end_layout

\begin_layout Plain Layout

    if (!t) throw std::bad_alloc();
\end_layout

\begin_layout Plain Layout

    std::strcpy(t,s);
\end_layout

\begin_layout Plain Layout

    return t;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
NagString exercise
\end_layout

\begin_layout Itemize
Strong points?
\end_layout

\begin_layout Itemize
Weak points?
\end_layout

\begin_layout Itemize
Points that are unknown to be strong or weak?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
NagString exercise answer 1/2
\end_layout

\begin_layout Itemize
Strong
\end_layout

\begin_deeper
\begin_layout Itemize
RAII idiom
\end_layout

\begin_layout Itemize
Simple interface
\end_layout

\begin_layout Itemize
m_s can be read without making a copy
\end_layout

\end_deeper
\begin_layout Itemize
Weak
\end_layout

\begin_deeper
\begin_layout Itemize
Copy constructor is not disabled nor implemented correctly
\end_layout

\begin_layout Itemize
operator= is not disabled nor implemented correctly
\end_layout

\begin_layout Itemize
m_s can still be deleted
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
NagString exercise answer 2/2
\end_layout

\begin_layout Itemize
Unknown
\end_layout

\begin_deeper
\begin_layout Itemize
Does allowing empty strings benefit the client?
\end_layout

\begin_layout Itemize
Strong or no guarantee, depending on NAG
\end_layout

\begin_deeper
\begin_layout Itemize
Strong if NAG_FREE has nothrow guarantee
\end_layout

\begin_layout Itemize
None if NAG_FREE can throw
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Bonus: why not use std::string?
\begin_inset Note Note
status open

\begin_layout Plain Layout
There might be benefit in the multithreadedness of NAG
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Exercise
\end_layout

\begin_layout Itemize
Write a (one of many) correct NagString class implementation
\end_layout

\begin_layout Itemize
Next: two possible solutions
\end_layout

\begin_deeper
\begin_layout Itemize
Which tradoffs are chosen for?
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Answer 1
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct NagString {
\end_layout

\begin_layout Plain Layout

  explicit NagString(const char * const s) { /* */ }
\end_layout

\begin_layout Plain Layout

  ~NagString() { /* */ }
\end_layout

\begin_layout Plain Layout

  static const char * Create(const char * const s) { 
\end_layout

\begin_layout Plain Layout

    assert(s); 
\end_layout

\begin_layout Plain Layout

    //...
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  const char * const m_s;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  private:
\end_layout

\begin_layout Plain Layout

  NagString(const NagString& rhs); // = delete
\end_layout

\begin_layout Plain Layout

  NagString& operator=(const NagString& rhs); // = delete 
\end_layout

\begin_layout Plain Layout

}; 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Answer 2
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct NagString {
\end_layout

\begin_layout Plain Layout

  explicit NagString(const char * const s) { /* */ }
\end_layout

\begin_layout Plain Layout

  ~NagString() { /* */ }
\end_layout

\begin_layout Plain Layout

  static const char * Create(const char * const s) { 
\end_layout

\begin_layout Plain Layout

    if (!s) throw std::invalid_argument("s null");
\end_layout

\begin_layout Plain Layout

    //...
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  const std::string Get() const { return std::string(m_s); }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  private:
\end_layout

\begin_layout Plain Layout

  NagString(const NagString& rhs); // = delete
\end_layout

\begin_layout Plain Layout

  NagString& operator=(const NagString& rhs); // = delete
\end_layout

\begin_layout Plain Layout

  const char * const m_s; 
\end_layout

\begin_layout Plain Layout

}; 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Itemize
The best C style is not the best C++ style
\end_layout

\begin_layout Itemize
C++ allows for scalability, exception safety, automatic memory management
\end_layout

\begin_layout Itemize
C++ allows for tradeoffs
\end_layout

\end_body
\end_document
